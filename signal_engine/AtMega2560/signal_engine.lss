
signal_engine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800200  00001e52  00001ee6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000023a  008002b2  008002b2  00001f98  2**0
                  ALLOC
  3 .stab         00005478  00000000  00000000  00001f98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004c92  00000000  00000000  00007410  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000c0a2  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000c0b4  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000bbc  00000000  00000000  0000c0f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b1a  00000000  00000000  0000ccb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000d7ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  0000d7e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	27 c1       	rjmp	.+590    	; 0x250 <__dtors_end>
       2:	00 00       	nop
       4:	56 c1       	rjmp	.+684    	; 0x2b2 <__bad_interrupt>
       6:	00 00       	nop
       8:	54 c1       	rjmp	.+680    	; 0x2b2 <__bad_interrupt>
       a:	00 00       	nop
       c:	52 c1       	rjmp	.+676    	; 0x2b2 <__bad_interrupt>
       e:	00 00       	nop
      10:	50 c1       	rjmp	.+672    	; 0x2b2 <__bad_interrupt>
      12:	00 00       	nop
      14:	4e c1       	rjmp	.+668    	; 0x2b2 <__bad_interrupt>
      16:	00 00       	nop
      18:	4c c1       	rjmp	.+664    	; 0x2b2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4a c1       	rjmp	.+660    	; 0x2b2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	48 c1       	rjmp	.+656    	; 0x2b2 <__bad_interrupt>
      22:	00 00       	nop
      24:	46 c1       	rjmp	.+652    	; 0x2b2 <__bad_interrupt>
      26:	00 00       	nop
      28:	44 c1       	rjmp	.+648    	; 0x2b2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	42 c1       	rjmp	.+644    	; 0x2b2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	40 c1       	rjmp	.+640    	; 0x2b2 <__bad_interrupt>
      32:	00 00       	nop
      34:	3e c1       	rjmp	.+636    	; 0x2b2 <__bad_interrupt>
      36:	00 00       	nop
      38:	3c c1       	rjmp	.+632    	; 0x2b2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3a c1       	rjmp	.+628    	; 0x2b2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	38 c1       	rjmp	.+624    	; 0x2b2 <__bad_interrupt>
      42:	00 00       	nop
      44:	36 c1       	rjmp	.+620    	; 0x2b2 <__bad_interrupt>
      46:	00 00       	nop
      48:	34 c1       	rjmp	.+616    	; 0x2b2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	32 c1       	rjmp	.+612    	; 0x2b2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	30 c1       	rjmp	.+608    	; 0x2b2 <__bad_interrupt>
      52:	00 00       	nop
      54:	2e c1       	rjmp	.+604    	; 0x2b2 <__bad_interrupt>
      56:	00 00       	nop
      58:	2c c1       	rjmp	.+600    	; 0x2b2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__vector_23>
      60:	28 c1       	rjmp	.+592    	; 0x2b2 <__bad_interrupt>
      62:	00 00       	nop
      64:	26 c1       	rjmp	.+588    	; 0x2b2 <__bad_interrupt>
      66:	00 00       	nop
      68:	24 c1       	rjmp	.+584    	; 0x2b2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	22 c1       	rjmp	.+580    	; 0x2b2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	20 c1       	rjmp	.+576    	; 0x2b2 <__bad_interrupt>
      72:	00 00       	nop
      74:	1e c1       	rjmp	.+572    	; 0x2b2 <__bad_interrupt>
      76:	00 00       	nop
      78:	1c c1       	rjmp	.+568    	; 0x2b2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1a c1       	rjmp	.+564    	; 0x2b2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	18 c1       	rjmp	.+560    	; 0x2b2 <__bad_interrupt>
      82:	00 00       	nop
      84:	16 c1       	rjmp	.+556    	; 0x2b2 <__bad_interrupt>
      86:	00 00       	nop
      88:	14 c1       	rjmp	.+552    	; 0x2b2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	12 c1       	rjmp	.+548    	; 0x2b2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	10 c1       	rjmp	.+544    	; 0x2b2 <__bad_interrupt>
      92:	00 00       	nop
      94:	0e c1       	rjmp	.+540    	; 0x2b2 <__bad_interrupt>
      96:	00 00       	nop
      98:	0c c1       	rjmp	.+536    	; 0x2b2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0a c1       	rjmp	.+532    	; 0x2b2 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	08 c1       	rjmp	.+528    	; 0x2b2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	06 c1       	rjmp	.+524    	; 0x2b2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	04 c1       	rjmp	.+520    	; 0x2b2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	02 c1       	rjmp	.+516    	; 0x2b2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	00 c1       	rjmp	.+512    	; 0x2b2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	fe c0       	rjmp	.+508    	; 0x2b2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	fc c0       	rjmp	.+504    	; 0x2b2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	fa c0       	rjmp	.+500    	; 0x2b2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	f8 c0       	rjmp	.+496    	; 0x2b2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	f6 c0       	rjmp	.+492    	; 0x2b2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	f4 c0       	rjmp	.+488    	; 0x2b2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	f2 c0       	rjmp	.+484    	; 0x2b2 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	f0 c0       	rjmp	.+480    	; 0x2b2 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	ee c0       	rjmp	.+476    	; 0x2b2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ec c0       	rjmp	.+472    	; 0x2b2 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ea c0       	rjmp	.+468    	; 0x2b2 <__bad_interrupt>
      de:	00 00       	nop
      e0:	e8 c0       	rjmp	.+464    	; 0x2b2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	4a 0a       	sbc	r4, r26
      e6:	4f 0a       	sbc	r4, r31
      e8:	54 0a       	sbc	r5, r20
      ea:	5e 0a       	sbc	r5, r30
      ec:	68 0a       	sbc	r6, r24
      ee:	e1 0a       	sbc	r14, r17
      f0:	72 0a       	sbc	r7, r18
      f2:	7a 0a       	sbc	r7, r26
      f4:	82 0a       	sbc	r8, r18
      f6:	8c 0a       	sbc	r8, r28
      f8:	96 0a       	sbc	r9, r22
      fa:	a0 0a       	sbc	r10, r16
      fc:	af 0a       	sbc	r10, r31
      fe:	b9 0a       	sbc	r11, r25
     100:	e1 0a       	sbc	r14, r17
     102:	c3 0a       	sbc	r12, r19
     104:	cd 0a       	sbc	r12, r29
     106:	d7 0a       	sbc	r13, r23
     108:	04 0b       	sbc	r16, r20
     10a:	07 0b       	sbc	r16, r23
     10c:	f6 0a       	sbc	r15, r22
     10e:	fa 0a       	sbc	r15, r26
     110:	00 0b       	sbc	r16, r16
     112:	3e 0b       	sbc	r19, r30
     114:	0b 0b       	sbc	r16, r27
     116:	0f 0b       	sbc	r16, r31
     118:	15 0b       	sbc	r17, r21
     11a:	19 0b       	sbc	r17, r25
     11c:	1d 0b       	sbc	r17, r29
     11e:	23 0b       	sbc	r18, r19
     120:	27 0b       	sbc	r18, r23
     122:	2b 0b       	sbc	r18, r27
     124:	3e 0b       	sbc	r19, r30
     126:	31 0b       	sbc	r19, r17
     128:	35 0b       	sbc	r19, r21
     12a:	39 0b       	sbc	r19, r25

0000012c <__trampolines_end>:
     12c:	00 00       	nop
     12e:	0a 0b       	sbc	r16, r26
     130:	02 09       	sbc	r16, r2
     132:	0c 0d       	add	r16, r12
     134:	0e 08       	sbc	r0, r14
     136:	07 03       	mulsu	r16, r23
     138:	04 01       	movw	r0, r8
	...
     156:	00 00       	nop
     158:	12 11       	cpse	r17, r2
     15a:	10 00       	.word	0x0010	; ????
	...

00000172 <digital_pin_to_bit_mask_PGM>:
     172:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     182:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     192:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1a2:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1b2:	04 08 10 20 40 80                                   ... @.

000001b8 <digital_pin_to_port_PGM>:
     1b8:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1c8:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1d8:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1e8:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1f8:	0b 0b 0b 0b 0b 0b                                   ......

000001fe <port_to_input_PGM>:
     1fe:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     20e:	00 01 00 00 03 01 06 01 09 01                       ..........

00000218 <port_to_output_PGM>:
     218:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     228:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000232 <port_to_mode_PGM>:
     232:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     242:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000024c <__ctors_start>:
     24c:	ab 08       	sbc	r10, r11

0000024e <__ctors_end>:
     24e:	5e 09       	sbc	r21, r14

00000250 <__dtors_end>:
     250:	11 24       	eor	r1, r1
     252:	1f be       	out	0x3f, r1	; 63
     254:	cf ef       	ldi	r28, 0xFF	; 255
     256:	d1 e2       	ldi	r29, 0x21	; 33
     258:	de bf       	out	0x3e, r29	; 62
     25a:	cd bf       	out	0x3d, r28	; 61
     25c:	00 e0       	ldi	r16, 0x00	; 0
     25e:	0c bf       	out	0x3c, r16	; 60

00000260 <__do_copy_data>:
     260:	12 e0       	ldi	r17, 0x02	; 2
     262:	a0 e0       	ldi	r26, 0x00	; 0
     264:	b2 e0       	ldi	r27, 0x02	; 2
     266:	e2 e5       	ldi	r30, 0x52	; 82
     268:	fe e1       	ldi	r31, 0x1E	; 30
     26a:	00 e0       	ldi	r16, 0x00	; 0
     26c:	0b bf       	out	0x3b, r16	; 59
     26e:	02 c0       	rjmp	.+4      	; 0x274 <__do_copy_data+0x14>
     270:	07 90       	elpm	r0, Z+
     272:	0d 92       	st	X+, r0
     274:	a2 3b       	cpi	r26, 0xB2	; 178
     276:	b1 07       	cpc	r27, r17
     278:	d9 f7       	brne	.-10     	; 0x270 <__do_copy_data+0x10>

0000027a <__do_clear_bss>:
     27a:	24 e0       	ldi	r18, 0x04	; 4
     27c:	a2 eb       	ldi	r26, 0xB2	; 178
     27e:	b2 e0       	ldi	r27, 0x02	; 2
     280:	01 c0       	rjmp	.+2      	; 0x284 <.do_clear_bss_start>

00000282 <.do_clear_bss_loop>:
     282:	1d 92       	st	X+, r1

00000284 <.do_clear_bss_start>:
     284:	ac 3e       	cpi	r26, 0xEC	; 236
     286:	b2 07       	cpc	r27, r18
     288:	e1 f7       	brne	.-8      	; 0x282 <.do_clear_bss_loop>

0000028a <__do_global_ctors>:
     28a:	11 e0       	ldi	r17, 0x01	; 1
     28c:	c7 e2       	ldi	r28, 0x27	; 39
     28e:	d1 e0       	ldi	r29, 0x01	; 1
     290:	00 e0       	ldi	r16, 0x00	; 0
     292:	06 c0       	rjmp	.+12     	; 0x2a0 <__do_global_ctors+0x16>
     294:	21 97       	sbiw	r28, 0x01	; 1
     296:	01 09       	sbc	r16, r1
     298:	80 2f       	mov	r24, r16
     29a:	fe 01       	movw	r30, r28
     29c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__tablejump2__>
     2a0:	c6 32       	cpi	r28, 0x26	; 38
     2a2:	d1 07       	cpc	r29, r17
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	08 07       	cpc	r16, r24
     2a8:	a9 f7       	brne	.-22     	; 0x294 <__do_global_ctors+0xa>
     2aa:	0e 94 60 09 	call	0x12c0	; 0x12c0 <main>
     2ae:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <__do_global_dtors>

000002b2 <__bad_interrupt>:
     2b2:	a6 ce       	rjmp	.-692    	; 0x0 <__vectors>

000002b4 <_ZN4BulbD1Ev>:
	m_off_pwm_value(0)
	 {
		pinMode(pin_no, OUTPUT);
	}

	virtual ~Bulb() {}
     2b4:	08 95       	ret

000002b6 <_ZN12FlashingBulb8SetOnPwmERKj>:
	void SetFlashRate(const unsigned int &blink_interval) {
		m_blink_interval = blink_interval;
	}

	virtual void SetOnPwm(const unsigned int &on_pwm_value) {
		m_on_pwm_value = on_pwm_value;
     2b6:	fb 01       	movw	r30, r22
     2b8:	20 81       	ld	r18, Z
     2ba:	31 81       	ldd	r19, Z+1	; 0x01
     2bc:	fc 01       	movw	r30, r24
     2be:	36 83       	std	Z+6, r19	; 0x06
     2c0:	25 83       	std	Z+5, r18	; 0x05
     2c2:	08 95       	ret

000002c4 <_ZN12FlashingBulb13SetFadeupTimeERKj>:
	}

	virtual void SetFadeupTime(const unsigned int &fadeup_time) {
			m_fadeup_time = fadeup_time;
     2c4:	fb 01       	movw	r30, r22
     2c6:	20 81       	ld	r18, Z
     2c8:	31 81       	ldd	r19, Z+1	; 0x01
     2ca:	fc 01       	movw	r30, r24
     2cc:	34 87       	std	Z+12, r19	; 0x0c
     2ce:	23 87       	std	Z+11, r18	; 0x0b
     2d0:	08 95       	ret

000002d2 <_ZN12FlashingBulb15SetFadedownTimeERKj>:
	}

	virtual void SetFadedownTime(const unsigned int &fadedown_time) {
				m_fadedown_time = fadedown_time;
     2d2:	fb 01       	movw	r30, r22
     2d4:	20 81       	ld	r18, Z
     2d6:	31 81       	ldd	r19, Z+1	; 0x01
     2d8:	fc 01       	movw	r30, r24
     2da:	36 87       	std	Z+14, r19	; 0x0e
     2dc:	25 87       	std	Z+13, r18	; 0x0d
     2de:	08 95       	ret

000002e0 <_ZN9TallShift6UpdateEm>:
			case Images::OFF:
			default:
				m_bulb.Disable();
			}
		}
	void Update(const unsigned long current_time) override {};
     2e0:	08 95       	ret

000002e2 <_ZN13DistantSignalD1Ev>:
	DistantSignal(unsigned int green_pin, unsigned int orange_pin) : Signal(),
	m_green(green_pin),
	m_orange(orange_pin)
	{}

	virtual ~DistantSignal() {}
     2e2:	08 95       	ret

000002e4 <_ZN12MainInSignalD1Ev>:
	m_distant(distant_green_pin, distant_orange_pin),
	m_image(Images::RED){
		SetImage(m_image);
	}

	virtual ~MainInSignal() {}
     2e4:	08 95       	ret

000002e6 <_ZN13MainOutSignalD1Ev>:
	m_s_bottom_green(s_bottom_green_pin),
	m_d_green(d_green_pin),
	m_d_red(d_red_pin),
	m_distant(distant_green_pin, distant_orange_pin){}

	virtual ~MainOutSignal() {}
     2e6:	08 95       	ret

000002e8 <_ZN11NormalStateD1Ev>:

/** Normal state: All signals red. Shift lights dimmed */
class NormalState : public State {
public:
	NormalState(){}
	virtual ~NormalState() {}
     2e8:	08 95       	ret

000002ea <_ZN11NormalState7IsValidERK10LogicState>:

	bool IsValid(const LogicState &ls) override {
     2ea:	fb 01       	movw	r30, r22
		if(ls.switch_A==0 && ls.switch_B==0 && !ls.shift_A && !ls.shift_B)
     2ec:	80 81       	ld	r24, Z
     2ee:	91 81       	ldd	r25, Z+1	; 0x01
     2f0:	89 2b       	or	r24, r25
     2f2:	59 f4       	brne	.+22     	; 0x30a <_ZN11NormalState7IsValidERK10LogicState+0x20>
     2f4:	82 81       	ldd	r24, Z+2	; 0x02
     2f6:	93 81       	ldd	r25, Z+3	; 0x03
     2f8:	89 2b       	or	r24, r25
     2fa:	39 f4       	brne	.+14     	; 0x30a <_ZN11NormalState7IsValidERK10LogicState+0x20>
     2fc:	86 81       	ldd	r24, Z+6	; 0x06
     2fe:	81 11       	cpse	r24, r1
     300:	04 c0       	rjmp	.+8      	; 0x30a <_ZN11NormalState7IsValidERK10LogicState+0x20>
     302:	97 81       	ldd	r25, Z+7	; 0x07
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	89 27       	eor	r24, r25
     308:	08 95       	ret
			return true;
		else
			return false;
     30a:	80 e0       	ldi	r24, 0x00	; 0
	}
     30c:	08 95       	ret

0000030e <_ZN11NormalState9GetImagesER16ImagesCollection>:

	void GetImages(ImagesCollection &collection) override {
     30e:	fb 01       	movw	r30, r22
		collection.a_in_image = MainInSignal::Images::RED;
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	91 83       	std	Z+1, r25	; 0x01
     316:	80 83       	st	Z, r24
		collection.b_in_image = MainInSignal::Images::RED;
     318:	93 83       	std	Z+3, r25	; 0x03
     31a:	82 83       	std	Z+2, r24	; 0x02
		collection.a_out_image = MainOutSignal::Images::RED;
     31c:	95 83       	std	Z+5, r25	; 0x05
     31e:	84 83       	std	Z+4, r24	; 0x04
		collection.b_out_image = MainOutSignal::Images::RED;
     320:	97 83       	std	Z+7, r25	; 0x07
     322:	86 83       	std	Z+6, r24	; 0x06
		collection.a_shift_image = TallShift::Images::OFF;
     324:	11 86       	std	Z+9, r1	; 0x09
     326:	10 86       	std	Z+8, r1	; 0x08
		collection.b_shift_image = TallShift::Images::OFF;
     328:	13 86       	std	Z+11, r1	; 0x0b
     32a:	12 86       	std	Z+10, r1	; 0x0a
     32c:	08 95       	ret

0000032e <_ZN9PassStateD1Ev>:

/** Passing state. */
class PassState : public State {
public:
	PassState(): State(), m_dir_is_ab(true), m_deviation(false){}
	virtual ~PassState() {}
     32e:	08 95       	ret

00000330 <_ZN9PassState7IsValidERK10LogicState>:

	bool IsValid(const LogicState &ls) override {
     330:	dc 01       	movw	r26, r24
     332:	fb 01       	movw	r30, r22
		if((ls.switch_A==0) || (ls.switch_B==0) || ls.switch_A == ls.switch_B || ls.turnout_A != ls.turnout_B || ls.shift_A || ls.shift_B)
     334:	20 81       	ld	r18, Z
     336:	31 81       	ldd	r19, Z+1	; 0x01
     338:	21 15       	cp	r18, r1
     33a:	31 05       	cpc	r19, r1
     33c:	e9 f0       	breq	.+58     	; 0x378 <_ZN9PassState7IsValidERK10LogicState+0x48>
     33e:	82 81       	ldd	r24, Z+2	; 0x02
     340:	93 81       	ldd	r25, Z+3	; 0x03
     342:	00 97       	sbiw	r24, 0x00	; 0
     344:	c9 f0       	breq	.+50     	; 0x378 <_ZN9PassState7IsValidERK10LogicState+0x48>
     346:	28 17       	cp	r18, r24
     348:	39 07       	cpc	r19, r25
     34a:	b1 f0       	breq	.+44     	; 0x378 <_ZN9PassState7IsValidERK10LogicState+0x48>
     34c:	94 81       	ldd	r25, Z+4	; 0x04
     34e:	85 81       	ldd	r24, Z+5	; 0x05
     350:	98 13       	cpse	r25, r24
     352:	12 c0       	rjmp	.+36     	; 0x378 <_ZN9PassState7IsValidERK10LogicState+0x48>
     354:	86 81       	ldd	r24, Z+6	; 0x06
     356:	81 11       	cpse	r24, r1
     358:	0f c0       	rjmp	.+30     	; 0x378 <_ZN9PassState7IsValidERK10LogicState+0x48>
     35a:	47 81       	ldd	r20, Z+7	; 0x07
     35c:	41 11       	cpse	r20, r1
     35e:	0d c0       	rjmp	.+26     	; 0x37a <_ZN9PassState7IsValidERK10LogicState+0x4a>
			return false;

		m_dir_is_ab = (ls.switch_A == 1);
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	21 30       	cpi	r18, 0x01	; 1
     364:	31 05       	cpc	r19, r1
     366:	09 f0       	breq	.+2      	; 0x36a <_ZN9PassState7IsValidERK10LogicState+0x3a>
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	12 96       	adiw	r26, 0x02	; 2
     36c:	8c 93       	st	X, r24
     36e:	12 97       	sbiw	r26, 0x02	; 2

		m_deviation = ls.turnout_A;;
     370:	13 96       	adiw	r26, 0x03	; 3
     372:	9c 93       	st	X, r25

		return true;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	08 95       	ret
	PassState(): State(), m_dir_is_ab(true), m_deviation(false){}
	virtual ~PassState() {}

	bool IsValid(const LogicState &ls) override {
		if((ls.switch_A==0) || (ls.switch_B==0) || ls.switch_A == ls.switch_B || ls.turnout_A != ls.turnout_B || ls.shift_A || ls.shift_B)
			return false;
     378:	80 e0       	ldi	r24, 0x00	; 0
		m_dir_is_ab = (ls.switch_A == 1);

		m_deviation = ls.turnout_A;;

		return true;
	}
     37a:	08 95       	ret

0000037c <_ZN9PassState9GetImagesER16ImagesCollection>:

	void GetImages(ImagesCollection &collection) override {
     37c:	fb 01       	movw	r30, r22
		if(m_dir_is_ab) {
     37e:	dc 01       	movw	r26, r24
     380:	12 96       	adiw	r26, 0x02	; 2
     382:	2c 91       	ld	r18, X
     384:	12 97       	sbiw	r26, 0x02	; 2
     386:	13 96       	adiw	r26, 0x03	; 3
     388:	8c 91       	ld	r24, X
     38a:	22 23       	and	r18, r18
     38c:	b9 f0       	breq	.+46     	; 0x3bc <_ZN9PassState9GetImagesER16ImagesCollection+0x40>
			collection.a_in_image = m_deviation ? MainInSignal::Images::GREEN_DEVIATE : MainInSignal::Images::GREEN_STRAIGHT;
     38e:	81 11       	cpse	r24, r1
     390:	03 c0       	rjmp	.+6      	; 0x398 <_ZN9PassState9GetImagesER16ImagesCollection+0x1c>
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	02 c0       	rjmp	.+4      	; 0x39c <_ZN9PassState9GetImagesER16ImagesCollection+0x20>
     398:	22 e0       	ldi	r18, 0x02	; 2
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	31 83       	std	Z+1, r19	; 0x01
     39e:	20 83       	st	Z, r18
			collection.a_out_image = MainOutSignal::Images::RED;
     3a0:	21 e0       	ldi	r18, 0x01	; 1
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	35 83       	std	Z+5, r19	; 0x05
     3a6:	24 83       	std	Z+4, r18	; 0x04
			collection.b_in_image = MainInSignal::Images::RED;
     3a8:	33 83       	std	Z+3, r19	; 0x03
     3aa:	22 83       	std	Z+2, r18	; 0x02
			collection.b_out_image = m_deviation ? MainOutSignal::Images::GREEN_DEVIATE : MainOutSignal::Images::GREEN_STRAIGHT;
     3ac:	81 11       	cpse	r24, r1
     3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <_ZN9PassState9GetImagesER16ImagesCollection+0x3a>
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	1b c0       	rjmp	.+54     	; 0x3ec <_ZN9PassState9GetImagesER16ImagesCollection+0x70>
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	18 c0       	rjmp	.+48     	; 0x3ec <_ZN9PassState9GetImagesER16ImagesCollection+0x70>
		} else if(!m_dir_is_ab) {
			collection.a_in_image = MainInSignal::Images::RED;
     3bc:	21 e0       	ldi	r18, 0x01	; 1
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	31 83       	std	Z+1, r19	; 0x01
     3c2:	20 83       	st	Z, r18
			collection.a_out_image = m_deviation ? MainOutSignal::Images::GREEN_DEVIATE : MainOutSignal::Images::GREEN_STRAIGHT;
     3c4:	81 11       	cpse	r24, r1
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <_ZN9PassState9GetImagesER16ImagesCollection+0x52>
     3c8:	20 e0       	ldi	r18, 0x00	; 0
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <_ZN9PassState9GetImagesER16ImagesCollection+0x56>
     3ce:	22 e0       	ldi	r18, 0x02	; 2
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	35 83       	std	Z+5, r19	; 0x05
     3d4:	24 83       	std	Z+4, r18	; 0x04
			collection.b_in_image = m_deviation ? MainInSignal::Images::GREEN_DEVIATE : MainInSignal::Images::GREEN_STRAIGHT;
     3d6:	81 11       	cpse	r24, r1
     3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <_ZN9PassState9GetImagesER16ImagesCollection+0x64>
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <_ZN9PassState9GetImagesER16ImagesCollection+0x68>
     3e0:	82 e0       	ldi	r24, 0x02	; 2
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	93 83       	std	Z+3, r25	; 0x03
     3e6:	82 83       	std	Z+2, r24	; 0x02
			collection.b_out_image = MainOutSignal::Images::RED;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	97 83       	std	Z+7, r25	; 0x07
     3ee:	86 83       	std	Z+6, r24	; 0x06
		}
		collection.a_shift_image = TallShift::Images::OFF;
     3f0:	11 86       	std	Z+9, r1	; 0x09
     3f2:	10 86       	std	Z+8, r1	; 0x08
		collection.b_shift_image = TallShift::Images::OFF;
     3f4:	13 86       	std	Z+11, r1	; 0x0b
     3f6:	12 86       	std	Z+10, r1	; 0x0a
     3f8:	08 95       	ret

000003fa <_ZN13CrossingStateD1Ev>:
};

class CrossingState : public State {
public:
	CrossingState(): State(), m_deviation_a(false){}
	virtual ~CrossingState() {}
     3fa:	08 95       	ret

000003fc <_ZN13CrossingState9GetImagesER16ImagesCollection>:
		m_deviation_a = ls.turnout_A;

		return true;
	}

	void GetImages(ImagesCollection &collection) override {
     3fc:	fb 01       	movw	r30, r22
		collection.a_in_image = m_deviation_a ? MainInSignal::Images::GREEN_DEVIATE : MainInSignal::Images::GREEN_STRAIGHT;
     3fe:	dc 01       	movw	r26, r24
     400:	12 96       	adiw	r26, 0x02	; 2
     402:	8c 91       	ld	r24, X
     404:	81 11       	cpse	r24, r1
     406:	03 c0       	rjmp	.+6      	; 0x40e <_ZN13CrossingState9GetImagesER16ImagesCollection+0x12>
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	02 c0       	rjmp	.+4      	; 0x412 <_ZN13CrossingState9GetImagesER16ImagesCollection+0x16>
     40e:	22 e0       	ldi	r18, 0x02	; 2
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	31 83       	std	Z+1, r19	; 0x01
     414:	20 83       	st	Z, r18
		collection.b_in_image = m_deviation_a ? MainInSignal::Images::GREEN_STRAIGHT : MainInSignal::Images::GREEN_DEVIATE;
     416:	81 11       	cpse	r24, r1
     418:	03 c0       	rjmp	.+6      	; 0x420 <_ZN13CrossingState9GetImagesER16ImagesCollection+0x24>
     41a:	82 e0       	ldi	r24, 0x02	; 2
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	02 c0       	rjmp	.+4      	; 0x424 <_ZN13CrossingState9GetImagesER16ImagesCollection+0x28>
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	93 83       	std	Z+3, r25	; 0x03
     426:	82 83       	std	Z+2, r24	; 0x02

		collection.a_out_image = MainOutSignal::Images::RED;
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	95 83       	std	Z+5, r25	; 0x05
     42e:	84 83       	std	Z+4, r24	; 0x04
		collection.b_out_image = MainOutSignal::Images::RED;
     430:	97 83       	std	Z+7, r25	; 0x07
     432:	86 83       	std	Z+6, r24	; 0x06
		collection.a_shift_image = TallShift::Images::OFF;
     434:	11 86       	std	Z+9, r1	; 0x09
     436:	10 86       	std	Z+8, r1	; 0x08
		collection.b_shift_image = TallShift::Images::OFF;
     438:	13 86       	std	Z+11, r1	; 0x0b
     43a:	12 86       	std	Z+10, r1	; 0x0a
     43c:	08 95       	ret

0000043e <_ZN13InToStopStateD1Ev>:
};

class InToStopState : public State {
public:
	InToStopState(): State(), m_dir_is_ab(true), m_deviation(false){}
	virtual ~InToStopState() {}
     43e:	08 95       	ret

00000440 <_ZN13InToStopState9GetImagesER16ImagesCollection>:
		}

		return false;
	}

	void GetImages(ImagesCollection &collection) override {
     440:	fb 01       	movw	r30, r22
		if(m_dir_is_ab) {
     442:	dc 01       	movw	r26, r24
     444:	12 96       	adiw	r26, 0x02	; 2
     446:	2c 91       	ld	r18, X
     448:	12 97       	sbiw	r26, 0x02	; 2
     44a:	13 96       	adiw	r26, 0x03	; 3
     44c:	8c 91       	ld	r24, X
     44e:	22 23       	and	r18, r18
     450:	81 f0       	breq	.+32     	; 0x472 <_ZN13InToStopState9GetImagesER16ImagesCollection+0x32>
			collection.a_in_image = m_deviation ? MainInSignal::Images::GREEN_DEVIATE : MainInSignal::Images::GREEN_STRAIGHT;
     452:	81 11       	cpse	r24, r1
     454:	03 c0       	rjmp	.+6      	; 0x45c <_ZN13InToStopState9GetImagesER16ImagesCollection+0x1c>
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	02 c0       	rjmp	.+4      	; 0x460 <_ZN13InToStopState9GetImagesER16ImagesCollection+0x20>
     45c:	82 e0       	ldi	r24, 0x02	; 2
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	80 83       	st	Z, r24
			collection.a_out_image = MainOutSignal::Images::RED;
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	95 83       	std	Z+5, r25	; 0x05
     46a:	84 83       	std	Z+4, r24	; 0x04
			collection.b_in_image = MainInSignal::Images::RED;
     46c:	93 83       	std	Z+3, r25	; 0x03
     46e:	82 83       	std	Z+2, r24	; 0x02
     470:	11 c0       	rjmp	.+34     	; 0x494 <_ZN13InToStopState9GetImagesER16ImagesCollection+0x54>
			collection.b_out_image = MainOutSignal::Images::RED;
		} else if(!m_dir_is_ab) {
			collection.a_in_image = MainInSignal::Images::RED;
     472:	21 e0       	ldi	r18, 0x01	; 1
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	31 83       	std	Z+1, r19	; 0x01
     478:	20 83       	st	Z, r18
			collection.a_out_image = MainOutSignal::Images::RED;
     47a:	35 83       	std	Z+5, r19	; 0x05
     47c:	24 83       	std	Z+4, r18	; 0x04
			collection.b_in_image = m_deviation? MainInSignal::Images::GREEN_DEVIATE : MainInSignal::Images::GREEN_STRAIGHT;
     47e:	81 11       	cpse	r24, r1
     480:	03 c0       	rjmp	.+6      	; 0x488 <_ZN13InToStopState9GetImagesER16ImagesCollection+0x48>
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	02 c0       	rjmp	.+4      	; 0x48c <_ZN13InToStopState9GetImagesER16ImagesCollection+0x4c>
     488:	82 e0       	ldi	r24, 0x02	; 2
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	93 83       	std	Z+3, r25	; 0x03
     48e:	82 83       	std	Z+2, r24	; 0x02
			collection.b_out_image = MainOutSignal::Images::RED;
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	97 83       	std	Z+7, r25	; 0x07
     496:	86 83       	std	Z+6, r24	; 0x06
		}
		collection.a_shift_image = TallShift::Images::OFF;
     498:	11 86       	std	Z+9, r1	; 0x09
     49a:	10 86       	std	Z+8, r1	; 0x08
		collection.b_shift_image = TallShift::Images::OFF;
     49c:	13 86       	std	Z+11, r1	; 0x0b
     49e:	12 86       	std	Z+10, r1	; 0x0a
     4a0:	08 95       	ret

000004a2 <_ZN8OutStateD1Ev>:
};

class OutState : public State {
public:
	OutState(): State(), m_out_a(true), m_out_b(true), m_dev_a(false), m_dev_b(false){}
	virtual ~OutState() {}
     4a2:	08 95       	ret

000004a4 <_ZN8OutState9GetImagesER16ImagesCollection>:
		}

		return false;
	}

	void GetImages(ImagesCollection &collection) override {
     4a4:	dc 01       	movw	r26, r24
     4a6:	fb 01       	movw	r30, r22
		collection.a_in_image = MainInSignal::Images::RED;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	91 83       	std	Z+1, r25	; 0x01
     4ae:	80 83       	st	Z, r24
		collection.a_out_image = MainOutSignal::Images::RED;
     4b0:	95 83       	std	Z+5, r25	; 0x05
     4b2:	84 83       	std	Z+4, r24	; 0x04
		collection.b_in_image = MainInSignal::Images::RED;
     4b4:	93 83       	std	Z+3, r25	; 0x03
     4b6:	82 83       	std	Z+2, r24	; 0x02
		collection.b_out_image = MainOutSignal::Images::RED;
     4b8:	97 83       	std	Z+7, r25	; 0x07
     4ba:	86 83       	std	Z+6, r24	; 0x06
		collection.a_shift_image = TallShift::Images::OFF;
     4bc:	11 86       	std	Z+9, r1	; 0x09
     4be:	10 86       	std	Z+8, r1	; 0x08
		collection.b_shift_image = TallShift::Images::OFF;
     4c0:	13 86       	std	Z+11, r1	; 0x0b
     4c2:	12 86       	std	Z+10, r1	; 0x0a
		if(m_out_a) {
     4c4:	12 96       	adiw	r26, 0x02	; 2
     4c6:	8c 91       	ld	r24, X
     4c8:	12 97       	sbiw	r26, 0x02	; 2
     4ca:	88 23       	and	r24, r24
     4cc:	61 f0       	breq	.+24     	; 0x4e6 <_ZN8OutState9GetImagesER16ImagesCollection+0x42>
			collection.a_in_image = MainInSignal::Images::RED;
			collection.a_out_image = m_dev_a ? MainOutSignal::Images::GREEN_DEVIATE : MainOutSignal::Images::GREEN_STRAIGHT;
     4ce:	14 96       	adiw	r26, 0x04	; 4
     4d0:	8c 91       	ld	r24, X
     4d2:	14 97       	sbiw	r26, 0x04	; 4
     4d4:	81 11       	cpse	r24, r1
     4d6:	03 c0       	rjmp	.+6      	; 0x4de <_ZN8OutState9GetImagesER16ImagesCollection+0x3a>
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <_ZN8OutState9GetImagesER16ImagesCollection+0x3e>
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	95 83       	std	Z+5, r25	; 0x05
     4e4:	84 83       	std	Z+4, r24	; 0x04
		}
		if(m_out_b) {
     4e6:	13 96       	adiw	r26, 0x03	; 3
     4e8:	8c 91       	ld	r24, X
     4ea:	13 97       	sbiw	r26, 0x03	; 3
     4ec:	88 23       	and	r24, r24
     4ee:	59 f0       	breq	.+22     	; 0x506 <_ZN8OutState9GetImagesER16ImagesCollection+0x62>
			collection.b_in_image = MainInSignal::Images::RED;
			collection.b_out_image = m_dev_b ? MainOutSignal::Images::GREEN_DEVIATE : MainOutSignal::Images::GREEN_STRAIGHT;
     4f0:	15 96       	adiw	r26, 0x05	; 5
     4f2:	8c 91       	ld	r24, X
     4f4:	81 11       	cpse	r24, r1
     4f6:	03 c0       	rjmp	.+6      	; 0x4fe <_ZN8OutState9GetImagesER16ImagesCollection+0x5a>
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <_ZN8OutState9GetImagesER16ImagesCollection+0x5e>
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	97 83       	std	Z+7, r25	; 0x07
     504:	86 83       	std	Z+6, r24	; 0x06
     506:	08 95       	ret

00000508 <_ZN16InToStopOutStateD1Ev>:
};

class InToStopOutState : public State {
public:
	InToStopOutState(): State(), m_in_a(true), m_deviation(false){}
	virtual ~InToStopOutState() {}
     508:	08 95       	ret

0000050a <_ZN16InToStopOutState9GetImagesER16ImagesCollection>:
		}

		return false;
	}

	void GetImages(ImagesCollection &collection) override {
     50a:	fb 01       	movw	r30, r22
		if(m_in_a) {
     50c:	dc 01       	movw	r26, r24
     50e:	12 96       	adiw	r26, 0x02	; 2
     510:	2c 91       	ld	r18, X
     512:	12 97       	sbiw	r26, 0x02	; 2
     514:	13 96       	adiw	r26, 0x03	; 3
     516:	8c 91       	ld	r24, X
     518:	22 23       	and	r18, r18
     51a:	b9 f0       	breq	.+46     	; 0x54a <_ZN16InToStopOutState9GetImagesER16ImagesCollection+0x40>
			collection.a_in_image = m_deviation ? MainInSignal::Images::GREEN_DEVIATE : MainInSignal::Images::GREEN_STRAIGHT;
     51c:	81 11       	cpse	r24, r1
     51e:	03 c0       	rjmp	.+6      	; 0x526 <_ZN16InToStopOutState9GetImagesER16ImagesCollection+0x1c>
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	02 c0       	rjmp	.+4      	; 0x52a <_ZN16InToStopOutState9GetImagesER16ImagesCollection+0x20>
     526:	22 e0       	ldi	r18, 0x02	; 2
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	31 83       	std	Z+1, r19	; 0x01
     52c:	20 83       	st	Z, r18
			collection.a_out_image = MainOutSignal::Images::RED;
     52e:	21 e0       	ldi	r18, 0x01	; 1
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	35 83       	std	Z+5, r19	; 0x05
     534:	24 83       	std	Z+4, r18	; 0x04
			collection.b_in_image = MainInSignal::Images::RED;
     536:	33 83       	std	Z+3, r19	; 0x03
     538:	22 83       	std	Z+2, r18	; 0x02
			collection.b_out_image = m_deviation ? MainOutSignal::Images::GREEN_STRAIGHT : MainOutSignal::Images::GREEN_DEVIATE;
     53a:	81 11       	cpse	r24, r1
     53c:	03 c0       	rjmp	.+6      	; 0x544 <_ZN16InToStopOutState9GetImagesER16ImagesCollection+0x3a>
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	1b c0       	rjmp	.+54     	; 0x57a <_ZN16InToStopOutState9GetImagesER16ImagesCollection+0x70>
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	18 c0       	rjmp	.+48     	; 0x57a <_ZN16InToStopOutState9GetImagesER16ImagesCollection+0x70>
		} else {
			collection.a_in_image = MainInSignal::Images::RED;
     54a:	21 e0       	ldi	r18, 0x01	; 1
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	31 83       	std	Z+1, r19	; 0x01
     550:	20 83       	st	Z, r18
			collection.a_out_image = m_deviation ? MainOutSignal::Images::GREEN_STRAIGHT : MainOutSignal::Images::GREEN_DEVIATE;
     552:	81 11       	cpse	r24, r1
     554:	03 c0       	rjmp	.+6      	; 0x55c <_ZN16InToStopOutState9GetImagesER16ImagesCollection+0x52>
     556:	22 e0       	ldi	r18, 0x02	; 2
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	02 c0       	rjmp	.+4      	; 0x560 <_ZN16InToStopOutState9GetImagesER16ImagesCollection+0x56>
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	35 83       	std	Z+5, r19	; 0x05
     562:	24 83       	std	Z+4, r18	; 0x04
			collection.b_in_image = m_deviation ? MainInSignal::Images::GREEN_DEVIATE : MainInSignal::Images::GREEN_STRAIGHT;
     564:	81 11       	cpse	r24, r1
     566:	03 c0       	rjmp	.+6      	; 0x56e <_ZN16InToStopOutState9GetImagesER16ImagesCollection+0x64>
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	02 c0       	rjmp	.+4      	; 0x572 <_ZN16InToStopOutState9GetImagesER16ImagesCollection+0x68>
     56e:	82 e0       	ldi	r24, 0x02	; 2
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	93 83       	std	Z+3, r25	; 0x03
     574:	82 83       	std	Z+2, r24	; 0x02
			collection.b_out_image = MainOutSignal::Images::RED;
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	97 83       	std	Z+7, r25	; 0x07
     57c:	86 83       	std	Z+6, r24	; 0x06
		}

		collection.a_shift_image = TallShift::Images::OFF;
     57e:	11 86       	std	Z+9, r1	; 0x09
     580:	10 86       	std	Z+8, r1	; 0x08
		collection.b_shift_image = TallShift::Images::OFF;
     582:	13 86       	std	Z+11, r1	; 0x0b
     584:	12 86       	std	Z+10, r1	; 0x0a
     586:	08 95       	ret

00000588 <_ZN13ShiftingStateD1Ev>:
public:
	ShiftingState(): State(), m_shift_a(false),m_shift_b(false),
			m_dev_a(false),m_dev_b(false),
			m_out_a(false), m_out_b(false){}

	virtual ~ShiftingState() {}
     588:	08 95       	ret

0000058a <_ZN13ShiftingState7IsValidERK10LogicState>:

	bool IsValid(const LogicState &ls) override {
     58a:	fc 01       	movw	r30, r24
     58c:	db 01       	movw	r26, r22
		if(!ls.shift_A && !ls.shift_B)
     58e:	16 96       	adiw	r26, 0x06	; 6
     590:	2c 91       	ld	r18, X
     592:	16 97       	sbiw	r26, 0x06	; 6
     594:	17 96       	adiw	r26, 0x07	; 7
     596:	9c 91       	ld	r25, X
     598:	17 97       	sbiw	r26, 0x07	; 7
     59a:	21 11       	cpse	r18, r1
     59c:	03 c0       	rjmp	.+6      	; 0x5a4 <_ZN13ShiftingState7IsValidERK10LogicState+0x1a>
     59e:	89 2f       	mov	r24, r25
     5a0:	99 23       	and	r25, r25
     5a2:	e9 f0       	breq	.+58     	; 0x5de <_ZN13ShiftingState7IsValidERK10LogicState+0x54>
			return false;


		m_shift_a = ls.shift_A;
     5a4:	22 83       	std	Z+2, r18	; 0x02
		m_dev_b = ls.turnout_B;
     5a6:	15 96       	adiw	r26, 0x05	; 5
     5a8:	8c 91       	ld	r24, X
     5aa:	15 97       	sbiw	r26, 0x05	; 5
     5ac:	85 83       	std	Z+5, r24	; 0x05
		m_out_b = (ls.switch_B == -1);
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	12 96       	adiw	r26, 0x02	; 2
     5b2:	2d 91       	ld	r18, X+
     5b4:	3c 91       	ld	r19, X
     5b6:	13 97       	sbiw	r26, 0x03	; 3
     5b8:	2f 3f       	cpi	r18, 0xFF	; 255
     5ba:	3f 4f       	sbci	r19, 0xFF	; 255
     5bc:	09 f0       	breq	.+2      	; 0x5c0 <_ZN13ShiftingState7IsValidERK10LogicState+0x36>
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	87 83       	std	Z+7, r24	; 0x07

		m_shift_b = ls.shift_B;
     5c2:	93 83       	std	Z+3, r25	; 0x03
		m_dev_a = ls.turnout_A;
     5c4:	14 96       	adiw	r26, 0x04	; 4
     5c6:	8c 91       	ld	r24, X
     5c8:	14 97       	sbiw	r26, 0x04	; 4
     5ca:	84 83       	std	Z+4, r24	; 0x04
		m_out_a = (ls.switch_A == -1);
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	2d 91       	ld	r18, X+
     5d0:	3c 91       	ld	r19, X
     5d2:	2f 3f       	cpi	r18, 0xFF	; 255
     5d4:	3f 4f       	sbci	r19, 0xFF	; 255
     5d6:	09 f0       	breq	.+2      	; 0x5da <_ZN13ShiftingState7IsValidERK10LogicState+0x50>
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	86 83       	std	Z+6, r24	; 0x06

		return true;
     5dc:	81 e0       	ldi	r24, 0x01	; 1

	}
     5de:	08 95       	ret

000005e0 <_ZN9TallShiftD1Ev>:
	Signal(){}
	virtual ~Signal() {}
	virtual void Update(const unsigned long current_time)=0;
};

class TallShift : Signal {
     5e0:	08 95       	ret

000005e2 <_ZN12FlashingBulbD1Ev>:
	bool m_enabled; 				///< Enable (light) the bulb
	unsigned int m_on_pwm_value; 	///< Pwm value for a lit bulb (intensity)
	unsigned int m_off_pwm_value;   ///< Pwm value for a dark bulb (normally 0)
};

class FlashingBulb : public Bulb
     5e2:	08 95       	ret

000005e4 <_ZN4Bulb6EnableEv>:
		pinMode(pin_no, OUTPUT);
	}

	virtual ~Bulb() {}

	virtual void Enable() {
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	ec 01       	movw	r28, r24
		digitalWrite(m_pin_no, m_on_pwm_value);
     5ea:	6d 81       	ldd	r22, Y+5	; 0x05
     5ec:	8a 81       	ldd	r24, Y+2	; 0x02
     5ee:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <digitalWrite>
		m_enabled = true;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	8c 83       	std	Y+4, r24	; 0x04
	}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	08 95       	ret

000005fc <_ZN4Bulb7DisableEv>:

	virtual void Disable() {
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	ec 01       	movw	r28, r24
		digitalWrite(m_pin_no, m_off_pwm_value);
     602:	6f 81       	ldd	r22, Y+7	; 0x07
     604:	8a 81       	ldd	r24, Y+2	; 0x02
     606:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <digitalWrite>
		m_enabled = false;
     60a:	1c 82       	std	Y+4, r1	; 0x04
	}
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <_ZN4BulbD0Ev>:
	m_off_pwm_value(0)
	 {
		pinMode(pin_no, OUTPUT);
	}

	virtual ~Bulb() {}
     612:	61 c6       	rjmp	.+3266   	; 0x12d6 <_ZdlPv>

00000614 <_ZN12FlashingBulbD0Ev>:
	bool m_enabled; 				///< Enable (light) the bulb
	unsigned int m_on_pwm_value; 	///< Pwm value for a lit bulb (intensity)
	unsigned int m_off_pwm_value;   ///< Pwm value for a dark bulb (normally 0)
};

class FlashingBulb : public Bulb
     614:	60 c6       	rjmp	.+3264   	; 0x12d6 <_ZdlPv>

00000616 <_ZN12MainInSignalD0Ev>:
	m_distant(distant_green_pin, distant_orange_pin),
	m_image(Images::RED){
		SetImage(m_image);
	}

	virtual ~MainInSignal() {}
     616:	5f c6       	rjmp	.+3262   	; 0x12d6 <_ZdlPv>

00000618 <_ZN13DistantSignalD0Ev>:
	DistantSignal(unsigned int green_pin, unsigned int orange_pin) : Signal(),
	m_green(green_pin),
	m_orange(orange_pin)
	{}

	virtual ~DistantSignal() {}
     618:	5e c6       	rjmp	.+3260   	; 0x12d6 <_ZdlPv>

0000061a <_ZN13MainOutSignalD0Ev>:
	m_s_bottom_green(s_bottom_green_pin),
	m_d_green(d_green_pin),
	m_d_red(d_red_pin),
	m_distant(distant_green_pin, distant_orange_pin){}

	virtual ~MainOutSignal() {}
     61a:	5d c6       	rjmp	.+3258   	; 0x12d6 <_ZdlPv>

0000061c <_ZN9TallShiftD0Ev>:
	Signal(){}
	virtual ~Signal() {}
	virtual void Update(const unsigned long current_time)=0;
};

class TallShift : Signal {
     61c:	5c c6       	rjmp	.+3256   	; 0x12d6 <_ZdlPv>

0000061e <_ZN11NormalStateD0Ev>:

/** Normal state: All signals red. Shift lights dimmed */
class NormalState : public State {
public:
	NormalState(){}
	virtual ~NormalState() {}
     61e:	5b c6       	rjmp	.+3254   	; 0x12d6 <_ZdlPv>

00000620 <_ZN13CrossingStateD0Ev>:
};

class CrossingState : public State {
public:
	CrossingState(): State(), m_deviation_a(false){}
	virtual ~CrossingState() {}
     620:	5a c6       	rjmp	.+3252   	; 0x12d6 <_ZdlPv>

00000622 <_ZN9PassStateD0Ev>:

/** Passing state. */
class PassState : public State {
public:
	PassState(): State(), m_dir_is_ab(true), m_deviation(false){}
	virtual ~PassState() {}
     622:	59 c6       	rjmp	.+3250   	; 0x12d6 <_ZdlPv>

00000624 <_ZN13InToStopStateD0Ev>:
};

class InToStopState : public State {
public:
	InToStopState(): State(), m_dir_is_ab(true), m_deviation(false){}
	virtual ~InToStopState() {}
     624:	58 c6       	rjmp	.+3248   	; 0x12d6 <_ZdlPv>

00000626 <_ZN8OutStateD0Ev>:
};

class OutState : public State {
public:
	OutState(): State(), m_out_a(true), m_out_b(true), m_dev_a(false), m_dev_b(false){}
	virtual ~OutState() {}
     626:	57 c6       	rjmp	.+3246   	; 0x12d6 <_ZdlPv>

00000628 <_ZN16InToStopOutStateD0Ev>:
};

class InToStopOutState : public State {
public:
	InToStopOutState(): State(), m_in_a(true), m_deviation(false){}
	virtual ~InToStopOutState() {}
     628:	56 c6       	rjmp	.+3244   	; 0x12d6 <_ZdlPv>

0000062a <_ZN13ShiftingStateD0Ev>:
public:
	ShiftingState(): State(), m_shift_a(false),m_shift_b(false),
			m_dev_a(false),m_dev_b(false),
			m_out_a(false), m_out_b(false){}

	virtual ~ShiftingState() {}
     62a:	55 c6       	rjmp	.+3242   	; 0x12d6 <_ZdlPv>

0000062c <_ZN13CrossingState7IsValidERK10LogicState>:
class CrossingState : public State {
public:
	CrossingState(): State(), m_deviation_a(false){}
	virtual ~CrossingState() {}

	bool IsValid(const LogicState &ls) override {
     62c:	dc 01       	movw	r26, r24
     62e:	fb 01       	movw	r30, r22
		if(ls.switch_A != 1 || ls.switch_B != 1 || ls.turnout_A == ls.turnout_B || ls.shift_A || ls.shift_B)
     630:	80 81       	ld	r24, Z
     632:	91 81       	ldd	r25, Z+1	; 0x01
     634:	01 97       	sbiw	r24, 0x01	; 1
     636:	91 f4       	brne	.+36     	; 0x65c <_ZN13CrossingState7IsValidERK10LogicState+0x30>
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	01 97       	sbiw	r24, 0x01	; 1
     63e:	71 f4       	brne	.+28     	; 0x65c <_ZN13CrossingState7IsValidERK10LogicState+0x30>
     640:	94 81       	ldd	r25, Z+4	; 0x04
     642:	85 81       	ldd	r24, Z+5	; 0x05
     644:	98 17       	cp	r25, r24
     646:	51 f0       	breq	.+20     	; 0x65c <_ZN13CrossingState7IsValidERK10LogicState+0x30>
     648:	86 81       	ldd	r24, Z+6	; 0x06
     64a:	81 11       	cpse	r24, r1
     64c:	07 c0       	rjmp	.+14     	; 0x65c <_ZN13CrossingState7IsValidERK10LogicState+0x30>
     64e:	27 81       	ldd	r18, Z+7	; 0x07
     650:	21 11       	cpse	r18, r1
     652:	05 c0       	rjmp	.+10     	; 0x65e <_ZN13CrossingState7IsValidERK10LogicState+0x32>
			return false;

		m_deviation_a = ls.turnout_A;
     654:	12 96       	adiw	r26, 0x02	; 2
     656:	9c 93       	st	X, r25

		return true;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	08 95       	ret
	CrossingState(): State(), m_deviation_a(false){}
	virtual ~CrossingState() {}

	bool IsValid(const LogicState &ls) override {
		if(ls.switch_A != 1 || ls.switch_B != 1 || ls.turnout_A == ls.turnout_B || ls.shift_A || ls.shift_B)
			return false;
     65c:	80 e0       	ldi	r24, 0x00	; 0

		m_deviation_a = ls.turnout_A;

		return true;
	}
     65e:	08 95       	ret

00000660 <_ZN13InToStopState7IsValidERK10LogicState>:
class InToStopState : public State {
public:
	InToStopState(): State(), m_dir_is_ab(true), m_deviation(false){}
	virtual ~InToStopState() {}

	bool IsValid(const LogicState &ls) override {
     660:	dc 01       	movw	r26, r24
     662:	fb 01       	movw	r30, r22
		if(ls.shift_A || ls.shift_B)
     664:	86 81       	ldd	r24, Z+6	; 0x06
     666:	81 11       	cpse	r24, r1
     668:	23 c0       	rjmp	.+70     	; 0x6b0 <_ZN13InToStopState7IsValidERK10LogicState+0x50>
     66a:	87 81       	ldd	r24, Z+7	; 0x07
     66c:	81 11       	cpse	r24, r1
     66e:	20 c0       	rjmp	.+64     	; 0x6b0 <_ZN13InToStopState7IsValidERK10LogicState+0x50>
			return false;


		if(ls.switch_A == 1 && ls.switch_B == 0) {
     670:	20 81       	ld	r18, Z
     672:	31 81       	ldd	r19, Z+1	; 0x01
     674:	21 30       	cpi	r18, 0x01	; 1
     676:	31 05       	cpc	r19, r1
     678:	61 f4       	brne	.+24     	; 0x692 <_ZN13InToStopState7IsValidERK10LogicState+0x32>
     67a:	22 81       	ldd	r18, Z+2	; 0x02
     67c:	33 81       	ldd	r19, Z+3	; 0x03
     67e:	23 2b       	or	r18, r19
     680:	c1 f4       	brne	.+48     	; 0x6b2 <_ZN13InToStopState7IsValidERK10LogicState+0x52>
			m_deviation = ls.turnout_A;
     682:	84 81       	ldd	r24, Z+4	; 0x04
     684:	13 96       	adiw	r26, 0x03	; 3
     686:	8c 93       	st	X, r24
     688:	13 97       	sbiw	r26, 0x03	; 3
			m_dir_is_ab = true;
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	12 96       	adiw	r26, 0x02	; 2
     68e:	8c 93       	st	X, r24
			return true;
     690:	08 95       	ret
		}

		if(ls.switch_A == 0 && ls.switch_B == 1) {
     692:	23 2b       	or	r18, r19
     694:	71 f4       	brne	.+28     	; 0x6b2 <_ZN13InToStopState7IsValidERK10LogicState+0x52>
     696:	22 81       	ldd	r18, Z+2	; 0x02
     698:	33 81       	ldd	r19, Z+3	; 0x03
     69a:	21 30       	cpi	r18, 0x01	; 1
     69c:	31 05       	cpc	r19, r1
     69e:	49 f4       	brne	.+18     	; 0x6b2 <_ZN13InToStopState7IsValidERK10LogicState+0x52>
			m_deviation = ls.turnout_B;
     6a0:	85 81       	ldd	r24, Z+5	; 0x05
     6a2:	13 96       	adiw	r26, 0x03	; 3
     6a4:	8c 93       	st	X, r24
     6a6:	13 97       	sbiw	r26, 0x03	; 3
			m_dir_is_ab = false;
     6a8:	12 96       	adiw	r26, 0x02	; 2
     6aa:	1c 92       	st	X, r1
			return true;
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	08 95       	ret
	InToStopState(): State(), m_dir_is_ab(true), m_deviation(false){}
	virtual ~InToStopState() {}

	bool IsValid(const LogicState &ls) override {
		if(ls.shift_A || ls.shift_B)
			return false;
     6b0:	80 e0       	ldi	r24, 0x00	; 0
			m_dir_is_ab = false;
			return true;
		}

		return false;
	}
     6b2:	08 95       	ret

000006b4 <_ZN8OutState7IsValidERK10LogicState>:
class OutState : public State {
public:
	OutState(): State(), m_out_a(true), m_out_b(true), m_dev_a(false), m_dev_b(false){}
	virtual ~OutState() {}

	bool IsValid(const LogicState &ls) override {
     6b4:	fc 01       	movw	r30, r24
     6b6:	db 01       	movw	r26, r22
		if(ls.shift_A || ls.shift_B)
     6b8:	16 96       	adiw	r26, 0x06	; 6
     6ba:	8c 91       	ld	r24, X
     6bc:	16 97       	sbiw	r26, 0x06	; 6
     6be:	81 11       	cpse	r24, r1
     6c0:	3f c0       	rjmp	.+126    	; 0x740 <_ZN8OutState7IsValidERK10LogicState+0x8c>
     6c2:	17 96       	adiw	r26, 0x07	; 7
     6c4:	8c 91       	ld	r24, X
     6c6:	17 97       	sbiw	r26, 0x07	; 7
     6c8:	81 11       	cpse	r24, r1
     6ca:	3a c0       	rjmp	.+116    	; 0x740 <_ZN8OutState7IsValidERK10LogicState+0x8c>
			return false;


		if(ls.switch_A == -1 && ls.switch_B == 0) {
     6cc:	2d 91       	ld	r18, X+
     6ce:	3c 91       	ld	r19, X
     6d0:	11 97       	sbiw	r26, 0x01	; 1
     6d2:	2f 3f       	cpi	r18, 0xFF	; 255
     6d4:	9f ef       	ldi	r25, 0xFF	; 255
     6d6:	39 07       	cpc	r19, r25
     6d8:	91 f4       	brne	.+36     	; 0x6fe <_ZN8OutState7IsValidERK10LogicState+0x4a>
     6da:	12 96       	adiw	r26, 0x02	; 2
     6dc:	2d 91       	ld	r18, X+
     6de:	3c 91       	ld	r19, X
     6e0:	13 97       	sbiw	r26, 0x03	; 3
     6e2:	21 15       	cp	r18, r1
     6e4:	31 05       	cpc	r19, r1
     6e6:	f1 f4       	brne	.+60     	; 0x724 <_ZN8OutState7IsValidERK10LogicState+0x70>
			m_dev_a = ls.turnout_A;
     6e8:	14 96       	adiw	r26, 0x04	; 4
     6ea:	8c 91       	ld	r24, X
     6ec:	14 97       	sbiw	r26, 0x04	; 4
     6ee:	84 83       	std	Z+4, r24	; 0x04
			m_dev_b = ls.turnout_B;
     6f0:	15 96       	adiw	r26, 0x05	; 5
     6f2:	8c 91       	ld	r24, X
     6f4:	85 83       	std	Z+5, r24	; 0x05
			m_out_a = true;
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	82 83       	std	Z+2, r24	; 0x02
			m_out_b = false;
     6fa:	13 82       	std	Z+3, r1	; 0x03
			return true;
     6fc:	08 95       	ret
		}

		if(ls.switch_A == 0 && ls.switch_B == -1) {
     6fe:	23 2b       	or	r18, r19
     700:	01 f5       	brne	.+64     	; 0x742 <_ZN8OutState7IsValidERK10LogicState+0x8e>
     702:	12 96       	adiw	r26, 0x02	; 2
     704:	2d 91       	ld	r18, X+
     706:	3c 91       	ld	r19, X
     708:	13 97       	sbiw	r26, 0x03	; 3
     70a:	2f 3f       	cpi	r18, 0xFF	; 255
     70c:	3f 4f       	sbci	r19, 0xFF	; 255
     70e:	c9 f4       	brne	.+50     	; 0x742 <_ZN8OutState7IsValidERK10LogicState+0x8e>
			m_dev_a = ls.turnout_A;
     710:	14 96       	adiw	r26, 0x04	; 4
     712:	8c 91       	ld	r24, X
     714:	14 97       	sbiw	r26, 0x04	; 4
     716:	84 83       	std	Z+4, r24	; 0x04
			m_dev_b = ls.turnout_B;
     718:	15 96       	adiw	r26, 0x05	; 5
     71a:	8c 91       	ld	r24, X
     71c:	85 83       	std	Z+5, r24	; 0x05
			m_out_a = false;
     71e:	12 82       	std	Z+2, r1	; 0x02
			m_out_b = true;
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	0c c0       	rjmp	.+24     	; 0x73c <_ZN8OutState7IsValidERK10LogicState+0x88>
			return true;
		}

		if(ls.switch_A == -1 && ls.switch_B == -1) {
     724:	2f 3f       	cpi	r18, 0xFF	; 255
     726:	3f 4f       	sbci	r19, 0xFF	; 255
     728:	61 f4       	brne	.+24     	; 0x742 <_ZN8OutState7IsValidERK10LogicState+0x8e>
					m_dev_a = ls.turnout_A;
     72a:	14 96       	adiw	r26, 0x04	; 4
     72c:	8c 91       	ld	r24, X
     72e:	14 97       	sbiw	r26, 0x04	; 4
     730:	84 83       	std	Z+4, r24	; 0x04
					m_dev_b = ls.turnout_B;
     732:	15 96       	adiw	r26, 0x05	; 5
     734:	8c 91       	ld	r24, X
     736:	85 83       	std	Z+5, r24	; 0x05
					m_out_a = true;
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	82 83       	std	Z+2, r24	; 0x02
					m_out_b = true;
     73c:	83 83       	std	Z+3, r24	; 0x03
					return true;
     73e:	08 95       	ret
	OutState(): State(), m_out_a(true), m_out_b(true), m_dev_a(false), m_dev_b(false){}
	virtual ~OutState() {}

	bool IsValid(const LogicState &ls) override {
		if(ls.shift_A || ls.shift_B)
			return false;
     740:	80 e0       	ldi	r24, 0x00	; 0
					m_out_b = true;
					return true;
		}

		return false;
	}
     742:	08 95       	ret

00000744 <_ZN16InToStopOutState7IsValidERK10LogicState>:
class InToStopOutState : public State {
public:
	InToStopOutState(): State(), m_in_a(true), m_deviation(false){}
	virtual ~InToStopOutState() {}

	bool IsValid(const LogicState &ls) override {
     744:	dc 01       	movw	r26, r24
     746:	fb 01       	movw	r30, r22
		if(ls.shift_A || ls.shift_B)
     748:	86 81       	ldd	r24, Z+6	; 0x06
     74a:	81 11       	cpse	r24, r1
     74c:	27 c0       	rjmp	.+78     	; 0x79c <_ZN16InToStopOutState7IsValidERK10LogicState+0x58>
     74e:	87 81       	ldd	r24, Z+7	; 0x07
     750:	81 11       	cpse	r24, r1
     752:	24 c0       	rjmp	.+72     	; 0x79c <_ZN16InToStopOutState7IsValidERK10LogicState+0x58>
			return false;

		if(ls.turnout_A == ls.turnout_B)
     754:	44 81       	ldd	r20, Z+4	; 0x04
     756:	95 81       	ldd	r25, Z+5	; 0x05
     758:	49 17       	cp	r20, r25
     75a:	09 f1       	breq	.+66     	; 0x79e <_ZN16InToStopOutState7IsValidERK10LogicState+0x5a>
			return false;

		if(ls.switch_A == 1 && ls.switch_B == -1) {
     75c:	20 81       	ld	r18, Z
     75e:	31 81       	ldd	r19, Z+1	; 0x01
     760:	21 30       	cpi	r18, 0x01	; 1
     762:	31 05       	cpc	r19, r1
     764:	61 f4       	brne	.+24     	; 0x77e <_ZN16InToStopOutState7IsValidERK10LogicState+0x3a>
     766:	22 81       	ldd	r18, Z+2	; 0x02
     768:	33 81       	ldd	r19, Z+3	; 0x03
     76a:	2f 3f       	cpi	r18, 0xFF	; 255
     76c:	3f 4f       	sbci	r19, 0xFF	; 255
     76e:	b9 f4       	brne	.+46     	; 0x79e <_ZN16InToStopOutState7IsValidERK10LogicState+0x5a>
			m_deviation = ls.turnout_A;
     770:	13 96       	adiw	r26, 0x03	; 3
     772:	4c 93       	st	X, r20
     774:	13 97       	sbiw	r26, 0x03	; 3
			m_in_a = true;
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	12 96       	adiw	r26, 0x02	; 2
     77a:	8c 93       	st	X, r24
     77c:	08 95       	ret
			return true;
		}

		if(ls.switch_A == -1 && ls.switch_B == 1) {
     77e:	2f 3f       	cpi	r18, 0xFF	; 255
     780:	3f 4f       	sbci	r19, 0xFF	; 255
     782:	69 f4       	brne	.+26     	; 0x79e <_ZN16InToStopOutState7IsValidERK10LogicState+0x5a>
     784:	22 81       	ldd	r18, Z+2	; 0x02
     786:	33 81       	ldd	r19, Z+3	; 0x03
     788:	21 30       	cpi	r18, 0x01	; 1
     78a:	31 05       	cpc	r19, r1
     78c:	41 f4       	brne	.+16     	; 0x79e <_ZN16InToStopOutState7IsValidERK10LogicState+0x5a>
			m_deviation = ls.turnout_B;
     78e:	13 96       	adiw	r26, 0x03	; 3
     790:	9c 93       	st	X, r25
     792:	13 97       	sbiw	r26, 0x03	; 3
			m_in_a = false;
     794:	12 96       	adiw	r26, 0x02	; 2
     796:	1c 92       	st	X, r1
			return true;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	08 95       	ret
	InToStopOutState(): State(), m_in_a(true), m_deviation(false){}
	virtual ~InToStopOutState() {}

	bool IsValid(const LogicState &ls) override {
		if(ls.shift_A || ls.shift_B)
			return false;
     79c:	80 e0       	ldi	r24, 0x00	; 0
			m_in_a = false;
			return true;
		}

		return false;
	}
     79e:	08 95       	ret

000007a0 <_ZN13ShiftingState9GetImagesER16ImagesCollection>:

		return true;

	}

	void GetImages(ImagesCollection &collection) override {
     7a0:	dc 01       	movw	r26, r24
     7a2:	fb 01       	movw	r30, r22
		if(m_shift_a && !m_shift_b && m_out_b) {
     7a4:	12 96       	adiw	r26, 0x02	; 2
     7a6:	8c 91       	ld	r24, X
     7a8:	12 97       	sbiw	r26, 0x02	; 2
     7aa:	13 96       	adiw	r26, 0x03	; 3
     7ac:	9c 91       	ld	r25, X
     7ae:	13 97       	sbiw	r26, 0x03	; 3
     7b0:	88 23       	and	r24, r24
     7b2:	61 f1       	breq	.+88     	; 0x80c <_ZN13ShiftingState9GetImagesER16ImagesCollection+0x6c>
     7b4:	91 11       	cpse	r25, r1
     7b6:	2a c0       	rjmp	.+84     	; 0x80c <_ZN13ShiftingState9GetImagesER16ImagesCollection+0x6c>
     7b8:	17 96       	adiw	r26, 0x07	; 7
     7ba:	8c 91       	ld	r24, X
     7bc:	17 97       	sbiw	r26, 0x07	; 7
     7be:	88 23       	and	r24, r24
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <_ZN13ShiftingState9GetImagesER16ImagesCollection+0x4e>
			collection.a_in_image = MainInSignal::Images::RED;
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	91 83       	std	Z+1, r25	; 0x01
     7c8:	80 83       	st	Z, r24
			collection.a_out_image = MainOutSignal::Images::RED;
     7ca:	95 83       	std	Z+5, r25	; 0x05
     7cc:	84 83       	std	Z+4, r24	; 0x04
			collection.b_in_image = MainInSignal::Images::RED;
     7ce:	93 83       	std	Z+3, r25	; 0x03
     7d0:	82 83       	std	Z+2, r24	; 0x02
			collection.b_out_image = m_dev_b ? MainOutSignal::Images::GREEN_DEVIATE : MainOutSignal::Images::GREEN_STRAIGHT;
     7d2:	15 96       	adiw	r26, 0x05	; 5
     7d4:	8c 91       	ld	r24, X
     7d6:	81 11       	cpse	r24, r1
     7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <_ZN13ShiftingState9GetImagesER16ImagesCollection+0x40>
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <_ZN13ShiftingState9GetImagesER16ImagesCollection+0x44>
     7e0:	82 e0       	ldi	r24, 0x02	; 2
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	97 83       	std	Z+7, r25	; 0x07
     7e6:	86 83       	std	Z+6, r24	; 0x06
			collection.a_shift_image = TallShift::Images::ON;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0a c0       	rjmp	.+20     	; 0x802 <_ZN13ShiftingState9GetImagesER16ImagesCollection+0x62>
			collection.b_shift_image = TallShift::Images::OFF;
		} else if(m_shift_a && !m_shift_b && !m_out_b) {
			collection.a_in_image = MainInSignal::Images::RED;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	91 83       	std	Z+1, r25	; 0x01
     7f4:	80 83       	st	Z, r24
			collection.a_out_image = MainOutSignal::Images::RED;
     7f6:	95 83       	std	Z+5, r25	; 0x05
     7f8:	84 83       	std	Z+4, r24	; 0x04
			collection.b_in_image = MainInSignal::Images::RED;
     7fa:	93 83       	std	Z+3, r25	; 0x03
     7fc:	82 83       	std	Z+2, r24	; 0x02
			collection.b_out_image = MainOutSignal::Images::RED;
     7fe:	97 83       	std	Z+7, r25	; 0x07
     800:	86 83       	std	Z+6, r24	; 0x06
			collection.a_shift_image = TallShift::Images::ON;
     802:	91 87       	std	Z+9, r25	; 0x09
     804:	80 87       	std	Z+8, r24	; 0x08
			collection.b_shift_image = TallShift::Images::OFF;
     806:	13 86       	std	Z+11, r1	; 0x0b
     808:	12 86       	std	Z+10, r1	; 0x0a
     80a:	08 95       	ret
		} else if(m_shift_b && !m_shift_a && m_out_a) {
     80c:	99 23       	and	r25, r25
     80e:	b1 f1       	breq	.+108    	; 0x87c <_ZN13ShiftingState9GetImagesER16ImagesCollection+0xdc>
     810:	81 11       	cpse	r24, r1
     812:	26 c0       	rjmp	.+76     	; 0x860 <_ZN13ShiftingState9GetImagesER16ImagesCollection+0xc0>
     814:	16 96       	adiw	r26, 0x06	; 6
     816:	8c 91       	ld	r24, X
     818:	16 97       	sbiw	r26, 0x06	; 6
     81a:	88 23       	and	r24, r24
     81c:	91 f0       	breq	.+36     	; 0x842 <_ZN13ShiftingState9GetImagesER16ImagesCollection+0xa2>
			collection.a_in_image = MainInSignal::Images::RED;
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	91 83       	std	Z+1, r25	; 0x01
     824:	80 83       	st	Z, r24
			collection.a_out_image = m_dev_a ? MainOutSignal::Images::GREEN_DEVIATE : MainOutSignal::Images::GREEN_STRAIGHT;
     826:	14 96       	adiw	r26, 0x04	; 4
     828:	8c 91       	ld	r24, X
     82a:	81 11       	cpse	r24, r1
     82c:	03 c0       	rjmp	.+6      	; 0x834 <_ZN13ShiftingState9GetImagesER16ImagesCollection+0x94>
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	02 c0       	rjmp	.+4      	; 0x838 <_ZN13ShiftingState9GetImagesER16ImagesCollection+0x98>
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	95 83       	std	Z+5, r25	; 0x05
     83a:	84 83       	std	Z+4, r24	; 0x04
			collection.b_in_image = MainInSignal::Images::RED;
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	06 c0       	rjmp	.+12     	; 0x84e <_ZN13ShiftingState9GetImagesER16ImagesCollection+0xae>
			collection.b_out_image = MainOutSignal::Images::RED;
			collection.b_shift_image = TallShift::Images::ON;
			collection.a_shift_image = TallShift::Images::OFF;
		} else if(m_shift_b && !m_shift_a && !m_out_a) {
			collection.a_in_image = MainInSignal::Images::RED;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	91 83       	std	Z+1, r25	; 0x01
     848:	80 83       	st	Z, r24
			collection.a_out_image = MainOutSignal::Images::RED;
     84a:	95 83       	std	Z+5, r25	; 0x05
     84c:	84 83       	std	Z+4, r24	; 0x04
			collection.b_in_image = MainInSignal::Images::RED;
     84e:	93 83       	std	Z+3, r25	; 0x03
     850:	82 83       	std	Z+2, r24	; 0x02
			collection.b_out_image = MainOutSignal::Images::RED;
     852:	97 83       	std	Z+7, r25	; 0x07
     854:	86 83       	std	Z+6, r24	; 0x06
			collection.b_shift_image = TallShift::Images::ON;
     856:	93 87       	std	Z+11, r25	; 0x0b
     858:	82 87       	std	Z+10, r24	; 0x0a
			collection.a_shift_image = TallShift::Images::OFF;
     85a:	11 86       	std	Z+9, r1	; 0x09
     85c:	10 86       	std	Z+8, r1	; 0x08
     85e:	08 95       	ret
		} else if(m_shift_b && m_shift_a) {
			collection.a_in_image = MainInSignal::Images::RED;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	91 83       	std	Z+1, r25	; 0x01
     866:	80 83       	st	Z, r24
			collection.a_out_image = MainOutSignal::Images::RED;
     868:	95 83       	std	Z+5, r25	; 0x05
     86a:	84 83       	std	Z+4, r24	; 0x04
			collection.b_in_image = MainInSignal::Images::RED;
     86c:	93 83       	std	Z+3, r25	; 0x03
     86e:	82 83       	std	Z+2, r24	; 0x02
			collection.b_out_image = MainOutSignal::Images::RED;
     870:	97 83       	std	Z+7, r25	; 0x07
     872:	86 83       	std	Z+6, r24	; 0x06
			collection.b_shift_image = TallShift::Images::ON;
     874:	93 87       	std	Z+11, r25	; 0x0b
     876:	82 87       	std	Z+10, r24	; 0x0a
			collection.a_shift_image = TallShift::Images::ON;
     878:	91 87       	std	Z+9, r25	; 0x09
     87a:	80 87       	std	Z+8, r24	; 0x08
     87c:	08 95       	ret

0000087e <_ZN13DistantSignal8SetImageENS_6ImagesE.part.7>:
	m_orange(orange_pin)
	{}

	virtual ~DistantSignal() {}

	void SetImage(Images img) {
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	ec 01       	movw	r28, r24
					m_green.Enable();
					m_orange.Enable();
					break;
		case Images::NONE:
		default:
			m_green.Disable();
     884:	02 96       	adiw	r24, 0x02	; 2
     886:	ba de       	rcall	.-652    	; 0x5fc <_ZN4Bulb7DisableEv>
     888:	ce 01       	movw	r24, r28
			m_orange.Disable();
     88a:	4d 96       	adiw	r24, 0x1d	; 29
     88c:	df 91       	pop	r29
		}
	}
     88e:	cf 91       	pop	r28
     890:	b5 ce       	rjmp	.-662    	; 0x5fc <_ZN4Bulb7DisableEv>

00000892 <_ZN4BulbC1Ei>:
#include "Arduino.h"

class Bulb
{
public:
	Bulb(int pin_no) : m_pin_no(pin_no),
     892:	fc 01       	movw	r30, r24
     894:	86 2f       	mov	r24, r22
	m_enabled(false),
	m_on_pwm_value(200),
	m_off_pwm_value(0)
     896:	2c e1       	ldi	r18, 0x1C	; 28
     898:	32 e0       	ldi	r19, 0x02	; 2
     89a:	31 83       	std	Z+1, r19	; 0x01
     89c:	20 83       	st	Z, r18
     89e:	62 83       	std	Z+2, r22	; 0x02
     8a0:	73 83       	std	Z+3, r23	; 0x03
     8a2:	14 82       	std	Z+4, r1	; 0x04
     8a4:	28 ec       	ldi	r18, 0xC8	; 200
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	36 83       	std	Z+6, r19	; 0x06
     8aa:	25 83       	std	Z+5, r18	; 0x05
     8ac:	10 86       	std	Z+8, r1	; 0x08
     8ae:	17 82       	std	Z+7, r1	; 0x07
	 {
		pinMode(pin_no, OUTPUT);
     8b0:	61 e0       	ldi	r22, 0x01	; 1
     8b2:	e5 c6       	rjmp	.+3530   	; 0x167e <pinMode>

000008b4 <_ZN12FlashingBulbC1Ei>:
};

class FlashingBulb : public Bulb
{
public:
	FlashingBulb(const int pin_no) : Bulb(pin_no),
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	ec 01       	movw	r28, r24
			m_blink_interval(1000),
			m_fadeup_time(100),
			m_fadedown_time(200),
			m_on_percentage(60.0f) {
     8ba:	eb df       	rcall	.-42     	; 0x892 <_ZN4BulbC1Ei>
     8bc:	88 e2       	ldi	r24, 0x28	; 40
     8be:	92 e0       	ldi	r25, 0x02	; 2
     8c0:	99 83       	std	Y+1, r25	; 0x01
     8c2:	88 83       	st	Y, r24
     8c4:	88 ee       	ldi	r24, 0xE8	; 232
     8c6:	93 e0       	ldi	r25, 0x03	; 3
     8c8:	9a 87       	std	Y+10, r25	; 0x0a
     8ca:	89 87       	std	Y+9, r24	; 0x09
     8cc:	84 e6       	ldi	r24, 0x64	; 100
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	9c 87       	std	Y+12, r25	; 0x0c
     8d2:	8b 87       	std	Y+11, r24	; 0x0b
     8d4:	28 ec       	ldi	r18, 0xC8	; 200
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	3e 87       	std	Y+14, r19	; 0x0e
     8da:	2d 87       	std	Y+13, r18	; 0x0d
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	60 e7       	ldi	r22, 0x70	; 112
     8e2:	72 e4       	ldi	r23, 0x42	; 66
     8e4:	4f 87       	std	Y+15, r20	; 0x0f
     8e6:	58 8b       	std	Y+16, r21	; 0x10
     8e8:	69 8b       	std	Y+17, r22	; 0x11
     8ea:	7a 8b       	std	Y+18, r23	; 0x12
     8ec:	9c 8b       	std	Y+20, r25	; 0x14
		m_fade_up_end = m_fadeup_time;
     8ee:	8b 8b       	std	Y+19, r24	; 0x13
     8f0:	88 e5       	ldi	r24, 0x58	; 88
		m_fade_down_start = (int)(m_blink_interval*m_on_percentage/100.0f);
     8f2:	92 e0       	ldi	r25, 0x02	; 2
     8f4:	9e 8b       	std	Y+22, r25	; 0x16
     8f6:	8d 8b       	std	Y+21, r24	; 0x15
     8f8:	80 e2       	ldi	r24, 0x20	; 32
		m_fade_down_end = m_fade_down_start + m_fadedown_time;
     8fa:	93 e0       	ldi	r25, 0x03	; 3
     8fc:	98 8f       	std	Y+24, r25	; 0x18
     8fe:	8f 8b       	std	Y+23, r24	; 0x17
     900:	1a 8e       	std	Y+26, r1	; 0x1a
		m_prev_brightness = 0;
     902:	19 8e       	std	Y+25, r1	; 0x19
     904:	df 91       	pop	r29
	}
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <_ZN12FlashingBulb6UpdateEm>:

	void Update(const unsigned long current_time) {
     90a:	8f 92       	push	r8
     90c:	9f 92       	push	r9
     90e:	af 92       	push	r10
     910:	bf 92       	push	r11
     912:	cf 92       	push	r12
     914:	df 92       	push	r13
     916:	ef 92       	push	r14
     918:	ff 92       	push	r15
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	ec 01       	movw	r28, r24
		if(!m_enabled)
     924:	8c 81       	ldd	r24, Y+4	; 0x04
     926:	88 23       	and	r24, r24
     928:	09 f4       	brne	.+2      	; 0x92c <_ZN12FlashingBulb6UpdateEm+0x22>
     92a:	9a c0       	rjmp	.+308    	; 0xa60 <_ZN12FlashingBulb6UpdateEm+0x156>
     92c:	cb 01       	movw	r24, r22
     92e:	ba 01       	movw	r22, r20
			return;

		unsigned long interval_time = current_time % m_blink_interval;
     930:	29 85       	ldd	r18, Y+9	; 0x09
     932:	3a 85       	ldd	r19, Y+10	; 0x0a
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	35 d7       	rcall	.+3690   	; 0x17a4 <__udivmodsi4>
     93a:	cb 88       	ldd	r12, Y+19	; 0x13
			unsigned int brightness;
			if(interval_time < m_fade_up_end) {
     93c:	dc 88       	ldd	r13, Y+20	; 0x14
     93e:	e1 2c       	mov	r14, r1
     940:	f1 2c       	mov	r15, r1
     942:	6c 15       	cp	r22, r12
     944:	7d 05       	cpc	r23, r13
     946:	8e 05       	cpc	r24, r14
     948:	9f 05       	cpc	r25, r15
     94a:	58 f5       	brcc	.+86     	; 0x9a2 <_ZN12FlashingBulb6UpdateEm+0x98>
     94c:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__floatunsisf>
				float s = ((float) interval_time);
     950:	4b 01       	movw	r8, r22
     952:	5c 01       	movw	r10, r24
     954:	c7 01       	movw	r24, r14
		                s /= m_fade_up_end;
     956:	b6 01       	movw	r22, r12
     958:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__floatunsisf>
     95c:	9b 01       	movw	r18, r22
     95e:	ac 01       	movw	r20, r24
     960:	c5 01       	movw	r24, r10
     962:	b4 01       	movw	r22, r8
     964:	ae d7       	rcall	.+3932   	; 0x18c2 <__divsf3>
     966:	6b 01       	movw	r12, r22
     968:	7c 01       	movw	r14, r24
     96a:	9b 01       	movw	r18, r22
     96c:	ac 01       	movw	r20, r24
				brightness = (int) ((1.0f - s)*m_off_pwm_value + s*m_on_pwm_value);
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	80 e8       	ldi	r24, 0x80	; 128
     974:	9f e3       	ldi	r25, 0x3F	; 63
     976:	40 d7       	rcall	.+3712   	; 0x17f8 <__subsf3>
     978:	4b 01       	movw	r8, r22
     97a:	5c 01       	movw	r10, r24
     97c:	8f 81       	ldd	r24, Y+7	; 0x07
     97e:	98 85       	ldd	r25, Y+8	; 0x08
     980:	bc 01       	movw	r22, r24
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__floatunsisf>
     98a:	9b 01       	movw	r18, r22
     98c:	ac 01       	movw	r20, r24
     98e:	c5 01       	movw	r24, r10
     990:	b4 01       	movw	r22, r8
     992:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__mulsf3>
     996:	4b 01       	movw	r8, r22
     998:	5c 01       	movw	r10, r24
     99a:	8d 81       	ldd	r24, Y+5	; 0x05
     99c:	9e 81       	ldd	r25, Y+6	; 0x06
     99e:	bc 01       	movw	r22, r24
     9a0:	45 c0       	rjmp	.+138    	; 0xa2c <_ZN12FlashingBulb6UpdateEm+0x122>
     9a2:	cd 88       	ldd	r12, Y+21	; 0x15
     9a4:	de 88       	ldd	r13, Y+22	; 0x16
     9a6:	e1 2c       	mov	r14, r1
			} else if(interval_time >= m_fade_up_end && interval_time < m_fade_down_start) {
     9a8:	f1 2c       	mov	r15, r1
     9aa:	6c 15       	cp	r22, r12
     9ac:	7d 05       	cpc	r23, r13
     9ae:	8e 05       	cpc	r24, r14
     9b0:	9f 05       	cpc	r25, r15
     9b2:	18 f4       	brcc	.+6      	; 0x9ba <_ZN12FlashingBulb6UpdateEm+0xb0>
     9b4:	0d 81       	ldd	r16, Y+5	; 0x05
     9b6:	1e 81       	ldd	r17, Y+6	; 0x06
     9b8:	49 c0       	rjmp	.+146    	; 0xa4c <_ZN12FlashingBulb6UpdateEm+0x142>
				brightness = m_on_pwm_value;
     9ba:	8f 88       	ldd	r8, Y+23	; 0x17
     9bc:	98 8c       	ldd	r9, Y+24	; 0x18
     9be:	a1 2c       	mov	r10, r1
			} else if(interval_time >= m_fade_down_start && interval_time < m_fade_down_end) {
     9c0:	b1 2c       	mov	r11, r1
     9c2:	0f 81       	ldd	r16, Y+7	; 0x07
     9c4:	18 85       	ldd	r17, Y+8	; 0x08
     9c6:	68 15       	cp	r22, r8
     9c8:	79 05       	cpc	r23, r9
     9ca:	8a 05       	cpc	r24, r10
     9cc:	9b 05       	cpc	r25, r11
     9ce:	08 f0       	brcs	.+2      	; 0x9d2 <_ZN12FlashingBulb6UpdateEm+0xc8>
     9d0:	3d c0       	rjmp	.+122    	; 0xa4c <_ZN12FlashingBulb6UpdateEm+0x142>
     9d2:	6c 19       	sub	r22, r12
     9d4:	7d 09       	sbc	r23, r13
     9d6:	8e 09       	sbc	r24, r14
				float s = ((float) (interval_time-m_fade_down_start));
     9d8:	9f 09       	sbc	r25, r15
     9da:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__floatunsisf>
     9de:	6b 01       	movw	r12, r22
     9e0:	7c 01       	movw	r14, r24
     9e2:	8d 85       	ldd	r24, Y+13	; 0x0d
     9e4:	9e 85       	ldd	r25, Y+14	; 0x0e
     9e6:	bc 01       	movw	r22, r24
		                s /= m_fadedown_time;
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__floatunsisf>
     9f0:	9b 01       	movw	r18, r22
     9f2:	ac 01       	movw	r20, r24
     9f4:	c7 01       	movw	r24, r14
     9f6:	b6 01       	movw	r22, r12
     9f8:	64 d7       	rcall	.+3784   	; 0x18c2 <__divsf3>
     9fa:	6b 01       	movw	r12, r22
     9fc:	7c 01       	movw	r14, r24
     9fe:	9b 01       	movw	r18, r22
     a00:	ac 01       	movw	r20, r24
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	70 e0       	ldi	r23, 0x00	; 0
				brightness = (int)((1.0f - s)*m_on_pwm_value + s*m_off_pwm_value);
     a06:	80 e8       	ldi	r24, 0x80	; 128
     a08:	9f e3       	ldi	r25, 0x3F	; 63
     a0a:	f6 d6       	rcall	.+3564   	; 0x17f8 <__subsf3>
     a0c:	4b 01       	movw	r8, r22
     a0e:	5c 01       	movw	r10, r24
     a10:	6d 81       	ldd	r22, Y+5	; 0x05
     a12:	7e 81       	ldd	r23, Y+6	; 0x06
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	ed d7       	rcall	.+4058   	; 0x19f4 <__floatunsisf>
     a1a:	9b 01       	movw	r18, r22
     a1c:	ac 01       	movw	r20, r24
     a1e:	c5 01       	movw	r24, r10
     a20:	b4 01       	movw	r22, r8
     a22:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__mulsf3>
     a26:	4b 01       	movw	r8, r22
     a28:	5c 01       	movw	r10, r24
     a2a:	b8 01       	movw	r22, r16
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	e1 d7       	rcall	.+4034   	; 0x19f4 <__floatunsisf>
     a32:	9b 01       	movw	r18, r22
     a34:	ac 01       	movw	r20, r24
     a36:	c7 01       	movw	r24, r14
     a38:	b6 01       	movw	r22, r12
     a3a:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__mulsf3>
     a3e:	9b 01       	movw	r18, r22
     a40:	ac 01       	movw	r20, r24
     a42:	c5 01       	movw	r24, r10
     a44:	b4 01       	movw	r22, r8
     a46:	d9 d6       	rcall	.+3506   	; 0x17fa <__addsf3>
     a48:	a4 d7       	rcall	.+3912   	; 0x1992 <__fixsfsi>
     a4a:	8b 01       	movw	r16, r22
     a4c:	89 8d       	ldd	r24, Y+25	; 0x19
     a4e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a50:	08 17       	cp	r16, r24
     a52:	19 07       	cpc	r17, r25
     a54:	29 f0       	breq	.+10     	; 0xa60 <_ZN12FlashingBulb6UpdateEm+0x156>
     a56:	b8 01       	movw	r22, r16
     a58:	8a 81       	ldd	r24, Y+2	; 0x02
     a5a:	f6 d4       	rcall	.+2540   	; 0x1448 <analogWrite>
     a5c:	1a 8f       	std	Y+26, r17	; 0x1a
			} else {
				brightness = m_off_pwm_value;
			}

			if(brightness != m_prev_brightness)
     a5e:	09 8f       	std	Y+25, r16	; 0x19
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
			{
				analogWrite(m_pin_no, brightness);
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
				m_prev_brightness = brightness;
     a70:	bf 90       	pop	r11
     a72:	af 90       	pop	r10
			}
	}
     a74:	9f 90       	pop	r9
     a76:	8f 90       	pop	r8
     a78:	08 95       	ret

00000a7a <_ZN13DistantSignal6UpdateEm>:

	void Update(const unsigned long current_time) override {
     a7a:	cf 92       	push	r12
     a7c:	df 92       	push	r13
     a7e:	ef 92       	push	r14
     a80:	ff 92       	push	r15
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	ec 01       	movw	r28, r24
     a88:	6a 01       	movw	r12, r20
     a8a:	7b 01       	movw	r14, r22
		m_green.Update(current_time);
     a8c:	02 96       	adiw	r24, 0x02	; 2
     a8e:	3d df       	rcall	.-390    	; 0x90a <_ZN12FlashingBulb6UpdateEm>
     a90:	b7 01       	movw	r22, r14
		m_orange.Update(current_time);
     a92:	a6 01       	movw	r20, r12
     a94:	ce 01       	movw	r24, r28
     a96:	4d 96       	adiw	r24, 0x1d	; 29
     a98:	df 91       	pop	r29
	}
     a9a:	cf 91       	pop	r28
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	df 90       	pop	r13
     aa2:	cf 90       	pop	r12
     aa4:	32 cf       	rjmp	.-412    	; 0x90a <_ZN12FlashingBulb6UpdateEm>

00000aa6 <_ZN13MainOutSignal6UpdateEm>:
			m_d_red.Disable();
		}
	}

	void Update(const unsigned long current_time) override {
			m_distant.Update(current_time);
     aa6:	8f 96       	adiw	r24, 0x2f	; 47
     aa8:	e8 cf       	rjmp	.-48     	; 0xa7a <_ZN13DistantSignal6UpdateEm>

00000aaa <_ZN12MainInSignal6UpdateEm>:
			m_bottom_green.Disable();
			m_distant.SetImage(DistantSignal::Images::NONE);
		}
	}

	void Update(const unsigned long current_time) override {
     aaa:	cf 92       	push	r12
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	ec 01       	movw	r28, r24
     ab8:	6a 01       	movw	r12, r20
     aba:	7b 01       	movw	r14, r22
		m_center_red.Update(current_time);
     abc:	0b 96       	adiw	r24, 0x0b	; 11
     abe:	25 df       	rcall	.-438    	; 0x90a <_ZN12FlashingBulb6UpdateEm>
     ac0:	b7 01       	movw	r22, r14
		m_distant.Update(current_time);
     ac2:	a6 01       	movw	r20, r12
     ac4:	ce 01       	movw	r24, r28
     ac6:	8f 96       	adiw	r24, 0x2f	; 47
     ac8:	df 91       	pop	r29
	}
     aca:	cf 91       	pop	r28
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	df 90       	pop	r13
     ad2:	cf 90       	pop	r12
     ad4:	d2 cf       	rjmp	.-92     	; 0xa7a <_ZN13DistantSignal6UpdateEm>

00000ad6 <_ZN9TallShift8SetImageENS_6ImagesE>:
		OFF,
		ON
	};
	TallShift(unsigned int pin_no) : Signal(), m_bulb(pin_no) {}

	void SetImage(Images img) {
     ad6:	02 96       	adiw	r24, 0x02	; 2
			switch(img) {
     ad8:	61 30       	cpi	r22, 0x01	; 1
     ada:	71 05       	cpc	r23, r1
     adc:	09 f4       	brne	.+2      	; 0xae0 <_ZN9TallShift8SetImageENS_6ImagesE+0xa>
			case Images::ON:
				m_bulb.Enable();
     ade:	82 cd       	rjmp	.-1276   	; 0x5e4 <_ZN4Bulb6EnableEv>
     ae0:	8d cd       	rjmp	.-1254   	; 0x5fc <_ZN4Bulb7DisableEv>

00000ae2 <_ZN13DistantSignal8SetImageENS_6ImagesE>:
	m_orange(orange_pin)
	{}

	virtual ~DistantSignal() {}

	void SetImage(Images img) {
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	ec 01       	movw	r28, r24
		switch(img) {
     ae8:	62 30       	cpi	r22, 0x02	; 2
     aea:	71 05       	cpc	r23, r1
     aec:	69 f0       	breq	.+26     	; 0xb08 <_ZN13DistantSignal8SetImageENS_6ImagesE+0x26>
     aee:	63 30       	cpi	r22, 0x03	; 3
     af0:	71 05       	cpc	r23, r1
     af2:	69 f0       	breq	.+26     	; 0xb0e <_ZN13DistantSignal8SetImageENS_6ImagesE+0x2c>
     af4:	61 30       	cpi	r22, 0x01	; 1
     af6:	71 05       	cpc	r23, r1
     af8:	89 f4       	brne	.+34     	; 0xb1c <_ZN13DistantSignal8SetImageENS_6ImagesE+0x3a>
		case Images::GREEN:
			m_green.Enable();
     afa:	02 96       	adiw	r24, 0x02	; 2
     afc:	73 dd       	rcall	.-1306   	; 0x5e4 <_ZN4Bulb6EnableEv>
     afe:	ce 01       	movw	r24, r28
			m_orange.Disable();
     b00:	4d 96       	adiw	r24, 0x1d	; 29
     b02:	df 91       	pop	r29
		case Images::NONE:
		default:
			m_green.Disable();
			m_orange.Disable();
		}
	}
     b04:	cf 91       	pop	r28
     b06:	7a cd       	rjmp	.-1292   	; 0x5fc <_ZN4Bulb7DisableEv>

	void SetImage(Images img) {
		switch(img) {
		case Images::GREEN:
			m_green.Enable();
			m_orange.Disable();
     b08:	02 96       	adiw	r24, 0x02	; 2
     b0a:	78 dd       	rcall	.-1296   	; 0x5fc <_ZN4Bulb7DisableEv>
			break;
		case Images::ORANGE:
					m_green.Disable();
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <_ZN13DistantSignal8SetImageENS_6ImagesE+0x30>
     b0e:	02 96       	adiw	r24, 0x02	; 2
     b10:	69 dd       	rcall	.-1326   	; 0x5e4 <_ZN4Bulb6EnableEv>
     b12:	ce 01       	movw	r24, r28
					m_orange.Enable();
					break;
		case Images::BOTH:
					m_green.Enable();
     b14:	4d 96       	adiw	r24, 0x1d	; 29
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
					m_orange.Enable();
     b1a:	64 cd       	rjmp	.-1336   	; 0x5e4 <_ZN4Bulb6EnableEv>
     b1c:	df 91       	pop	r29
		case Images::NONE:
		default:
			m_green.Disable();
			m_orange.Disable();
		}
	}
     b1e:	cf 91       	pop	r28
     b20:	ae ce       	rjmp	.-676    	; 0x87e <_ZN13DistantSignal8SetImageENS_6ImagesE.part.7>

00000b22 <_ZN12MainInSignal8SetImageENS_6ImagesE>:
		SetImage(m_image);
	}

	virtual ~MainInSignal() {}

	void SetImage(Images img) {
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	9c 01       	movw	r18, r24
		m_image = img;
     b30:	fc 01       	movw	r30, r24
     b32:	e9 59       	subi	r30, 0x99	; 153
     b34:	ff 4f       	sbci	r31, 0xFF	; 255
     b36:	71 83       	std	Z+1, r23	; 0x01
     b38:	60 83       	st	Z, r22
     b3a:	02 96       	adiw	r24, 0x02	; 2
     b3c:	a9 01       	movw	r20, r18
     b3e:	45 5f       	subi	r20, 0xF5	; 245
     b40:	5f 4f       	sbci	r21, 0xFF	; 255
     b42:	7a 01       	movw	r14, r20
     b44:	89 01       	movw	r16, r18
     b46:	0a 5d       	subi	r16, 0xDA	; 218
     b48:	1f 4f       	sbci	r17, 0xFF	; 255
     b4a:	e9 01       	movw	r28, r18
     b4c:	af 96       	adiw	r28, 0x2f	; 47
		switch(img) {
     b4e:	61 30       	cpi	r22, 0x01	; 1
     b50:	71 05       	cpc	r23, r1
     b52:	69 f0       	breq	.+26     	; 0xb6e <_ZN12MainInSignal8SetImageENS_6ImagesE+0x4c>
     b54:	62 30       	cpi	r22, 0x02	; 2
     b56:	71 05       	cpc	r23, r1
     b58:	c9 f0       	breq	.+50     	; 0xb8c <_ZN12MainInSignal8SetImageENS_6ImagesE+0x6a>
     b5a:	67 2b       	or	r22, r23
     b5c:	f9 f4       	brne	.+62     	; 0xb9c <_ZN12MainInSignal8SetImageENS_6ImagesE+0x7a>
		case Images::GREEN_STRAIGHT:
			m_top_green.Enable();
     b5e:	42 dd       	rcall	.-1404   	; 0x5e4 <_ZN4Bulb6EnableEv>
     b60:	c7 01       	movw	r24, r14
			m_center_red.Disable();
     b62:	4c dd       	rcall	.-1384   	; 0x5fc <_ZN4Bulb7DisableEv>
     b64:	c8 01       	movw	r24, r16
     b66:	3e dd       	rcall	.-1412   	; 0x5e4 <_ZN4Bulb6EnableEv>
			m_bottom_green.Enable();
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	07 c0       	rjmp	.+14     	; 0xb7c <_ZN12MainInSignal8SetImageENS_6ImagesE+0x5a>
			m_distant.SetImage(DistantSignal::Images::GREEN);
     b6e:	46 dd       	rcall	.-1396   	; 0x5fc <_ZN4Bulb7DisableEv>
     b70:	c7 01       	movw	r24, r14
     b72:	38 dd       	rcall	.-1424   	; 0x5e4 <_ZN4Bulb6EnableEv>
			break;
		case Images::RED:
					m_top_green.Disable();
     b74:	c8 01       	movw	r24, r16
     b76:	42 dd       	rcall	.-1404   	; 0x5fc <_ZN4Bulb7DisableEv>
					m_center_red.Enable();
     b78:	62 e0       	ldi	r22, 0x02	; 2
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	ce 01       	movw	r24, r28
					m_bottom_green.Disable();
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	1f 91       	pop	r17
					m_distant.SetImage(DistantSignal::Images::ORANGE);
     b84:	0f 91       	pop	r16
     b86:	ff 90       	pop	r15
     b88:	ef 90       	pop	r14
			m_top_green.Disable();
			m_center_red.Disable();
			m_bottom_green.Disable();
			m_distant.SetImage(DistantSignal::Images::NONE);
		}
	}
     b8a:	ab cf       	rjmp	.-170    	; 0xae2 <_ZN13DistantSignal8SetImageENS_6ImagesE>
     b8c:	2b dd       	rcall	.-1450   	; 0x5e4 <_ZN4Bulb6EnableEv>
     b8e:	c7 01       	movw	r24, r14
     b90:	35 dd       	rcall	.-1430   	; 0x5fc <_ZN4Bulb7DisableEv>
     b92:	c8 01       	movw	r24, r16
     b94:	33 dd       	rcall	.-1434   	; 0x5fc <_ZN4Bulb7DisableEv>
			break;
		case Images::RED:
					m_top_green.Disable();
					m_center_red.Enable();
					m_bottom_green.Disable();
					m_distant.SetImage(DistantSignal::Images::ORANGE);
     b96:	63 e0       	ldi	r22, 0x03	; 3
     b98:	70 e0       	ldi	r23, 0x00	; 0
					break;
		case Images::GREEN_DEVIATE:
					m_top_green.Enable();
     b9a:	f0 cf       	rjmp	.-32     	; 0xb7c <_ZN12MainInSignal8SetImageENS_6ImagesE+0x5a>
     b9c:	2f dd       	rcall	.-1442   	; 0x5fc <_ZN4Bulb7DisableEv>
					m_center_red.Disable();
     b9e:	c7 01       	movw	r24, r14
     ba0:	2d dd       	rcall	.-1446   	; 0x5fc <_ZN4Bulb7DisableEv>
     ba2:	c8 01       	movw	r24, r16
					m_bottom_green.Disable();
     ba4:	2b dd       	rcall	.-1450   	; 0x5fc <_ZN4Bulb7DisableEv>
     ba6:	ce 01       	movw	r24, r28
     ba8:	df 91       	pop	r29
					m_distant.SetImage(DistantSignal::Images::BOTH);
     baa:	cf 91       	pop	r28
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
					break;
		default:
			m_top_green.Disable();
     bb0:	ff 90       	pop	r15
     bb2:	ef 90       	pop	r14
			m_center_red.Disable();
     bb4:	64 ce       	rjmp	.-824    	; 0x87e <_ZN13DistantSignal8SetImageENS_6ImagesE.part.7>

00000bb6 <_ZN12MainInSignalC1Ejjjjj>:
			GREEN_STRAIGHT,
			RED,
			GREEN_DEVIATE
		};

	MainInSignal(unsigned int top_green_pin, unsigned int center_red_pin,
     bb6:	af 92       	push	r10
     bb8:	bf 92       	push	r11
     bba:	cf 92       	push	r12
     bbc:	df 92       	push	r13
     bbe:	ef 92       	push	r14
     bc0:	ff 92       	push	r15
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	ec 01       	movw	r28, r24
     bcc:	5a 01       	movw	r10, r20
     bce:	69 01       	movw	r12, r18
			unsigned int distant_orange_pin) : Signal(),
	m_top_green(top_green_pin),
	m_center_red(center_red_pin),
	m_bottom_green(bottom_green_pin),
	m_distant(distant_green_pin, distant_orange_pin),
	m_image(Images::RED){
     bd0:	2e e4       	ldi	r18, 0x4E	; 78
     bd2:	32 e0       	ldi	r19, 0x02	; 2
     bd4:	fc 01       	movw	r30, r24
     bd6:	21 93       	st	Z+, r18
     bd8:	31 93       	st	Z+, r19
     bda:	cf 01       	movw	r24, r30
     bdc:	5a de       	rcall	.-844    	; 0x892 <_ZN4BulbC1Ei>
     bde:	b5 01       	movw	r22, r10
     be0:	ce 01       	movw	r24, r28
     be2:	0b 96       	adiw	r24, 0x0b	; 11
     be4:	67 de       	rcall	.-818    	; 0x8b4 <_ZN12FlashingBulbC1Ei>
     be6:	b6 01       	movw	r22, r12
     be8:	ce 01       	movw	r24, r28
     bea:	86 96       	adiw	r24, 0x26	; 38
     bec:	52 de       	rcall	.-860    	; 0x892 <_ZN4BulbC1Ei>
     bee:	84 e4       	ldi	r24, 0x44	; 68
     bf0:	92 e0       	ldi	r25, 0x02	; 2
     bf2:	98 ab       	std	Y+48, r25	; 0x30
			BOTH
		};

	DistantSignal(unsigned int green_pin, unsigned int orange_pin) : Signal(),
	m_green(green_pin),
	m_orange(orange_pin)
     bf4:	8f a7       	std	Y+47, r24	; 0x2f
     bf6:	6e 01       	movw	r12, r28
     bf8:	ff e2       	ldi	r31, 0x2F	; 47
     bfa:	cf 0e       	add	r12, r31
     bfc:	d1 1c       	adc	r13, r1
     bfe:	b8 01       	movw	r22, r16
     c00:	ce 01       	movw	r24, r28
     c02:	c1 96       	adiw	r24, 0x31	; 49
     c04:	57 de       	rcall	.-850    	; 0x8b4 <_ZN12FlashingBulbC1Ei>
     c06:	b7 01       	movw	r22, r14
     c08:	c6 01       	movw	r24, r12
     c0a:	4d 96       	adiw	r24, 0x1d	; 29
     c0c:	53 de       	rcall	.-858    	; 0x8b4 <_ZN12FlashingBulbC1Ei>
     c0e:	fe 01       	movw	r30, r28
     c10:	e9 59       	subi	r30, 0x99	; 153
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	90 e0       	ldi	r25, 0x00	; 0
			unsigned int distant_orange_pin) : Signal(),
	m_top_green(top_green_pin),
	m_center_red(center_red_pin),
	m_bottom_green(bottom_green_pin),
	m_distant(distant_green_pin, distant_orange_pin),
	m_image(Images::RED){
     c18:	91 83       	std	Z+1, r25	; 0x01
     c1a:	80 83       	st	Z, r24
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	ce 01       	movw	r24, r28
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
		SetImage(m_image);
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	ff 90       	pop	r15
	}
     c2c:	ef 90       	pop	r14
     c2e:	df 90       	pop	r13
     c30:	cf 90       	pop	r12
     c32:	bf 90       	pop	r11
     c34:	af 90       	pop	r10
     c36:	75 cf       	rjmp	.-278    	; 0xb22 <_ZN12MainInSignal8SetImageENS_6ImagesE>

00000c38 <_ZN13MainOutSignalC1Ejjjjjjj>:
			GREEN_STRAIGHT,
			RED,
			GREEN_DEVIATE
		};

	MainOutSignal(unsigned int s_top_green_pin,
     c38:	6f 92       	push	r6
     c3a:	7f 92       	push	r7
     c3c:	8f 92       	push	r8
     c3e:	9f 92       	push	r9
     c40:	af 92       	push	r10
     c42:	bf 92       	push	r11
     c44:	cf 92       	push	r12
     c46:	df 92       	push	r13
     c48:	ef 92       	push	r14
     c4a:	ff 92       	push	r15
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	ec 01       	movw	r28, r24
     c56:	3a 01       	movw	r6, r20
     c58:	49 01       	movw	r8, r18
	m_s_top_green(s_top_green_pin),
	m_s_center_red(s_center_red_pin),
	m_s_bottom_green(s_bottom_green_pin),
	m_d_green(d_green_pin),
	m_d_red(d_red_pin),
	m_distant(distant_green_pin, distant_orange_pin){}
     c5a:	28 e5       	ldi	r18, 0x58	; 88
     c5c:	32 e0       	ldi	r19, 0x02	; 2
     c5e:	fc 01       	movw	r30, r24
     c60:	21 93       	st	Z+, r18
     c62:	31 93       	st	Z+, r19
     c64:	cf 01       	movw	r24, r30
     c66:	15 de       	rcall	.-982    	; 0x892 <_ZN4BulbC1Ei>
     c68:	b3 01       	movw	r22, r6
     c6a:	ce 01       	movw	r24, r28
     c6c:	0b 96       	adiw	r24, 0x0b	; 11
     c6e:	11 de       	rcall	.-990    	; 0x892 <_ZN4BulbC1Ei>
     c70:	b4 01       	movw	r22, r8
     c72:	ce 01       	movw	r24, r28
     c74:	44 96       	adiw	r24, 0x14	; 20
     c76:	0d de       	rcall	.-998    	; 0x892 <_ZN4BulbC1Ei>
     c78:	b8 01       	movw	r22, r16
     c7a:	ce 01       	movw	r24, r28
     c7c:	4d 96       	adiw	r24, 0x1d	; 29
     c7e:	09 de       	rcall	.-1006   	; 0x892 <_ZN4BulbC1Ei>
     c80:	b7 01       	movw	r22, r14
     c82:	ce 01       	movw	r24, r28
     c84:	86 96       	adiw	r24, 0x26	; 38
     c86:	05 de       	rcall	.-1014   	; 0x892 <_ZN4BulbC1Ei>
     c88:	84 e4       	ldi	r24, 0x44	; 68
     c8a:	92 e0       	ldi	r25, 0x02	; 2
     c8c:	98 ab       	std	Y+48, r25	; 0x30
     c8e:	8f a7       	std	Y+47, r24	; 0x2f
     c90:	8e 01       	movw	r16, r28
			BOTH
		};

	DistantSignal(unsigned int green_pin, unsigned int orange_pin) : Signal(),
	m_green(green_pin),
	m_orange(orange_pin)
     c92:	01 5d       	subi	r16, 0xD1	; 209
     c94:	1f 4f       	sbci	r17, 0xFF	; 255
     c96:	b6 01       	movw	r22, r12
     c98:	ce 01       	movw	r24, r28
     c9a:	c1 96       	adiw	r24, 0x31	; 49
     c9c:	0b de       	rcall	.-1002   	; 0x8b4 <_ZN12FlashingBulbC1Ei>
     c9e:	b5 01       	movw	r22, r10
     ca0:	c8 01       	movw	r24, r16
     ca2:	4d 96       	adiw	r24, 0x1d	; 29
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
	m_s_top_green(s_top_green_pin),
	m_s_center_red(s_center_red_pin),
	m_s_bottom_green(s_bottom_green_pin),
	m_d_green(d_green_pin),
	m_d_red(d_red_pin),
	m_distant(distant_green_pin, distant_orange_pin){}
     cb0:	df 90       	pop	r13
     cb2:	cf 90       	pop	r12
     cb4:	bf 90       	pop	r11
     cb6:	af 90       	pop	r10
     cb8:	9f 90       	pop	r9
     cba:	8f 90       	pop	r8
     cbc:	7f 90       	pop	r7
     cbe:	6f 90       	pop	r6
     cc0:	f9 cd       	rjmp	.-1038   	; 0x8b4 <_ZN12FlashingBulbC1Ei>

00000cc2 <_ZN13MainOutSignal8SetImageENS_6ImagesEN12MainInSignal6ImagesE>:

	virtual ~MainOutSignal() {}

	void SetImage(Images img, MainInSignal::Images main_in_image) {
     cc2:	8f 92       	push	r8
     cc4:	9f 92       	push	r9
     cc6:	af 92       	push	r10
     cc8:	bf 92       	push	r11
     cca:	cf 92       	push	r12
     ccc:	df 92       	push	r13
     cce:	ef 92       	push	r14
     cd0:	ff 92       	push	r15
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	ec 01       	movw	r28, r24
     cdc:	8a 01       	movw	r16, r20
     cde:	02 96       	adiw	r24, 0x02	; 2
     ce0:	9e 01       	movw	r18, r28
     ce2:	25 5f       	subi	r18, 0xF5	; 245
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	49 01       	movw	r8, r18
     ce8:	27 5f       	subi	r18, 0xF7	; 247
     cea:	3f 4f       	sbci	r19, 0xFF	; 255
     cec:	59 01       	movw	r10, r18
     cee:	27 5f       	subi	r18, 0xF7	; 247
     cf0:	3f 4f       	sbci	r19, 0xFF	; 255
     cf2:	69 01       	movw	r12, r18
     cf4:	27 5f       	subi	r18, 0xF7	; 247
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	79 01       	movw	r14, r18
		switch(img) {
     cfa:	61 30       	cpi	r22, 0x01	; 1
     cfc:	71 05       	cpc	r23, r1
     cfe:	09 f4       	brne	.+2      	; 0xd02 <_ZN13MainOutSignal8SetImageENS_6ImagesEN12MainInSignal6ImagesE+0x40>
     d00:	46 c0       	rjmp	.+140    	; 0xd8e <_ZN13MainOutSignal8SetImageENS_6ImagesEN12MainInSignal6ImagesE+0xcc>
     d02:	62 30       	cpi	r22, 0x02	; 2
     d04:	71 05       	cpc	r23, r1
     d06:	21 f1       	breq	.+72     	; 0xd50 <_ZN13MainOutSignal8SetImageENS_6ImagesEN12MainInSignal6ImagesE+0x8e>
     d08:	67 2b       	or	r22, r23
     d0a:	09 f0       	breq	.+2      	; 0xd0e <_ZN13MainOutSignal8SetImageENS_6ImagesEN12MainInSignal6ImagesE+0x4c>
     d0c:	4d c0       	rjmp	.+154    	; 0xda8 <_ZN13MainOutSignal8SetImageENS_6ImagesEN12MainInSignal6ImagesE+0xe6>
		case Images::GREEN_STRAIGHT:
			m_s_top_green.Enable();
     d0e:	6a dc       	rcall	.-1836   	; 0x5e4 <_ZN4Bulb6EnableEv>
     d10:	c4 01       	movw	r24, r8
			m_s_center_red.Disable();
     d12:	74 dc       	rcall	.-1816   	; 0x5fc <_ZN4Bulb7DisableEv>
     d14:	c5 01       	movw	r24, r10
     d16:	66 dc       	rcall	.-1844   	; 0x5e4 <_ZN4Bulb6EnableEv>
			m_s_bottom_green.Enable();
     d18:	c6 01       	movw	r24, r12
     d1a:	70 dc       	rcall	.-1824   	; 0x5fc <_ZN4Bulb7DisableEv>
     d1c:	c7 01       	movw	r24, r14
			m_d_green.Disable();
     d1e:	62 dc       	rcall	.-1852   	; 0x5e4 <_ZN4Bulb6EnableEv>
     d20:	01 30       	cpi	r16, 0x01	; 1
     d22:	11 05       	cpc	r17, r1
			m_d_red.Enable();
     d24:	79 f4       	brne	.+30     	; 0xd44 <_ZN13MainOutSignal8SetImageENS_6ImagesEN12MainInSignal6ImagesE+0x82>
     d26:	ce 01       	movw	r24, r28
     d28:	8f 96       	adiw	r24, 0x2f	; 47
			if(main_in_image == MainInSignal::Images::RED)
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	ff 90       	pop	r15
			m_s_center_red.Disable();
			m_s_bottom_green.Disable();
			m_d_green.Disable();
			m_d_red.Disable();
		}
	}
     d34:	ef 90       	pop	r14
     d36:	df 90       	pop	r13
     d38:	cf 90       	pop	r12
     d3a:	bf 90       	pop	r11
     d3c:	af 90       	pop	r10
     d3e:	9f 90       	pop	r9
     d40:	8f 90       	pop	r8
     d42:	9d cd       	rjmp	.-1222   	; 0x87e <_ZN13DistantSignal8SetImageENS_6ImagesE.part.7>
     d44:	02 30       	cpi	r16, 0x02	; 2
     d46:	11 05       	cpc	r17, r1
     d48:	89 f4       	brne	.+34     	; 0xd6c <_ZN13MainOutSignal8SetImageENS_6ImagesEN12MainInSignal6ImagesE+0xaa>
     d4a:	62 e0       	ldi	r22, 0x02	; 2
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	10 c0       	rjmp	.+32     	; 0xd70 <_ZN13MainOutSignal8SetImageENS_6ImagesEN12MainInSignal6ImagesE+0xae>
			m_s_bottom_green.Enable();
			m_d_green.Disable();
			m_d_red.Enable();
			if(main_in_image == MainInSignal::Images::RED)
				m_distant.SetImage(DistantSignal::Images::NONE);
			else if(main_in_image == MainInSignal::Images::GREEN_DEVIATE)
     d50:	55 dc       	rcall	.-1878   	; 0x5fc <_ZN4Bulb7DisableEv>
     d52:	c4 01       	movw	r24, r8
     d54:	47 dc       	rcall	.-1906   	; 0x5e4 <_ZN4Bulb6EnableEv>
				m_distant.SetImage(DistantSignal::Images::ORANGE);
     d56:	c5 01       	movw	r24, r10
     d58:	51 dc       	rcall	.-1886   	; 0x5fc <_ZN4Bulb7DisableEv>
     d5a:	c6 01       	movw	r24, r12
				m_distant.SetImage(DistantSignal::Images::NONE);
			else
				m_distant.SetImage(DistantSignal::Images::ORANGE);
			break;
		case Images::GREEN_DEVIATE:
					m_s_top_green.Disable();
     d5c:	43 dc       	rcall	.-1914   	; 0x5e4 <_ZN4Bulb6EnableEv>
     d5e:	c7 01       	movw	r24, r14
					m_s_center_red.Enable();
     d60:	4d dc       	rcall	.-1894   	; 0x5fc <_ZN4Bulb7DisableEv>
     d62:	01 30       	cpi	r16, 0x01	; 1
     d64:	11 05       	cpc	r17, r1
					m_s_bottom_green.Disable();
     d66:	f9 f2       	breq	.-66     	; 0xd26 <_ZN13MainOutSignal8SetImageENS_6ImagesEN12MainInSignal6ImagesE+0x64>
     d68:	01 2b       	or	r16, r17
     d6a:	79 f3       	breq	.-34     	; 0xd4a <_ZN13MainOutSignal8SetImageENS_6ImagesEN12MainInSignal6ImagesE+0x88>
					m_d_green.Enable();
     d6c:	61 e0       	ldi	r22, 0x01	; 1
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	ce 01       	movw	r24, r28
					m_d_red.Disable();
     d72:	8f 96       	adiw	r24, 0x2f	; 47
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
					if(main_in_image == MainInSignal::Images::RED)
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	ff 90       	pop	r15
						m_distant.SetImage(DistantSignal::Images::NONE);
					else if(main_in_image == MainInSignal::Images::GREEN_STRAIGHT)
     d7e:	ef 90       	pop	r14
     d80:	df 90       	pop	r13
			if(main_in_image == MainInSignal::Images::RED)
				m_distant.SetImage(DistantSignal::Images::NONE);
			else if(main_in_image == MainInSignal::Images::GREEN_DEVIATE)
				m_distant.SetImage(DistantSignal::Images::ORANGE);
			else
				m_distant.SetImage(DistantSignal::Images::GREEN);
     d82:	cf 90       	pop	r12
     d84:	bf 90       	pop	r11
     d86:	af 90       	pop	r10
     d88:	9f 90       	pop	r9
			m_s_center_red.Disable();
			m_s_bottom_green.Disable();
			m_d_green.Disable();
			m_d_red.Disable();
		}
	}
     d8a:	8f 90       	pop	r8
     d8c:	aa ce       	rjmp	.-684    	; 0xae2 <_ZN13DistantSignal8SetImageENS_6ImagesE>
     d8e:	36 dc       	rcall	.-1940   	; 0x5fc <_ZN4Bulb7DisableEv>
     d90:	c4 01       	movw	r24, r8
     d92:	28 dc       	rcall	.-1968   	; 0x5e4 <_ZN4Bulb6EnableEv>
     d94:	c5 01       	movw	r24, r10
     d96:	32 dc       	rcall	.-1948   	; 0x5fc <_ZN4Bulb7DisableEv>
     d98:	c6 01       	movw	r24, r12
     d9a:	30 dc       	rcall	.-1952   	; 0x5fc <_ZN4Bulb7DisableEv>
     d9c:	c7 01       	movw	r24, r14
     d9e:	22 dc       	rcall	.-1980   	; 0x5e4 <_ZN4Bulb6EnableEv>
     da0:	01 30       	cpi	r16, 0x01	; 1
			if(main_in_image == MainInSignal::Images::RED)
				m_distant.SetImage(DistantSignal::Images::NONE);
			else if(main_in_image == MainInSignal::Images::GREEN_DEVIATE)
				m_distant.SetImage(DistantSignal::Images::ORANGE);
			else
				m_distant.SetImage(DistantSignal::Images::GREEN);
     da2:	11 05       	cpc	r17, r1
     da4:	91 f6       	brne	.-92     	; 0xd4a <_ZN13MainOutSignal8SetImageENS_6ImagesEN12MainInSignal6ImagesE+0x88>
			break;
		case Images::RED:
			m_s_top_green.Disable();
     da6:	bf cf       	rjmp	.-130    	; 0xd26 <_ZN13MainOutSignal8SetImageENS_6ImagesEN12MainInSignal6ImagesE+0x64>
     da8:	29 dc       	rcall	.-1966   	; 0x5fc <_ZN4Bulb7DisableEv>
			m_s_center_red.Enable();
     daa:	c4 01       	movw	r24, r8
     dac:	27 dc       	rcall	.-1970   	; 0x5fc <_ZN4Bulb7DisableEv>
     dae:	c5 01       	movw	r24, r10
			m_s_bottom_green.Disable();
     db0:	25 dc       	rcall	.-1974   	; 0x5fc <_ZN4Bulb7DisableEv>
     db2:	c6 01       	movw	r24, r12
     db4:	23 dc       	rcall	.-1978   	; 0x5fc <_ZN4Bulb7DisableEv>
			m_d_green.Disable();
     db6:	c7 01       	movw	r24, r14
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
			m_d_red.Enable();
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	ff 90       	pop	r15
			if(main_in_image == MainInSignal::Images::RED)
     dc2:	ef 90       	pop	r14
     dc4:	df 90       	pop	r13
     dc6:	cf 90       	pop	r12
     dc8:	bf 90       	pop	r11
						m_distant.SetImage(DistantSignal::Images::ORANGE);
					else
						m_distant.SetImage(DistantSignal::Images::GREEN);
					break;
		default:
			m_s_top_green.Disable();
     dca:	af 90       	pop	r10
     dcc:	9f 90       	pop	r9
			m_s_center_red.Disable();
     dce:	8f 90       	pop	r8
     dd0:	15 cc       	rjmp	.-2006   	; 0x5fc <_ZN4Bulb7DisableEv>

00000dd2 <_Z10set_imagesv>:
int b_dev_pin = 22; ///< Pin to read deviating outer turnout end B
int b_shift_pin = 52; ///< Pin to read user shift lock request end B

/** Helper function to update all signals with the images for the current station state */
void set_images()
{
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
	current_state->GetImages(images);
     dd6:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <current_state>
     dda:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <current_state+0x1>
     dde:	dc 01       	movw	r26, r24
     de0:	ed 91       	ld	r30, X+
     de2:	fc 91       	ld	r31, X
     de4:	06 80       	ldd	r0, Z+6	; 0x06
     de6:	f7 81       	ldd	r31, Z+7	; 0x07
     de8:	e0 2d       	mov	r30, r0
     dea:	67 ee       	ldi	r22, 0xE7	; 231
     dec:	72 e0       	ldi	r23, 0x02	; 2
     dee:	19 95       	eicall
	main_in_A.SetImage(images.a_in_image);
     df0:	c7 ee       	ldi	r28, 0xE7	; 231
     df2:	d2 e0       	ldi	r29, 0x02	; 2
     df4:	68 81       	ld	r22, Y
     df6:	79 81       	ldd	r23, Y+1	; 0x01
     df8:	86 e7       	ldi	r24, 0x76	; 118
     dfa:	94 e0       	ldi	r25, 0x04	; 4
     dfc:	92 de       	rcall	.-732    	; 0xb22 <_ZN12MainInSignal8SetImageENS_6ImagesE>
     dfe:	6a 81       	ldd	r22, Y+2	; 0x02
	main_in_B.SetImage(images.b_in_image);
     e00:	7b 81       	ldd	r23, Y+3	; 0x03
     e02:	8d e0       	ldi	r24, 0x0D	; 13
     e04:	94 e0       	ldi	r25, 0x04	; 4
     e06:	8d de       	rcall	.-742    	; 0xb22 <_ZN12MainInSignal8SetImageENS_6ImagesE>
     e08:	40 91 74 04 	lds	r20, 0x0474	; 0x800474 <main_in_B+0x67>
	main_out_A.SetImage(images.a_out_image, main_in_B.GetImage());
     e0c:	50 91 75 04 	lds	r21, 0x0475	; 0x800475 <main_in_B+0x68>
     e10:	6c 81       	ldd	r22, Y+4	; 0x04
     e12:	7d 81       	ldd	r23, Y+5	; 0x05
     e14:	86 ea       	ldi	r24, 0xA6	; 166
     e16:	93 e0       	ldi	r25, 0x03	; 3
     e18:	54 df       	rcall	.-344    	; 0xcc2 <_ZN13MainOutSignal8SetImageENS_6ImagesEN12MainInSignal6ImagesE>
     e1a:	40 91 dd 04 	lds	r20, 0x04DD	; 0x8004dd <main_in_A+0x67>
     e1e:	50 91 de 04 	lds	r21, 0x04DE	; 0x8004de <main_in_A+0x68>
	main_out_B.SetImage(images.b_out_image, main_in_A.GetImage());
     e22:	6e 81       	ldd	r22, Y+6	; 0x06
     e24:	7f 81       	ldd	r23, Y+7	; 0x07
     e26:	8f e3       	ldi	r24, 0x3F	; 63
     e28:	93 e0       	ldi	r25, 0x03	; 3
     e2a:	4b df       	rcall	.-362    	; 0xcc2 <_ZN13MainOutSignal8SetImageENS_6ImagesEN12MainInSignal6ImagesE>
     e2c:	68 85       	ldd	r22, Y+8	; 0x08
     e2e:	79 85       	ldd	r23, Y+9	; 0x09
     e30:	84 e3       	ldi	r24, 0x34	; 52
     e32:	93 e0       	ldi	r25, 0x03	; 3
	shift_A.SetImage(images.a_shift_image);
     e34:	50 de       	rcall	.-864    	; 0xad6 <_ZN9TallShift8SetImageENS_6ImagesE>
     e36:	6a 85       	ldd	r22, Y+10	; 0x0a
     e38:	7b 85       	ldd	r23, Y+11	; 0x0b
     e3a:	89 e2       	ldi	r24, 0x29	; 41
     e3c:	93 e0       	ldi	r25, 0x03	; 3
     e3e:	df 91       	pop	r29
	shift_B.SetImage(images.b_shift_image);
     e40:	cf 91       	pop	r28
     e42:	49 ce       	rjmp	.-878    	; 0xad6 <_ZN9TallShift8SetImageENS_6ImagesE>

00000e44 <_Z14update_signalsRKm>:
}

/** Helper function to update signals (flashing) */
void update_signals(const unsigned long &current_time)
{
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	ec 01       	movw	r28, r24
	main_in_A.Update(current_time);
     e4a:	48 81       	ld	r20, Y
     e4c:	59 81       	ldd	r21, Y+1	; 0x01
     e4e:	6a 81       	ldd	r22, Y+2	; 0x02
     e50:	7b 81       	ldd	r23, Y+3	; 0x03
     e52:	86 e7       	ldi	r24, 0x76	; 118
     e54:	94 e0       	ldi	r25, 0x04	; 4
     e56:	29 de       	rcall	.-942    	; 0xaaa <_ZN12MainInSignal6UpdateEm>
     e58:	48 81       	ld	r20, Y
	main_in_B.Update(current_time);
     e5a:	59 81       	ldd	r21, Y+1	; 0x01
     e5c:	6a 81       	ldd	r22, Y+2	; 0x02
     e5e:	7b 81       	ldd	r23, Y+3	; 0x03
     e60:	8d e0       	ldi	r24, 0x0D	; 13
     e62:	94 e0       	ldi	r25, 0x04	; 4
     e64:	22 de       	rcall	.-956    	; 0xaaa <_ZN12MainInSignal6UpdateEm>
     e66:	48 81       	ld	r20, Y
     e68:	59 81       	ldd	r21, Y+1	; 0x01
			m_d_red.Disable();
		}
	}

	void Update(const unsigned long current_time) override {
			m_distant.Update(current_time);
     e6a:	6a 81       	ldd	r22, Y+2	; 0x02
     e6c:	7b 81       	ldd	r23, Y+3	; 0x03
     e6e:	85 ed       	ldi	r24, 0xD5	; 213
     e70:	93 e0       	ldi	r25, 0x03	; 3
     e72:	03 de       	rcall	.-1018   	; 0xa7a <_ZN13DistantSignal6UpdateEm>
     e74:	48 81       	ld	r20, Y
     e76:	59 81       	ldd	r21, Y+1	; 0x01
     e78:	6a 81       	ldd	r22, Y+2	; 0x02
     e7a:	7b 81       	ldd	r23, Y+3	; 0x03
     e7c:	8e e6       	ldi	r24, 0x6E	; 110
     e7e:	93 e0       	ldi	r25, 0x03	; 3
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	fa cd       	rjmp	.-1036   	; 0xa7a <_ZN13DistantSignal6UpdateEm>

00000e86 <_Z17poll_logic_changev>:

/** Function to check if something has changed on the logical input ports
 *  Please note that the logic is inverted due to using internal pull-ups
 *  (pins defined as INPUT_PULLUP)
 */
bool poll_logic_change() {
     e86:	df 92       	push	r13
     e88:	ef 92       	push	r14
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
	LogicState c_logic_state;
	int a_in = digitalRead(a_in_pin);
     e94:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <a_in_pin>
     e98:	5d d4       	rcall	.+2234   	; 0x1754 <digitalRead>
     e9a:	7c 01       	movw	r14, r24
     e9c:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <a_out_pin>
	int a_out = digitalRead(a_out_pin);
     ea0:	59 d4       	rcall	.+2226   	; 0x1754 <digitalRead>
     ea2:	e1 14       	cp	r14, r1
     ea4:	f1 04       	cpc	r15, r1
	if(a_in==LOW)
     ea6:	29 f4       	brne	.+10     	; 0xeb2 <_Z17poll_logic_changev+0x2c>
     ea8:	89 2b       	or	r24, r25
     eaa:	69 f0       	breq	.+26     	; 0xec6 <_Z17poll_logic_changev+0x40>
		c_logic_state.switch_A = 1;
	if(a_out==LOW)
     eac:	01 e0       	ldi	r16, 0x01	; 1
     eae:	10 e0       	ldi	r17, 0x00	; 0
bool poll_logic_change() {
	LogicState c_logic_state;
	int a_in = digitalRead(a_in_pin);
	int a_out = digitalRead(a_out_pin);
	if(a_in==LOW)
		c_logic_state.switch_A = 1;
     eb0:	0c c0       	rjmp	.+24     	; 0xeca <_Z17poll_logic_changev+0x44>
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	41 f0       	breq	.+16     	; 0xec6 <_Z17poll_logic_changev+0x40>
	if(a_out==LOW)
     eb6:	ea 94       	dec	r14
     eb8:	ef 28       	or	r14, r15
		c_logic_state.switch_A = -1;
	if(a_in==HIGH && a_out==HIGH)
     eba:	39 f4       	brne	.+14     	; 0xeca <_Z17poll_logic_changev+0x44>
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	29 f4       	brne	.+10     	; 0xeca <_Z17poll_logic_changev+0x44>
     ec0:	00 e0       	ldi	r16, 0x00	; 0
     ec2:	10 e0       	ldi	r17, 0x00	; 0
		c_logic_state.switch_A = 0;
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <_Z17poll_logic_changev+0x44>
     ec6:	0f ef       	ldi	r16, 0xFF	; 255
     ec8:	1f ef       	ldi	r17, 0xFF	; 255
	int a_in = digitalRead(a_in_pin);
	int a_out = digitalRead(a_out_pin);
	if(a_in==LOW)
		c_logic_state.switch_A = 1;
	if(a_out==LOW)
		c_logic_state.switch_A = -1;
     eca:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <b_in_pin>
	if(a_in==HIGH && a_out==HIGH)
		c_logic_state.switch_A = 0;

	int b_in = digitalRead(b_in_pin);
     ece:	42 d4       	rcall	.+2180   	; 0x1754 <digitalRead>
     ed0:	7c 01       	movw	r14, r24
     ed2:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <b_out_pin>
     ed6:	3e d4       	rcall	.+2172   	; 0x1754 <digitalRead>
	int b_out = digitalRead(b_out_pin);
     ed8:	e1 14       	cp	r14, r1
     eda:	f1 04       	cpc	r15, r1
     edc:	29 f4       	brne	.+10     	; 0xee8 <_Z17poll_logic_changev+0x62>
     ede:	89 2b       	or	r24, r25
	if(b_in==LOW)
     ee0:	69 f0       	breq	.+26     	; 0xefc <_Z17poll_logic_changev+0x76>
     ee2:	cf ef       	ldi	r28, 0xFF	; 255
     ee4:	df ef       	ldi	r29, 0xFF	; 255
		c_logic_state.switch_B = -1;
	if(b_out==LOW)
     ee6:	0c c0       	rjmp	.+24     	; 0xf00 <_Z17poll_logic_changev+0x7a>
     ee8:	00 97       	sbiw	r24, 0x00	; 0
		c_logic_state.switch_A = 0;

	int b_in = digitalRead(b_in_pin);
	int b_out = digitalRead(b_out_pin);
	if(b_in==LOW)
		c_logic_state.switch_B = -1;
     eea:	41 f0       	breq	.+16     	; 0xefc <_Z17poll_logic_changev+0x76>
     eec:	ea 94       	dec	r14
     eee:	ef 28       	or	r14, r15
	if(b_out==LOW)
     ef0:	39 f4       	brne	.+14     	; 0xf00 <_Z17poll_logic_changev+0x7a>
     ef2:	01 97       	sbiw	r24, 0x01	; 1
		c_logic_state.switch_B = 1;
	if(b_in==HIGH && b_out==HIGH)
     ef4:	29 f4       	brne	.+10     	; 0xf00 <_Z17poll_logic_changev+0x7a>
     ef6:	c0 e0       	ldi	r28, 0x00	; 0
     ef8:	d0 e0       	ldi	r29, 0x00	; 0
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <_Z17poll_logic_changev+0x7a>
     efc:	c1 e0       	ldi	r28, 0x01	; 1
		c_logic_state.switch_B = 0;
     efe:	d0 e0       	ldi	r29, 0x00	; 0
     f00:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <a_dev_pin>
	int b_in = digitalRead(b_in_pin);
	int b_out = digitalRead(b_out_pin);
	if(b_in==LOW)
		c_logic_state.switch_B = -1;
	if(b_out==LOW)
		c_logic_state.switch_B = 1;
     f04:	27 d4       	rcall	.+2126   	; 0x1754 <digitalRead>
     f06:	dd 24       	eor	r13, r13
	if(b_in==HIGH && b_out==HIGH)
		c_logic_state.switch_B = 0;

	c_logic_state.turnout_A = (digitalRead(a_dev_pin)==LOW) ? true : false;
     f08:	d3 94       	inc	r13
     f0a:	89 2b       	or	r24, r25
     f0c:	09 f0       	breq	.+2      	; 0xf10 <_Z17poll_logic_changev+0x8a>
     f0e:	d1 2c       	mov	r13, r1
     f10:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <b_dev_pin>
     f14:	1f d4       	rcall	.+2110   	; 0x1754 <digitalRead>
     f16:	ee 24       	eor	r14, r14
     f18:	e3 94       	inc	r14
	c_logic_state.turnout_B = (digitalRead(b_dev_pin)==LOW) ? true : false;
     f1a:	89 2b       	or	r24, r25
     f1c:	09 f0       	breq	.+2      	; 0xf20 <_Z17poll_logic_changev+0x9a>
     f1e:	e1 2c       	mov	r14, r1
     f20:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <a_shift_pin>
     f24:	17 d4       	rcall	.+2094   	; 0x1754 <digitalRead>
     f26:	ff 24       	eor	r15, r15
     f28:	f3 94       	inc	r15
     f2a:	89 2b       	or	r24, r25
	c_logic_state.shift_A = (digitalRead(a_shift_pin)==LOW) ? true : false;
     f2c:	09 f0       	breq	.+2      	; 0xf30 <_Z17poll_logic_changev+0xaa>
     f2e:	f1 2c       	mov	r15, r1
     f30:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <b_shift_pin>
     f34:	0f d4       	rcall	.+2078   	; 0x1754 <digitalRead>
     f36:	21 e0       	ldi	r18, 0x01	; 1
     f38:	89 2b       	or	r24, r25
     f3a:	09 f0       	breq	.+2      	; 0xf3e <_Z17poll_logic_changev+0xb8>
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <__data_end>
     f42:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <__data_end+0x1>
     f46:	08 17       	cp	r16, r24
     f48:	19 07       	cpc	r17, r25
     f4a:	c9 f4       	brne	.+50     	; 0xf7e <_Z17poll_logic_changev+0xf8>
     f4c:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <__data_end+0x2>
	bool turnout_B;
	bool shift_A;
	bool shift_B;

	bool operator==(const LogicState & other) {
		if(switch_A == other.switch_A &&
     f50:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <__data_end+0x3>
     f54:	c8 17       	cp	r28, r24
     f56:	d9 07       	cpc	r29, r25
     f58:	91 f4       	brne	.+36     	; 0xf7e <_Z17poll_logic_changev+0xf8>
     f5a:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <__data_end+0x4>
     f5e:	d8 12       	cpse	r13, r24
     f60:	0e c0       	rjmp	.+28     	; 0xf7e <_Z17poll_logic_changev+0xf8>
     f62:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <__data_end+0x5>
     f66:	e8 12       	cpse	r14, r24
     f68:	0a c0       	rjmp	.+20     	; 0xf7e <_Z17poll_logic_changev+0xf8>
				switch_B == other.switch_B &&
     f6a:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <__data_end+0x6>
     f6e:	f8 12       	cpse	r15, r24
     f70:	06 c0       	rjmp	.+12     	; 0xf7e <_Z17poll_logic_changev+0xf8>
				turnout_A == other.turnout_A &&
     f72:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <__data_end+0x7>
     f76:	28 13       	cpse	r18, r24
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <_Z17poll_logic_changev+0xf8>
				turnout_B == other.turnout_B &&
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	11 c0       	rjmp	.+34     	; 0xfa0 <_Z17poll_logic_changev+0x11a>
     f7e:	10 93 b3 02 	sts	0x02B3, r17	; 0x8002b3 <__data_end+0x1>
     f82:	00 93 b2 02 	sts	0x02B2, r16	; 0x8002b2 <__data_end>
     f86:	d0 93 b5 02 	sts	0x02B5, r29	; 0x8002b5 <__data_end+0x3>
	if(c_logic_state != logic_state) {
		logic_state = c_logic_state;
		return true;
	}

	return false;
     f8a:	c0 93 b4 02 	sts	0x02B4, r28	; 0x8002b4 <__data_end+0x2>
	c_logic_state.turnout_B = (digitalRead(b_dev_pin)==LOW) ? true : false;
	c_logic_state.shift_A = (digitalRead(a_shift_pin)==LOW) ? true : false;
	c_logic_state.shift_B = (digitalRead(b_shift_pin)==LOW) ? true : false;

	if(c_logic_state != logic_state) {
		logic_state = c_logic_state;
     f8e:	d0 92 b6 02 	sts	0x02B6, r13	; 0x8002b6 <__data_end+0x4>
     f92:	e0 92 b7 02 	sts	0x02B7, r14	; 0x8002b7 <__data_end+0x5>
     f96:	f0 92 b8 02 	sts	0x02B8, r15	; 0x8002b8 <__data_end+0x6>
     f9a:	20 93 b9 02 	sts	0x02B9, r18	; 0x8002b9 <__data_end+0x7>
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	1f 91       	pop	r17
     fa6:	0f 91       	pop	r16
     fa8:	ff 90       	pop	r15
     faa:	ef 90       	pop	r14
     fac:	df 90       	pop	r13
		return true;
     fae:	08 95       	ret

00000fb0 <_Z12update_statev>:
	return false;
}
/** Helper function to check which of the station states fits the logical mask
 *  derived from the switches position
 */
bool update_state() {
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	0a eb       	ldi	r16, 0xBA	; 186
     fba:	12 e0       	ldi	r17, 0x02	; 2
	//iterate over state array and find which is active
	for(unsigned int i = 0; i < 7; ++i) {
     fbc:	c0 e0       	ldi	r28, 0x00	; 0
     fbe:	d0 e0       	ldi	r29, 0x00	; 0
		if(all_states[i]->IsValid(logic_state)) {
     fc0:	d8 01       	movw	r26, r16
     fc2:	8d 91       	ld	r24, X+
     fc4:	9d 91       	ld	r25, X+
     fc6:	8d 01       	movw	r16, r26
     fc8:	dc 01       	movw	r26, r24
     fca:	ed 91       	ld	r30, X+
     fcc:	fc 91       	ld	r31, X
     fce:	04 80       	ldd	r0, Z+4	; 0x04
     fd0:	f5 81       	ldd	r31, Z+5	; 0x05
     fd2:	e0 2d       	mov	r30, r0
     fd4:	62 eb       	ldi	r22, 0xB2	; 178
     fd6:	72 e0       	ldi	r23, 0x02	; 2
     fd8:	19 95       	eicall
     fda:	88 23       	and	r24, r24
     fdc:	39 f0       	breq	.+14     	; 0xfec <_Z12update_statev+0x3c>
			current_state = all_states[i];
     fde:	cc 0f       	add	r28, r28
     fe0:	dd 1f       	adc	r29, r29
     fe2:	c6 54       	subi	r28, 0x46	; 70
     fe4:	dd 4f       	sbci	r29, 0xFD	; 253
     fe6:	28 81       	ld	r18, Y
     fe8:	39 81       	ldd	r19, Y+1	; 0x01
     fea:	06 c0       	rjmp	.+12     	; 0xff8 <_Z12update_statev+0x48>
/** Helper function to check which of the station states fits the logical mask
 *  derived from the switches position
 */
bool update_state() {
	//iterate over state array and find which is active
	for(unsigned int i = 0; i < 7; ++i) {
     fec:	21 96       	adiw	r28, 0x01	; 1
     fee:	c7 30       	cpi	r28, 0x07	; 7
     ff0:	d1 05       	cpc	r29, r1
     ff2:	31 f7       	brne	.-52     	; 0xfc0 <_Z12update_statev+0x10>
			current_state = all_states[i];
			return true;
		}
	}
	//If no state is valid, default to normal state and return false
	current_state = (State *) &normal_state;
     ff4:	25 ee       	ldi	r18, 0xE5	; 229
     ff6:	32 e0       	ldi	r19, 0x02	; 2
     ff8:	30 93 17 02 	sts	0x0217, r19	; 0x800217 <current_state+0x1>
     ffc:	20 93 16 02 	sts	0x0216, r18	; 0x800216 <current_state>
	return false;
}
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	08 95       	ret

0000100a <_Z17initialize_statesv>:

/** Fill global state array with pointers to the different states. */
void initialize_states() {
	all_states[0] = (State *) &normal_state;
    100a:	ea eb       	ldi	r30, 0xBA	; 186
    100c:	f2 e0       	ldi	r31, 0x02	; 2
    100e:	85 ee       	ldi	r24, 0xE5	; 229
    1010:	92 e0       	ldi	r25, 0x02	; 2
    1012:	91 83       	std	Z+1, r25	; 0x01
    1014:	80 83       	st	Z, r24
	all_states[1] = (State *) &pass_state;
    1016:	8e ed       	ldi	r24, 0xDE	; 222
    1018:	92 e0       	ldi	r25, 0x02	; 2
    101a:	93 83       	std	Z+3, r25	; 0x03
    101c:	82 83       	std	Z+2, r24	; 0x02
	all_states[2] = (State *) &crossing_state;
    101e:	82 ee       	ldi	r24, 0xE2	; 226
    1020:	92 e0       	ldi	r25, 0x02	; 2
    1022:	95 83       	std	Z+5, r25	; 0x05
    1024:	84 83       	std	Z+4, r24	; 0x04
	all_states[3] = (State *) &in_to_stop_state;
    1026:	8a ed       	ldi	r24, 0xDA	; 218
    1028:	92 e0       	ldi	r25, 0x02	; 2
    102a:	97 83       	std	Z+7, r25	; 0x07
    102c:	86 83       	std	Z+6, r24	; 0x06
	all_states[4] = (State *) &out_state;
    102e:	84 ed       	ldi	r24, 0xD4	; 212
    1030:	92 e0       	ldi	r25, 0x02	; 2
    1032:	91 87       	std	Z+9, r25	; 0x09
    1034:	80 87       	std	Z+8, r24	; 0x08
	all_states[5] = (State *) &in_to_stop_out_state;
    1036:	80 ed       	ldi	r24, 0xD0	; 208
    1038:	92 e0       	ldi	r25, 0x02	; 2
    103a:	93 87       	std	Z+11, r25	; 0x0b
    103c:	82 87       	std	Z+10, r24	; 0x0a
	all_states[6] = (State *) &shifting_state;
    103e:	88 ec       	ldi	r24, 0xC8	; 200
    1040:	92 e0       	ldi	r25, 0x02	; 2
    1042:	95 87       	std	Z+13, r25	; 0x0d
    1044:	84 87       	std	Z+12, r24	; 0x0c
    1046:	08 95       	ret

00001048 <setup>:
}

/** Function that sets up all pin modes and sets the station in its normal state */
void setup(void)
{
	pinMode(a_in_pin, INPUT_PULLUP);
    1048:	62 e0       	ldi	r22, 0x02	; 2
    104a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <a_in_pin>
    104e:	17 d3       	rcall	.+1582   	; 0x167e <pinMode>
    1050:	62 e0       	ldi	r22, 0x02	; 2
	pinMode(a_out_pin, INPUT_PULLUP);
    1052:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <a_out_pin>
    1056:	13 d3       	rcall	.+1574   	; 0x167e <pinMode>
    1058:	62 e0       	ldi	r22, 0x02	; 2
    105a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <a_dev_pin>
	pinMode(a_dev_pin, INPUT_PULLUP);
    105e:	0f d3       	rcall	.+1566   	; 0x167e <pinMode>
    1060:	62 e0       	ldi	r22, 0x02	; 2
    1062:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <a_shift_pin>
	pinMode(a_shift_pin, INPUT_PULLUP);
    1066:	0b d3       	rcall	.+1558   	; 0x167e <pinMode>
    1068:	62 e0       	ldi	r22, 0x02	; 2
    106a:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <b_in_pin>
    106e:	07 d3       	rcall	.+1550   	; 0x167e <pinMode>

	pinMode(b_in_pin, INPUT_PULLUP);
    1070:	62 e0       	ldi	r22, 0x02	; 2
    1072:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <b_out_pin>
    1076:	03 d3       	rcall	.+1542   	; 0x167e <pinMode>
    1078:	62 e0       	ldi	r22, 0x02	; 2
	pinMode(b_out_pin, INPUT_PULLUP);
    107a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <b_dev_pin>
    107e:	ff d2       	rcall	.+1534   	; 0x167e <pinMode>
    1080:	62 e0       	ldi	r22, 0x02	; 2
    1082:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <b_shift_pin>
	pinMode(b_dev_pin, INPUT_PULLUP);
    1086:	fb d2       	rcall	.+1526   	; 0x167e <pinMode>
    1088:	ee e0       	ldi	r30, 0x0E	; 14
    108a:	f3 e0       	ldi	r31, 0x03	; 3
    108c:	14 86       	std	Z+12, r1	; 0x0c
    108e:	13 86       	std	Z+11, r1	; 0x0b
    1090:	16 86       	std	Z+14, r1	; 0x0e
    1092:	15 86       	std	Z+13, r1	; 0x0d
    1094:	e3 ef       	ldi	r30, 0xF3	; 243
    1096:	f2 e0       	ldi	r31, 0x02	; 2
	virtual void SetOnPwm(const unsigned int &on_pwm_value) {
		m_on_pwm_value = on_pwm_value;
	}

	virtual void SetFadeupTime(const unsigned int &fadeup_time) {
			m_fadeup_time = fadeup_time;
    1098:	14 86       	std	Z+12, r1	; 0x0c
    109a:	13 86       	std	Z+11, r1	; 0x0b
    109c:	16 86       	std	Z+14, r1	; 0x0e
    109e:	15 86       	std	Z+13, r1	; 0x0d
	}

	virtual void SetFadedownTime(const unsigned int &fadedown_time) {
				m_fadedown_time = fadedown_time;
    10a0:	b4 df       	rcall	.-152    	; 0x100a <_Z17initialize_statesv>
    10a2:	97 ce       	rjmp	.-722    	; 0xdd2 <_Z10set_imagesv>

000010a4 <_Z14set_error_ledsRKb>:
	set_images();
}

/** Function to set error LED states */
void set_error_leds(const bool &error) {
	if(error) {
    10a4:	fc 01       	movw	r30, r24
    10a6:	80 81       	ld	r24, Z
    10a8:	88 23       	and	r24, r24
    10aa:	29 f1       	breq	.+74     	; 0x10f6 <_Z14set_error_ledsRKb+0x52>
		error_led_a.Enable();
    10ac:	8e e0       	ldi	r24, 0x0E	; 14
    10ae:	93 e0       	ldi	r25, 0x03	; 3
    10b0:	99 da       	rcall	.-2766   	; 0x5e4 <_ZN4Bulb6EnableEv>
    10b2:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <__data_end>
		if(logic_state.switch_A)
    10b6:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <__data_end+0x1>
    10ba:	89 2b       	or	r24, r25
    10bc:	19 f0       	breq	.+6      	; 0x10c4 <_Z14set_error_ledsRKb+0x20>
    10be:	80 ed       	ldi	r24, 0xD0	; 208
				analogWrite(m_pin_no, brightness);
				m_prev_brightness = brightness;
			}
	}
	void SetFlashRate(const unsigned int &blink_interval) {
		m_blink_interval = blink_interval;
    10c0:	97 e0       	ldi	r25, 0x07	; 7
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <_Z14set_error_ledsRKb+0x24>
    10c4:	84 ef       	ldi	r24, 0xF4	; 244
    10c6:	91 e0       	ldi	r25, 0x01	; 1
    10c8:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <error_led_a+0xa>
    10cc:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <error_led_a+0x9>
    10d0:	83 ef       	ldi	r24, 0xF3	; 243
			error_led_a.SetFlashRate(2000);
		else
			error_led_a.SetFlashRate(500);

		error_led_b.Enable();
    10d2:	92 e0       	ldi	r25, 0x02	; 2
    10d4:	87 da       	rcall	.-2802   	; 0x5e4 <_ZN4Bulb6EnableEv>
    10d6:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <__data_end+0x2>
		if(logic_state.switch_B)
    10da:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <__data_end+0x3>
    10de:	89 2b       	or	r24, r25
    10e0:	19 f0       	breq	.+6      	; 0x10e8 <_Z14set_error_ledsRKb+0x44>
    10e2:	80 ed       	ldi	r24, 0xD0	; 208
    10e4:	97 e0       	ldi	r25, 0x07	; 7
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <_Z14set_error_ledsRKb+0x48>
    10e8:	84 ef       	ldi	r24, 0xF4	; 244
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <error_led_b+0xa>
    10f0:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <error_led_b+0x9>
    10f4:	08 95       	ret
    10f6:	8e e0       	ldi	r24, 0x0E	; 14
    10f8:	93 e0       	ldi	r25, 0x03	; 3
			error_led_b.SetFlashRate(2000);
		else
			error_led_b.SetFlashRate(500);
	} else {
		error_led_a.Disable();
    10fa:	80 da       	rcall	.-2816   	; 0x5fc <_ZN4Bulb7DisableEv>
    10fc:	83 ef       	ldi	r24, 0xF3	; 243
    10fe:	92 e0       	ldi	r25, 0x02	; 2
    1100:	7d ca       	rjmp	.-2822   	; 0x5fc <_ZN4Bulb7DisableEv>

00001102 <loop>:
	}
}

/** Main loop */
void loop(void)
{
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	00 d0       	rcall	.+0      	; 0x1108 <loop+0x6>
    1108:	1f 92       	push	r1
    110a:	1f 92       	push	r1
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
	const unsigned long current_time = millis();
    1110:	2d d1       	rcall	.+602    	; 0x136c <millis>
    1112:	69 83       	std	Y+1, r22	; 0x01
    1114:	7a 83       	std	Y+2, r23	; 0x02
    1116:	8b 83       	std	Y+3, r24	; 0x03
    1118:	9c 83       	std	Y+4, r25	; 0x04
    111a:	24 ef       	ldi	r18, 0xF4	; 244
	if(((current_time%logic_poll_interval) == 0) && poll_logic_change())/*short circuit evaluation*/ {
    111c:	31 e0       	ldi	r19, 0x01	; 1
    111e:	40 e0       	ldi	r20, 0x00	; 0
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	40 d3       	rcall	.+1664   	; 0x17a4 <__udivmodsi4>
    1124:	67 2b       	or	r22, r23
    1126:	68 2b       	or	r22, r24
    1128:	69 2b       	or	r22, r25
    112a:	19 f4       	brne	.+6      	; 0x1132 <loop+0x30>
    112c:	ac de       	rcall	.-680    	; 0xe86 <_Z17poll_logic_changev>
    112e:	81 11       	cpse	r24, r1
    1130:	0b c0       	rjmp	.+22     	; 0x1148 <loop+0x46>
    1132:	ce 01       	movw	r24, r28
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	86 de       	rcall	.-756    	; 0xe44 <_Z14update_signalsRKm>
		bool is_valid_state = update_state();
		set_error_leds(is_valid_state);
		set_images();
	}

	update_signals(current_time);
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
}
    1140:	0f 90       	pop	r0
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	08 95       	ret
    1148:	33 df       	rcall	.-410    	; 0xfb0 <_Z12update_statev>
    114a:	8d 83       	std	Y+5, r24	; 0x05
    114c:	ce 01       	movw	r24, r28
    114e:	05 96       	adiw	r24, 0x05	; 5
/** Main loop */
void loop(void)
{
	const unsigned long current_time = millis();
	if(((current_time%logic_poll_interval) == 0) && poll_logic_change())/*short circuit evaluation*/ {
		bool is_valid_state = update_state();
    1150:	a9 df       	rcall	.-174    	; 0x10a4 <_Z14set_error_ledsRKb>
    1152:	3f de       	rcall	.-898    	; 0xdd2 <_Z10set_imagesv>
    1154:	ee cf       	rjmp	.-36     	; 0x1132 <loop+0x30>

00001156 <_GLOBAL__sub_I_main_in_A>:
		set_error_leds(is_valid_state);
		set_images();
	}

	update_signals(current_time);
}
    1156:	af 92       	push	r10
    1158:	bf 92       	push	r11
    115a:	cf 92       	push	r12
    115c:	df 92       	push	r13
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
#include "signals.h"
#include "bulb_pindefs.h"
#include "states.h"

/** Global variables for the signals. Note that outbound signals are merged (2+3 light) */
MainInSignal main_in_A(A_IN_TOP_GREEN, A_IN_RED, A_IN_BOTTOM_GREEN, A_DISTANT_IN_GREEN, A_DISTANT_IN_ORANGE);
    116a:	83 e0       	ldi	r24, 0x03	; 3
    116c:	e8 2e       	mov	r14, r24
    116e:	f1 2c       	mov	r15, r1
    1170:	02 e0       	ldi	r16, 0x02	; 2
    1172:	10 e0       	ldi	r17, 0x00	; 0
    1174:	20 e2       	ldi	r18, 0x20	; 32
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	44 e0       	ldi	r20, 0x04	; 4
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	6e e1       	ldi	r22, 0x1E	; 30
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	86 e7       	ldi	r24, 0x76	; 118
    1182:	94 e0       	ldi	r25, 0x04	; 4
    1184:	18 dd       	rcall	.-1488   	; 0xbb6 <_ZN12MainInSignalC1Ejjjjj>
    1186:	99 e0       	ldi	r25, 0x09	; 9
MainInSignal main_in_B(B_IN_TOP_GREEN, B_IN_RED, B_IN_BOTTOM_GREEN, B_DISTANT_IN_GREEN, B_DISTANT_IN_ORANGE);
    1188:	e9 2e       	mov	r14, r25
    118a:	f1 2c       	mov	r15, r1
    118c:	08 e0       	ldi	r16, 0x08	; 8
    118e:	10 e0       	ldi	r17, 0x00	; 0
    1190:	21 e2       	ldi	r18, 0x21	; 33
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	4a e0       	ldi	r20, 0x0A	; 10
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	6f e1       	ldi	r22, 0x1F	; 31
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	8d e0       	ldi	r24, 0x0D	; 13
    119e:	94 e0       	ldi	r25, 0x04	; 4
    11a0:	0a dd       	rcall	.-1516   	; 0xbb6 <_ZN12MainInSignalC1Ejjjjj>
    11a2:	2c e0       	ldi	r18, 0x0C	; 12
    11a4:	a2 2e       	mov	r10, r18
MainOutSignal main_out_A(A_OUT_S_TOP_GREEN, A_OUT_S_RED, A_OUT_S_BOTTOM_GREEN, A_OUT_D_GREEN, A_OUT_D_RED, A_DISTANT_OUT_GREEN, A_DISTANT_OUT_ORANGE);
    11a6:	b1 2c       	mov	r11, r1
    11a8:	3b e0       	ldi	r19, 0x0B	; 11
    11aa:	c3 2e       	mov	r12, r19
    11ac:	d1 2c       	mov	r13, r1
    11ae:	4a e2       	ldi	r20, 0x2A	; 42
    11b0:	e4 2e       	mov	r14, r20
    11b2:	f1 2c       	mov	r15, r1
    11b4:	08 e2       	ldi	r16, 0x28	; 40
    11b6:	10 e0       	ldi	r17, 0x00	; 0
    11b8:	24 e2       	ldi	r18, 0x24	; 36
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	46 e2       	ldi	r20, 0x26	; 38
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	62 e2       	ldi	r22, 0x22	; 34
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	86 ea       	ldi	r24, 0xA6	; 166
    11c6:	93 e0       	ldi	r25, 0x03	; 3
    11c8:	37 dd       	rcall	.-1426   	; 0xc38 <_ZN13MainOutSignalC1Ejjjjjjj>
    11ca:	56 e0       	ldi	r21, 0x06	; 6
    11cc:	a5 2e       	mov	r10, r21
    11ce:	b1 2c       	mov	r11, r1
MainOutSignal main_out_B(B_OUT_S_TOP_GREEN, B_OUT_S_RED, B_OUT_S_BOTTOM_GREEN, B_OUT_D_GREEN, B_OUT_D_RED, B_DISTANT_OUT_GREEN, B_DISTANT_OUT_ORANGE);
    11d0:	65 e0       	ldi	r22, 0x05	; 5
    11d2:	c6 2e       	mov	r12, r22
    11d4:	d1 2c       	mov	r13, r1
    11d6:	7b e2       	ldi	r23, 0x2B	; 43
    11d8:	e7 2e       	mov	r14, r23
    11da:	f1 2c       	mov	r15, r1
    11dc:	09 e2       	ldi	r16, 0x29	; 41
    11de:	10 e0       	ldi	r17, 0x00	; 0
    11e0:	25 e2       	ldi	r18, 0x25	; 37
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	47 e2       	ldi	r20, 0x27	; 39
    11e6:	50 e0       	ldi	r21, 0x00	; 0
    11e8:	63 e2       	ldi	r22, 0x23	; 35
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	8f e3       	ldi	r24, 0x3F	; 63
    11ee:	93 e0       	ldi	r25, 0x03	; 3
    11f0:	23 dd       	rcall	.-1466   	; 0xc38 <_ZN13MainOutSignalC1Ejjjjjjj>
    11f2:	ca e3       	ldi	r28, 0x3A	; 58
    11f4:	d2 e0       	ldi	r29, 0x02	; 2
    11f6:	d0 93 35 03 	sts	0x0335, r29	; 0x800335 <shift_A+0x1>
public:
	enum class Images{
		OFF,
		ON
	};
	TallShift(unsigned int pin_no) : Signal(), m_bulb(pin_no) {}
    11fa:	c0 93 34 03 	sts	0x0334, r28	; 0x800334 <shift_A>
    11fe:	6c e2       	ldi	r22, 0x2C	; 44
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	86 e3       	ldi	r24, 0x36	; 54
    1204:	93 e0       	ldi	r25, 0x03	; 3
    1206:	45 db       	rcall	.-2422   	; 0x892 <_ZN4BulbC1Ei>
    1208:	d0 93 2a 03 	sts	0x032A, r29	; 0x80032a <shift_B+0x1>
    120c:	c0 93 29 03 	sts	0x0329, r28	; 0x800329 <shift_B>
    1210:	6d e2       	ldi	r22, 0x2D	; 45
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	8b e2       	ldi	r24, 0x2B	; 43
    1216:	93 e0       	ldi	r25, 0x03	; 3
    1218:	3c db       	rcall	.-2440   	; 0x892 <_ZN4BulbC1Ei>
    121a:	69 e1       	ldi	r22, 0x19	; 25
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	8e e0       	ldi	r24, 0x0E	; 14
    1220:	93 e0       	ldi	r25, 0x03	; 3
    1222:	48 db       	rcall	.-2416   	; 0x8b4 <_ZN12FlashingBulbC1Ei>
    1224:	67 e1       	ldi	r22, 0x17	; 23

/** Error LEDs - that flash at 2Hz when a dangerous situation is detected
 *  When a tall shift signal is lit, the error led at the respective end
 *  is flashing at 0.5Hz
 */
FlashingBulb error_led_a(A_ERROR_LED);
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	83 ef       	ldi	r24, 0xF3	; 243
    122a:	92 e0       	ldi	r25, 0x02	; 2
    122c:	43 db       	rcall	.-2426   	; 0x8b4 <_ZN12FlashingBulbC1Ei>
    122e:	82 e6       	ldi	r24, 0x62	; 98
    1230:	92 e0       	ldi	r25, 0x02	; 2
    1232:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <normal_state+0x1>
    1236:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <normal_state>
    123a:	e2 ee       	ldi	r30, 0xE2	; 226
    123c:	f2 e0       	ldi	r31, 0x02	; 2
};

/** Normal state: All signals red. Shift lights dimmed */
class NormalState : public State {
public:
	NormalState(){}
    123e:	8a e7       	ldi	r24, 0x7A	; 122
    1240:	92 e0       	ldi	r25, 0x02	; 2
    1242:	91 83       	std	Z+1, r25	; 0x01
    1244:	80 83       	st	Z, r24
    1246:	12 82       	std	Z+2, r1	; 0x02
    1248:	ee ed       	ldi	r30, 0xDE	; 222
	bool m_deviation;
};

class CrossingState : public State {
public:
	CrossingState(): State(), m_deviation_a(false){}
    124a:	f2 e0       	ldi	r31, 0x02	; 2
    124c:	8e e6       	ldi	r24, 0x6E	; 110
    124e:	92 e0       	ldi	r25, 0x02	; 2
    1250:	91 83       	std	Z+1, r25	; 0x01
    1252:	80 83       	st	Z, r24
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	82 83       	std	Z+2, r24	; 0x02
};

/** Passing state. */
class PassState : public State {
public:
	PassState(): State(), m_dir_is_ab(true), m_deviation(false){}
    1258:	13 82       	std	Z+3, r1	; 0x03
    125a:	ea ed       	ldi	r30, 0xDA	; 218
    125c:	f2 e0       	ldi	r31, 0x02	; 2
    125e:	26 e8       	ldi	r18, 0x86	; 134
    1260:	32 e0       	ldi	r19, 0x02	; 2
    1262:	31 83       	std	Z+1, r19	; 0x01
    1264:	20 83       	st	Z, r18
    1266:	82 83       	std	Z+2, r24	; 0x02
    1268:	13 82       	std	Z+3, r1	; 0x03
	bool m_deviation_a; ///< True of crossing train in direction AB is over deviating turnout
};

class InToStopState : public State {
public:
	InToStopState(): State(), m_dir_is_ab(true), m_deviation(false){}
    126a:	e4 ed       	ldi	r30, 0xD4	; 212
    126c:	f2 e0       	ldi	r31, 0x02	; 2
    126e:	22 e9       	ldi	r18, 0x92	; 146
    1270:	32 e0       	ldi	r19, 0x02	; 2
    1272:	31 83       	std	Z+1, r19	; 0x01
    1274:	20 83       	st	Z, r18
    1276:	82 83       	std	Z+2, r24	; 0x02
    1278:	83 83       	std	Z+3, r24	; 0x03
	bool m_deviation; ///< True of crossing train in direction AB is over deviating turnout
};

class OutState : public State {
public:
	OutState(): State(), m_out_a(true), m_out_b(true), m_dev_a(false), m_dev_b(false){}
    127a:	14 82       	std	Z+4, r1	; 0x04
    127c:	15 82       	std	Z+5, r1	; 0x05
    127e:	e0 ed       	ldi	r30, 0xD0	; 208
    1280:	f2 e0       	ldi	r31, 0x02	; 2
    1282:	2e e9       	ldi	r18, 0x9E	; 158
    1284:	32 e0       	ldi	r19, 0x02	; 2
    1286:	31 83       	std	Z+1, r19	; 0x01
    1288:	20 83       	st	Z, r18
    128a:	82 83       	std	Z+2, r24	; 0x02
    128c:	13 82       	std	Z+3, r1	; 0x03
	bool m_dev_b;
};

class InToStopOutState : public State {
public:
	InToStopOutState(): State(), m_in_a(true), m_deviation(false){}
    128e:	e8 ec       	ldi	r30, 0xC8	; 200
    1290:	f2 e0       	ldi	r31, 0x02	; 2
    1292:	8a ea       	ldi	r24, 0xAA	; 170
    1294:	92 e0       	ldi	r25, 0x02	; 2
    1296:	91 83       	std	Z+1, r25	; 0x01
    1298:	80 83       	st	Z, r24
    129a:	12 82       	std	Z+2, r1	; 0x02
    129c:	13 82       	std	Z+3, r1	; 0x03

class ShiftingState : public State {
public:
	ShiftingState(): State(), m_shift_a(false),m_shift_b(false),
			m_dev_a(false),m_dev_b(false),
			m_out_a(false), m_out_b(false){}
    129e:	14 82       	std	Z+4, r1	; 0x04
    12a0:	15 82       	std	Z+5, r1	; 0x05
    12a2:	16 82       	std	Z+6, r1	; 0x06
    12a4:	17 82       	std	Z+7, r1	; 0x07
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	df 90       	pop	r13
    12b4:	cf 90       	pop	r12
		set_error_leds(is_valid_state);
		set_images();
	}

	update_signals(current_time);
}
    12b6:	bf 90       	pop	r11
    12b8:	af 90       	pop	r10
    12ba:	08 95       	ret

000012bc <_GLOBAL__sub_D_main_in_A>:
    12bc:	08 95       	ret

000012be <initVariant>:
    12be:	08 95       	ret

000012c0 <main>:
    12c0:	61 d0       	rcall	.+194    	; 0x1384 <init>
    12c2:	fd df       	rcall	.-6      	; 0x12be <initVariant>
    12c4:	c1 de       	rcall	.-638    	; 0x1048 <setup>
    12c6:	c0 e0       	ldi	r28, 0x00	; 0
    12c8:	d0 e0       	ldi	r29, 0x00	; 0
    12ca:	1b df       	rcall	.-458    	; 0x1102 <loop>
    12cc:	20 97       	sbiw	r28, 0x00	; 0
    12ce:	e9 f3       	breq	.-6      	; 0x12ca <main+0xa>
    12d0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    12d4:	fa cf       	rjmp	.-12     	; 0x12ca <main+0xa>

000012d6 <_ZdlPv>:
    12d6:	14 c5       	rjmp	.+2600   	; 0x1d00 <free>

000012d8 <__vector_23>:
    12d8:	1f 92       	push	r1
    12da:	0f 92       	push	r0
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	0f 92       	push	r0
    12e0:	11 24       	eor	r1, r1
    12e2:	2f 93       	push	r18
    12e4:	3f 93       	push	r19
    12e6:	8f 93       	push	r24
    12e8:	9f 93       	push	r25
    12ea:	af 93       	push	r26
    12ec:	bf 93       	push	r27
    12ee:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <timer0_millis>
    12f2:	90 91 e1 04 	lds	r25, 0x04E1	; 0x8004e1 <timer0_millis+0x1>
    12f6:	a0 91 e2 04 	lds	r26, 0x04E2	; 0x8004e2 <timer0_millis+0x2>
    12fa:	b0 91 e3 04 	lds	r27, 0x04E3	; 0x8004e3 <timer0_millis+0x3>
    12fe:	30 91 df 04 	lds	r19, 0x04DF	; 0x8004df <timer0_fract>
    1302:	23 e0       	ldi	r18, 0x03	; 3
    1304:	23 0f       	add	r18, r19
    1306:	2d 37       	cpi	r18, 0x7D	; 125
    1308:	20 f4       	brcc	.+8      	; 0x1312 <__vector_23+0x3a>
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	a1 1d       	adc	r26, r1
    130e:	b1 1d       	adc	r27, r1
    1310:	05 c0       	rjmp	.+10     	; 0x131c <__vector_23+0x44>
    1312:	26 e8       	ldi	r18, 0x86	; 134
    1314:	23 0f       	add	r18, r19
    1316:	02 96       	adiw	r24, 0x02	; 2
    1318:	a1 1d       	adc	r26, r1
    131a:	b1 1d       	adc	r27, r1
    131c:	20 93 df 04 	sts	0x04DF, r18	; 0x8004df <timer0_fract>
    1320:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <timer0_millis>
    1324:	90 93 e1 04 	sts	0x04E1, r25	; 0x8004e1 <timer0_millis+0x1>
    1328:	a0 93 e2 04 	sts	0x04E2, r26	; 0x8004e2 <timer0_millis+0x2>
    132c:	b0 93 e3 04 	sts	0x04E3, r27	; 0x8004e3 <timer0_millis+0x3>
    1330:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <timer0_overflow_count>
    1334:	90 91 e5 04 	lds	r25, 0x04E5	; 0x8004e5 <timer0_overflow_count+0x1>
    1338:	a0 91 e6 04 	lds	r26, 0x04E6	; 0x8004e6 <timer0_overflow_count+0x2>
    133c:	b0 91 e7 04 	lds	r27, 0x04E7	; 0x8004e7 <timer0_overflow_count+0x3>
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	a1 1d       	adc	r26, r1
    1344:	b1 1d       	adc	r27, r1
    1346:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <timer0_overflow_count>
    134a:	90 93 e5 04 	sts	0x04E5, r25	; 0x8004e5 <timer0_overflow_count+0x1>
    134e:	a0 93 e6 04 	sts	0x04E6, r26	; 0x8004e6 <timer0_overflow_count+0x2>
    1352:	b0 93 e7 04 	sts	0x04E7, r27	; 0x8004e7 <timer0_overflow_count+0x3>
    1356:	bf 91       	pop	r27
    1358:	af 91       	pop	r26
    135a:	9f 91       	pop	r25
    135c:	8f 91       	pop	r24
    135e:	3f 91       	pop	r19
    1360:	2f 91       	pop	r18
    1362:	0f 90       	pop	r0
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	0f 90       	pop	r0
    1368:	1f 90       	pop	r1
    136a:	18 95       	reti

0000136c <millis>:
    136c:	2f b7       	in	r18, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	60 91 e0 04 	lds	r22, 0x04E0	; 0x8004e0 <timer0_millis>
    1374:	70 91 e1 04 	lds	r23, 0x04E1	; 0x8004e1 <timer0_millis+0x1>
    1378:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <timer0_millis+0x2>
    137c:	90 91 e3 04 	lds	r25, 0x04E3	; 0x8004e3 <timer0_millis+0x3>
    1380:	2f bf       	out	0x3f, r18	; 63
    1382:	08 95       	ret

00001384 <init>:
    1384:	78 94       	sei
    1386:	84 b5       	in	r24, 0x24	; 36
    1388:	82 60       	ori	r24, 0x02	; 2
    138a:	84 bd       	out	0x24, r24	; 36
    138c:	84 b5       	in	r24, 0x24	; 36
    138e:	81 60       	ori	r24, 0x01	; 1
    1390:	84 bd       	out	0x24, r24	; 36
    1392:	85 b5       	in	r24, 0x25	; 37
    1394:	82 60       	ori	r24, 0x02	; 2
    1396:	85 bd       	out	0x25, r24	; 37
    1398:	85 b5       	in	r24, 0x25	; 37
    139a:	81 60       	ori	r24, 0x01	; 1
    139c:	85 bd       	out	0x25, r24	; 37
    139e:	ee e6       	ldi	r30, 0x6E	; 110
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	81 60       	ori	r24, 0x01	; 1
    13a6:	80 83       	st	Z, r24
    13a8:	e1 e8       	ldi	r30, 0x81	; 129
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	10 82       	st	Z, r1
    13ae:	80 81       	ld	r24, Z
    13b0:	82 60       	ori	r24, 0x02	; 2
    13b2:	80 83       	st	Z, r24
    13b4:	80 81       	ld	r24, Z
    13b6:	81 60       	ori	r24, 0x01	; 1
    13b8:	80 83       	st	Z, r24
    13ba:	e0 e8       	ldi	r30, 0x80	; 128
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	81 60       	ori	r24, 0x01	; 1
    13c2:	80 83       	st	Z, r24
    13c4:	e1 eb       	ldi	r30, 0xB1	; 177
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	84 60       	ori	r24, 0x04	; 4
    13cc:	80 83       	st	Z, r24
    13ce:	e0 eb       	ldi	r30, 0xB0	; 176
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	81 60       	ori	r24, 0x01	; 1
    13d6:	80 83       	st	Z, r24
    13d8:	e1 e9       	ldi	r30, 0x91	; 145
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	82 60       	ori	r24, 0x02	; 2
    13e0:	80 83       	st	Z, r24
    13e2:	80 81       	ld	r24, Z
    13e4:	81 60       	ori	r24, 0x01	; 1
    13e6:	80 83       	st	Z, r24
    13e8:	e0 e9       	ldi	r30, 0x90	; 144
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	81 60       	ori	r24, 0x01	; 1
    13f0:	80 83       	st	Z, r24
    13f2:	e1 ea       	ldi	r30, 0xA1	; 161
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	82 60       	ori	r24, 0x02	; 2
    13fa:	80 83       	st	Z, r24
    13fc:	80 81       	ld	r24, Z
    13fe:	81 60       	ori	r24, 0x01	; 1
    1400:	80 83       	st	Z, r24
    1402:	e0 ea       	ldi	r30, 0xA0	; 160
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	81 60       	ori	r24, 0x01	; 1
    140a:	80 83       	st	Z, r24
    140c:	e1 e2       	ldi	r30, 0x21	; 33
    140e:	f1 e0       	ldi	r31, 0x01	; 1
    1410:	80 81       	ld	r24, Z
    1412:	82 60       	ori	r24, 0x02	; 2
    1414:	80 83       	st	Z, r24
    1416:	80 81       	ld	r24, Z
    1418:	81 60       	ori	r24, 0x01	; 1
    141a:	80 83       	st	Z, r24
    141c:	e0 e2       	ldi	r30, 0x20	; 32
    141e:	f1 e0       	ldi	r31, 0x01	; 1
    1420:	80 81       	ld	r24, Z
    1422:	81 60       	ori	r24, 0x01	; 1
    1424:	80 83       	st	Z, r24
    1426:	ea e7       	ldi	r30, 0x7A	; 122
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	84 60       	ori	r24, 0x04	; 4
    142e:	80 83       	st	Z, r24
    1430:	80 81       	ld	r24, Z
    1432:	82 60       	ori	r24, 0x02	; 2
    1434:	80 83       	st	Z, r24
    1436:	80 81       	ld	r24, Z
    1438:	81 60       	ori	r24, 0x01	; 1
    143a:	80 83       	st	Z, r24
    143c:	80 81       	ld	r24, Z
    143e:	80 68       	ori	r24, 0x80	; 128
    1440:	80 83       	st	Z, r24
    1442:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__stack+0x7fdec2>
    1446:	08 95       	ret

00001448 <analogWrite>:
    1448:	1f 93       	push	r17
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	18 2f       	mov	r17, r24
    1450:	eb 01       	movw	r28, r22
    1452:	61 e0       	ldi	r22, 0x01	; 1
    1454:	14 d1       	rcall	.+552    	; 0x167e <pinMode>
    1456:	20 97       	sbiw	r28, 0x00	; 0
    1458:	11 f4       	brne	.+4      	; 0x145e <analogWrite+0x16>
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	04 c0       	rjmp	.+8      	; 0x1466 <analogWrite+0x1e>
    145e:	cf 3f       	cpi	r28, 0xFF	; 255
    1460:	d1 05       	cpc	r29, r1
    1462:	31 f4       	brne	.+12     	; 0x1470 <analogWrite+0x28>
    1464:	61 e0       	ldi	r22, 0x01	; 1
    1466:	81 2f       	mov	r24, r17
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	1f 91       	pop	r17
    146e:	43 c1       	rjmp	.+646    	; 0x16f6 <digitalWrite>
    1470:	e1 2f       	mov	r30, r17
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	e4 5d       	subi	r30, 0xD4	; 212
    1476:	fe 4f       	sbci	r31, 0xFE	; 254
    1478:	e4 91       	lpm	r30, Z
    147a:	4e 2f       	mov	r20, r30
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	fa 01       	movw	r30, r20
    1480:	31 97       	sbiw	r30, 0x01	; 1
    1482:	e2 31       	cpi	r30, 0x12	; 18
    1484:	f1 05       	cpc	r31, r1
    1486:	08 f0       	brcs	.+2      	; 0x148a <analogWrite+0x42>
    1488:	9c c0       	rjmp	.+312    	; 0x15c2 <analogWrite+0x17a>
    148a:	88 27       	eor	r24, r24
    148c:	ee 58       	subi	r30, 0x8E	; 142
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	8f 4f       	sbci	r24, 0xFF	; 255
    1492:	aa c1       	rjmp	.+852    	; 0x17e8 <__tablejump2__>
    1494:	84 b5       	in	r24, 0x24	; 36
    1496:	80 68       	ori	r24, 0x80	; 128
    1498:	84 bd       	out	0x24, r24	; 36
    149a:	c7 bd       	out	0x27, r28	; 39
    149c:	97 c0       	rjmp	.+302    	; 0x15cc <analogWrite+0x184>
    149e:	84 b5       	in	r24, 0x24	; 36
    14a0:	80 62       	ori	r24, 0x20	; 32
    14a2:	84 bd       	out	0x24, r24	; 36
    14a4:	c8 bd       	out	0x28, r28	; 40
    14a6:	92 c0       	rjmp	.+292    	; 0x15cc <analogWrite+0x184>
    14a8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__stack+0x7fde81>
    14ac:	80 68       	ori	r24, 0x80	; 128
    14ae:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__stack+0x7fde81>
    14b2:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__stack+0x7fde8a>
    14b6:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__stack+0x7fde89>
    14ba:	88 c0       	rjmp	.+272    	; 0x15cc <analogWrite+0x184>
    14bc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__stack+0x7fde81>
    14c0:	80 62       	ori	r24, 0x20	; 32
    14c2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__stack+0x7fde81>
    14c6:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__stack+0x7fde8c>
    14ca:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__stack+0x7fde8b>
    14ce:	7e c0       	rjmp	.+252    	; 0x15cc <analogWrite+0x184>
    14d0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__stack+0x7fde81>
    14d4:	88 60       	ori	r24, 0x08	; 8
    14d6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__stack+0x7fde81>
    14da:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__stack+0x7fde8e>
    14de:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__stack+0x7fde8d>
    14e2:	74 c0       	rjmp	.+232    	; 0x15cc <analogWrite+0x184>
    14e4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__stack+0x7fdeb1>
    14e8:	80 68       	ori	r24, 0x80	; 128
    14ea:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__stack+0x7fdeb1>
    14ee:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__stack+0x7fdeb4>
    14f2:	6c c0       	rjmp	.+216    	; 0x15cc <analogWrite+0x184>
    14f4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__stack+0x7fdeb1>
    14f8:	80 62       	ori	r24, 0x20	; 32
    14fa:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__stack+0x7fdeb1>
    14fe:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__stack+0x7fdeb5>
    1502:	64 c0       	rjmp	.+200    	; 0x15cc <analogWrite+0x184>
    1504:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__stack+0x7fde91>
    1508:	80 68       	ori	r24, 0x80	; 128
    150a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__stack+0x7fde91>
    150e:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__stack+0x7fde9a>
    1512:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__stack+0x7fde99>
    1516:	5a c0       	rjmp	.+180    	; 0x15cc <analogWrite+0x184>
    1518:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__stack+0x7fde91>
    151c:	80 62       	ori	r24, 0x20	; 32
    151e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__stack+0x7fde91>
    1522:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__stack+0x7fde9c>
    1526:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__stack+0x7fde9b>
    152a:	50 c0       	rjmp	.+160    	; 0x15cc <analogWrite+0x184>
    152c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__stack+0x7fde91>
    1530:	88 60       	ori	r24, 0x08	; 8
    1532:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__stack+0x7fde91>
    1536:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__stack+0x7fde9e>
    153a:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__stack+0x7fde9d>
    153e:	46 c0       	rjmp	.+140    	; 0x15cc <analogWrite+0x184>
    1540:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__stack+0x7fdea1>
    1544:	80 68       	ori	r24, 0x80	; 128
    1546:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__stack+0x7fdea1>
    154a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__stack+0x7fdea1>
    154e:	8f 7b       	andi	r24, 0xBF	; 191
    1550:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__stack+0x7fdea1>
    1554:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__stack+0x7fdeaa>
    1558:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__stack+0x7fdea9>
    155c:	37 c0       	rjmp	.+110    	; 0x15cc <analogWrite+0x184>
    155e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__stack+0x7fdea1>
    1562:	80 62       	ori	r24, 0x20	; 32
    1564:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__stack+0x7fdea1>
    1568:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <__stack+0x7fdeac>
    156c:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <__stack+0x7fdeab>
    1570:	2d c0       	rjmp	.+90     	; 0x15cc <analogWrite+0x184>
    1572:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__stack+0x7fdea1>
    1576:	88 60       	ori	r24, 0x08	; 8
    1578:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__stack+0x7fdea1>
    157c:	d0 93 ad 00 	sts	0x00AD, r29	; 0x8000ad <__stack+0x7fdeae>
    1580:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <__stack+0x7fdead>
    1584:	23 c0       	rjmp	.+70     	; 0x15cc <analogWrite+0x184>
    1586:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__stack+0x7fdf21>
    158a:	80 68       	ori	r24, 0x80	; 128
    158c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__stack+0x7fdf21>
    1590:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__stack+0x7fdf2a>
    1594:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__stack+0x7fdf29>
    1598:	19 c0       	rjmp	.+50     	; 0x15cc <analogWrite+0x184>
    159a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__stack+0x7fdf21>
    159e:	80 62       	ori	r24, 0x20	; 32
    15a0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__stack+0x7fdf21>
    15a4:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__stack+0x7fdf2c>
    15a8:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__stack+0x7fdf2b>
    15ac:	0f c0       	rjmp	.+30     	; 0x15cc <analogWrite+0x184>
    15ae:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__stack+0x7fdf21>
    15b2:	88 60       	ori	r24, 0x08	; 8
    15b4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__stack+0x7fdf21>
    15b8:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__stack+0x7fdf2e>
    15bc:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__stack+0x7fdf2d>
    15c0:	05 c0       	rjmp	.+10     	; 0x15cc <analogWrite+0x184>
    15c2:	c0 38       	cpi	r28, 0x80	; 128
    15c4:	d1 05       	cpc	r29, r1
    15c6:	0c f0       	brlt	.+2      	; 0x15ca <analogWrite+0x182>
    15c8:	4d cf       	rjmp	.-358    	; 0x1464 <analogWrite+0x1c>
    15ca:	47 cf       	rjmp	.-370    	; 0x145a <analogWrite+0x12>
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	08 95       	ret

000015d4 <turnOffPWM>:
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	fc 01       	movw	r30, r24
    15d8:	31 97       	sbiw	r30, 0x01	; 1
    15da:	e2 31       	cpi	r30, 0x12	; 18
    15dc:	f1 05       	cpc	r31, r1
    15de:	08 f0       	brcs	.+2      	; 0x15e2 <turnOffPWM+0xe>
    15e0:	4d c0       	rjmp	.+154    	; 0x167c <turnOffPWM+0xa8>
    15e2:	88 27       	eor	r24, r24
    15e4:	ec 57       	subi	r30, 0x7C	; 124
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	8f 4f       	sbci	r24, 0xFF	; 255
    15ea:	fe c0       	rjmp	.+508    	; 0x17e8 <__tablejump2__>
    15ec:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__stack+0x7fde81>
    15f0:	8f 77       	andi	r24, 0x7F	; 127
    15f2:	03 c0       	rjmp	.+6      	; 0x15fa <turnOffPWM+0x26>
    15f4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__stack+0x7fde81>
    15f8:	8f 7d       	andi	r24, 0xDF	; 223
    15fa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__stack+0x7fde81>
    15fe:	08 95       	ret
    1600:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__stack+0x7fde81>
    1604:	87 7f       	andi	r24, 0xF7	; 247
    1606:	f9 cf       	rjmp	.-14     	; 0x15fa <turnOffPWM+0x26>
    1608:	84 b5       	in	r24, 0x24	; 36
    160a:	8f 77       	andi	r24, 0x7F	; 127
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <turnOffPWM+0x3e>
    160e:	84 b5       	in	r24, 0x24	; 36
    1610:	8f 7d       	andi	r24, 0xDF	; 223
    1612:	84 bd       	out	0x24, r24	; 36
    1614:	08 95       	ret
    1616:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__stack+0x7fdeb1>
    161a:	8f 77       	andi	r24, 0x7F	; 127
    161c:	03 c0       	rjmp	.+6      	; 0x1624 <turnOffPWM+0x50>
    161e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__stack+0x7fdeb1>
    1622:	8f 7d       	andi	r24, 0xDF	; 223
    1624:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__stack+0x7fdeb1>
    1628:	08 95       	ret
    162a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__stack+0x7fde91>
    162e:	8f 77       	andi	r24, 0x7F	; 127
    1630:	07 c0       	rjmp	.+14     	; 0x1640 <turnOffPWM+0x6c>
    1632:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__stack+0x7fde91>
    1636:	8f 7d       	andi	r24, 0xDF	; 223
    1638:	03 c0       	rjmp	.+6      	; 0x1640 <turnOffPWM+0x6c>
    163a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__stack+0x7fde91>
    163e:	87 7f       	andi	r24, 0xF7	; 247
    1640:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__stack+0x7fde91>
    1644:	08 95       	ret
    1646:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__stack+0x7fdea1>
    164a:	8f 77       	andi	r24, 0x7F	; 127
    164c:	07 c0       	rjmp	.+14     	; 0x165c <turnOffPWM+0x88>
    164e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__stack+0x7fdea1>
    1652:	8f 7d       	andi	r24, 0xDF	; 223
    1654:	03 c0       	rjmp	.+6      	; 0x165c <turnOffPWM+0x88>
    1656:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__stack+0x7fdea1>
    165a:	87 7f       	andi	r24, 0xF7	; 247
    165c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__stack+0x7fdea1>
    1660:	08 95       	ret
    1662:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__stack+0x7fdf21>
    1666:	8f 77       	andi	r24, 0x7F	; 127
    1668:	07 c0       	rjmp	.+14     	; 0x1678 <turnOffPWM+0xa4>
    166a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__stack+0x7fdf21>
    166e:	8f 7d       	andi	r24, 0xDF	; 223
    1670:	03 c0       	rjmp	.+6      	; 0x1678 <turnOffPWM+0xa4>
    1672:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__stack+0x7fdf21>
    1676:	87 7f       	andi	r24, 0xF7	; 247
    1678:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__stack+0x7fdf21>
    167c:	08 95       	ret

0000167e <pinMode>:
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	fc 01       	movw	r30, r24
    1686:	ee 58       	subi	r30, 0x8E	; 142
    1688:	fe 4f       	sbci	r31, 0xFE	; 254
    168a:	24 91       	lpm	r18, Z
    168c:	fc 01       	movw	r30, r24
    168e:	e8 54       	subi	r30, 0x48	; 72
    1690:	fe 4f       	sbci	r31, 0xFE	; 254
    1692:	84 91       	lpm	r24, Z
    1694:	88 23       	and	r24, r24
    1696:	61 f1       	breq	.+88     	; 0x16f0 <pinMode+0x72>
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	fc 01       	movw	r30, r24
    16a0:	ee 5c       	subi	r30, 0xCE	; 206
    16a2:	fd 4f       	sbci	r31, 0xFD	; 253
    16a4:	c5 91       	lpm	r28, Z+
    16a6:	d4 91       	lpm	r29, Z
    16a8:	fc 01       	movw	r30, r24
    16aa:	e8 5e       	subi	r30, 0xE8	; 232
    16ac:	fd 4f       	sbci	r31, 0xFD	; 253
    16ae:	a5 91       	lpm	r26, Z+
    16b0:	b4 91       	lpm	r27, Z
    16b2:	61 11       	cpse	r22, r1
    16b4:	09 c0       	rjmp	.+18     	; 0x16c8 <pinMode+0x4a>
    16b6:	9f b7       	in	r25, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	88 81       	ld	r24, Y
    16bc:	20 95       	com	r18
    16be:	82 23       	and	r24, r18
    16c0:	88 83       	st	Y, r24
    16c2:	ec 91       	ld	r30, X
    16c4:	2e 23       	and	r18, r30
    16c6:	0b c0       	rjmp	.+22     	; 0x16de <pinMode+0x60>
    16c8:	62 30       	cpi	r22, 0x02	; 2
    16ca:	61 f4       	brne	.+24     	; 0x16e4 <pinMode+0x66>
    16cc:	9f b7       	in	r25, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	38 81       	ld	r19, Y
    16d2:	82 2f       	mov	r24, r18
    16d4:	80 95       	com	r24
    16d6:	83 23       	and	r24, r19
    16d8:	88 83       	st	Y, r24
    16da:	ec 91       	ld	r30, X
    16dc:	2e 2b       	or	r18, r30
    16de:	2c 93       	st	X, r18
    16e0:	9f bf       	out	0x3f, r25	; 63
    16e2:	06 c0       	rjmp	.+12     	; 0x16f0 <pinMode+0x72>
    16e4:	8f b7       	in	r24, 0x3f	; 63
    16e6:	f8 94       	cli
    16e8:	e8 81       	ld	r30, Y
    16ea:	2e 2b       	or	r18, r30
    16ec:	28 83       	st	Y, r18
    16ee:	8f bf       	out	0x3f, r24	; 63
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	08 95       	ret

000016f6 <digitalWrite>:
    16f6:	1f 93       	push	r17
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	f9 01       	movw	r30, r18
    1702:	e4 5d       	subi	r30, 0xD4	; 212
    1704:	fe 4f       	sbci	r31, 0xFE	; 254
    1706:	84 91       	lpm	r24, Z
    1708:	f9 01       	movw	r30, r18
    170a:	ee 58       	subi	r30, 0x8E	; 142
    170c:	fe 4f       	sbci	r31, 0xFE	; 254
    170e:	d4 91       	lpm	r29, Z
    1710:	f9 01       	movw	r30, r18
    1712:	e8 54       	subi	r30, 0x48	; 72
    1714:	fe 4f       	sbci	r31, 0xFE	; 254
    1716:	c4 91       	lpm	r28, Z
    1718:	cc 23       	and	r28, r28
    171a:	c1 f0       	breq	.+48     	; 0x174c <digitalWrite+0x56>
    171c:	16 2f       	mov	r17, r22
    171e:	81 11       	cpse	r24, r1
    1720:	59 df       	rcall	.-334    	; 0x15d4 <turnOffPWM>
    1722:	ec 2f       	mov	r30, r28
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	ee 0f       	add	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	e8 5e       	subi	r30, 0xE8	; 232
    172c:	fd 4f       	sbci	r31, 0xFD	; 253
    172e:	a5 91       	lpm	r26, Z+
    1730:	b4 91       	lpm	r27, Z
    1732:	8f b7       	in	r24, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	11 11       	cpse	r17, r1
    1738:	05 c0       	rjmp	.+10     	; 0x1744 <digitalWrite+0x4e>
    173a:	9c 91       	ld	r25, X
    173c:	ed 2f       	mov	r30, r29
    173e:	e0 95       	com	r30
    1740:	e9 23       	and	r30, r25
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <digitalWrite+0x52>
    1744:	ec 91       	ld	r30, X
    1746:	ed 2b       	or	r30, r29
    1748:	ec 93       	st	X, r30
    174a:	8f bf       	out	0x3f, r24	; 63
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	1f 91       	pop	r17
    1752:	08 95       	ret

00001754 <digitalRead>:
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	f9 01       	movw	r30, r18
    175e:	e4 5d       	subi	r30, 0xD4	; 212
    1760:	fe 4f       	sbci	r31, 0xFE	; 254
    1762:	84 91       	lpm	r24, Z
    1764:	f9 01       	movw	r30, r18
    1766:	ee 58       	subi	r30, 0x8E	; 142
    1768:	fe 4f       	sbci	r31, 0xFE	; 254
    176a:	d4 91       	lpm	r29, Z
    176c:	f9 01       	movw	r30, r18
    176e:	e8 54       	subi	r30, 0x48	; 72
    1770:	fe 4f       	sbci	r31, 0xFE	; 254
    1772:	c4 91       	lpm	r28, Z
    1774:	cc 23       	and	r28, r28
    1776:	89 f0       	breq	.+34     	; 0x179a <digitalRead+0x46>
    1778:	81 11       	cpse	r24, r1
    177a:	2c df       	rcall	.-424    	; 0x15d4 <turnOffPWM>
    177c:	ec 2f       	mov	r30, r28
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	ee 0f       	add	r30, r30
    1782:	ff 1f       	adc	r31, r31
    1784:	e2 50       	subi	r30, 0x02	; 2
    1786:	fe 4f       	sbci	r31, 0xFE	; 254
    1788:	a5 91       	lpm	r26, Z+
    178a:	b4 91       	lpm	r27, Z
    178c:	ec 91       	ld	r30, X
    178e:	ed 23       	and	r30, r29
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	21 f4       	brne	.+8      	; 0x179e <digitalRead+0x4a>
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	02 c0       	rjmp	.+4      	; 0x179e <digitalRead+0x4a>
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	08 95       	ret

000017a4 <__udivmodsi4>:
    17a4:	a1 e2       	ldi	r26, 0x21	; 33
    17a6:	1a 2e       	mov	r1, r26
    17a8:	aa 1b       	sub	r26, r26
    17aa:	bb 1b       	sub	r27, r27
    17ac:	fd 01       	movw	r30, r26
    17ae:	0d c0       	rjmp	.+26     	; 0x17ca <__udivmodsi4_ep>

000017b0 <__udivmodsi4_loop>:
    17b0:	aa 1f       	adc	r26, r26
    17b2:	bb 1f       	adc	r27, r27
    17b4:	ee 1f       	adc	r30, r30
    17b6:	ff 1f       	adc	r31, r31
    17b8:	a2 17       	cp	r26, r18
    17ba:	b3 07       	cpc	r27, r19
    17bc:	e4 07       	cpc	r30, r20
    17be:	f5 07       	cpc	r31, r21
    17c0:	20 f0       	brcs	.+8      	; 0x17ca <__udivmodsi4_ep>
    17c2:	a2 1b       	sub	r26, r18
    17c4:	b3 0b       	sbc	r27, r19
    17c6:	e4 0b       	sbc	r30, r20
    17c8:	f5 0b       	sbc	r31, r21

000017ca <__udivmodsi4_ep>:
    17ca:	66 1f       	adc	r22, r22
    17cc:	77 1f       	adc	r23, r23
    17ce:	88 1f       	adc	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	1a 94       	dec	r1
    17d4:	69 f7       	brne	.-38     	; 0x17b0 <__udivmodsi4_loop>
    17d6:	60 95       	com	r22
    17d8:	70 95       	com	r23
    17da:	80 95       	com	r24
    17dc:	90 95       	com	r25
    17de:	9b 01       	movw	r18, r22
    17e0:	ac 01       	movw	r20, r24
    17e2:	bd 01       	movw	r22, r26
    17e4:	cf 01       	movw	r24, r30
    17e6:	08 95       	ret

000017e8 <__tablejump2__>:
    17e8:	ee 0f       	add	r30, r30
    17ea:	ff 1f       	adc	r31, r31
    17ec:	88 1f       	adc	r24, r24
    17ee:	8b bf       	out	0x3b, r24	; 59
    17f0:	07 90       	elpm	r0, Z+
    17f2:	f6 91       	elpm	r31, Z
    17f4:	e0 2d       	mov	r30, r0
    17f6:	19 94       	eijmp

000017f8 <__subsf3>:
    17f8:	50 58       	subi	r21, 0x80	; 128

000017fa <__addsf3>:
    17fa:	bb 27       	eor	r27, r27
    17fc:	aa 27       	eor	r26, r26
    17fe:	0e d0       	rcall	.+28     	; 0x181c <__addsf3x>
    1800:	4d c1       	rjmp	.+666    	; 0x1a9c <__fp_round>
    1802:	3e d1       	rcall	.+636    	; 0x1a80 <__fp_pscA>
    1804:	30 f0       	brcs	.+12     	; 0x1812 <__addsf3+0x18>
    1806:	43 d1       	rcall	.+646    	; 0x1a8e <__fp_pscB>
    1808:	20 f0       	brcs	.+8      	; 0x1812 <__addsf3+0x18>
    180a:	31 f4       	brne	.+12     	; 0x1818 <__addsf3+0x1e>
    180c:	9f 3f       	cpi	r25, 0xFF	; 255
    180e:	11 f4       	brne	.+4      	; 0x1814 <__addsf3+0x1a>
    1810:	1e f4       	brtc	.+6      	; 0x1818 <__addsf3+0x1e>
    1812:	33 c1       	rjmp	.+614    	; 0x1a7a <__fp_nan>
    1814:	0e f4       	brtc	.+2      	; 0x1818 <__addsf3+0x1e>
    1816:	e0 95       	com	r30
    1818:	e7 fb       	bst	r30, 7
    181a:	29 c1       	rjmp	.+594    	; 0x1a6e <__fp_inf>

0000181c <__addsf3x>:
    181c:	e9 2f       	mov	r30, r25
    181e:	4f d1       	rcall	.+670    	; 0x1abe <__fp_split3>
    1820:	80 f3       	brcs	.-32     	; 0x1802 <__addsf3+0x8>
    1822:	ba 17       	cp	r27, r26
    1824:	62 07       	cpc	r22, r18
    1826:	73 07       	cpc	r23, r19
    1828:	84 07       	cpc	r24, r20
    182a:	95 07       	cpc	r25, r21
    182c:	18 f0       	brcs	.+6      	; 0x1834 <__addsf3x+0x18>
    182e:	71 f4       	brne	.+28     	; 0x184c <__addsf3x+0x30>
    1830:	9e f5       	brtc	.+102    	; 0x1898 <__addsf3x+0x7c>
    1832:	67 c1       	rjmp	.+718    	; 0x1b02 <__fp_zero>
    1834:	0e f4       	brtc	.+2      	; 0x1838 <__addsf3x+0x1c>
    1836:	e0 95       	com	r30
    1838:	0b 2e       	mov	r0, r27
    183a:	ba 2f       	mov	r27, r26
    183c:	a0 2d       	mov	r26, r0
    183e:	0b 01       	movw	r0, r22
    1840:	b9 01       	movw	r22, r18
    1842:	90 01       	movw	r18, r0
    1844:	0c 01       	movw	r0, r24
    1846:	ca 01       	movw	r24, r20
    1848:	a0 01       	movw	r20, r0
    184a:	11 24       	eor	r1, r1
    184c:	ff 27       	eor	r31, r31
    184e:	59 1b       	sub	r21, r25
    1850:	99 f0       	breq	.+38     	; 0x1878 <__addsf3x+0x5c>
    1852:	59 3f       	cpi	r21, 0xF9	; 249
    1854:	50 f4       	brcc	.+20     	; 0x186a <__addsf3x+0x4e>
    1856:	50 3e       	cpi	r21, 0xE0	; 224
    1858:	68 f1       	brcs	.+90     	; 0x18b4 <__addsf3x+0x98>
    185a:	1a 16       	cp	r1, r26
    185c:	f0 40       	sbci	r31, 0x00	; 0
    185e:	a2 2f       	mov	r26, r18
    1860:	23 2f       	mov	r18, r19
    1862:	34 2f       	mov	r19, r20
    1864:	44 27       	eor	r20, r20
    1866:	58 5f       	subi	r21, 0xF8	; 248
    1868:	f3 cf       	rjmp	.-26     	; 0x1850 <__addsf3x+0x34>
    186a:	46 95       	lsr	r20
    186c:	37 95       	ror	r19
    186e:	27 95       	ror	r18
    1870:	a7 95       	ror	r26
    1872:	f0 40       	sbci	r31, 0x00	; 0
    1874:	53 95       	inc	r21
    1876:	c9 f7       	brne	.-14     	; 0x186a <__addsf3x+0x4e>
    1878:	7e f4       	brtc	.+30     	; 0x1898 <__addsf3x+0x7c>
    187a:	1f 16       	cp	r1, r31
    187c:	ba 0b       	sbc	r27, r26
    187e:	62 0b       	sbc	r22, r18
    1880:	73 0b       	sbc	r23, r19
    1882:	84 0b       	sbc	r24, r20
    1884:	ba f0       	brmi	.+46     	; 0x18b4 <__addsf3x+0x98>
    1886:	91 50       	subi	r25, 0x01	; 1
    1888:	a1 f0       	breq	.+40     	; 0x18b2 <__addsf3x+0x96>
    188a:	ff 0f       	add	r31, r31
    188c:	bb 1f       	adc	r27, r27
    188e:	66 1f       	adc	r22, r22
    1890:	77 1f       	adc	r23, r23
    1892:	88 1f       	adc	r24, r24
    1894:	c2 f7       	brpl	.-16     	; 0x1886 <__addsf3x+0x6a>
    1896:	0e c0       	rjmp	.+28     	; 0x18b4 <__addsf3x+0x98>
    1898:	ba 0f       	add	r27, r26
    189a:	62 1f       	adc	r22, r18
    189c:	73 1f       	adc	r23, r19
    189e:	84 1f       	adc	r24, r20
    18a0:	48 f4       	brcc	.+18     	; 0x18b4 <__addsf3x+0x98>
    18a2:	87 95       	ror	r24
    18a4:	77 95       	ror	r23
    18a6:	67 95       	ror	r22
    18a8:	b7 95       	ror	r27
    18aa:	f7 95       	ror	r31
    18ac:	9e 3f       	cpi	r25, 0xFE	; 254
    18ae:	08 f0       	brcs	.+2      	; 0x18b2 <__addsf3x+0x96>
    18b0:	b3 cf       	rjmp	.-154    	; 0x1818 <__addsf3+0x1e>
    18b2:	93 95       	inc	r25
    18b4:	88 0f       	add	r24, r24
    18b6:	08 f0       	brcs	.+2      	; 0x18ba <__addsf3x+0x9e>
    18b8:	99 27       	eor	r25, r25
    18ba:	ee 0f       	add	r30, r30
    18bc:	97 95       	ror	r25
    18be:	87 95       	ror	r24
    18c0:	08 95       	ret

000018c2 <__divsf3>:
    18c2:	0c d0       	rcall	.+24     	; 0x18dc <__divsf3x>
    18c4:	eb c0       	rjmp	.+470    	; 0x1a9c <__fp_round>
    18c6:	e3 d0       	rcall	.+454    	; 0x1a8e <__fp_pscB>
    18c8:	40 f0       	brcs	.+16     	; 0x18da <__divsf3+0x18>
    18ca:	da d0       	rcall	.+436    	; 0x1a80 <__fp_pscA>
    18cc:	30 f0       	brcs	.+12     	; 0x18da <__divsf3+0x18>
    18ce:	21 f4       	brne	.+8      	; 0x18d8 <__divsf3+0x16>
    18d0:	5f 3f       	cpi	r21, 0xFF	; 255
    18d2:	19 f0       	breq	.+6      	; 0x18da <__divsf3+0x18>
    18d4:	cc c0       	rjmp	.+408    	; 0x1a6e <__fp_inf>
    18d6:	51 11       	cpse	r21, r1
    18d8:	15 c1       	rjmp	.+554    	; 0x1b04 <__fp_szero>
    18da:	cf c0       	rjmp	.+414    	; 0x1a7a <__fp_nan>

000018dc <__divsf3x>:
    18dc:	f0 d0       	rcall	.+480    	; 0x1abe <__fp_split3>
    18de:	98 f3       	brcs	.-26     	; 0x18c6 <__divsf3+0x4>

000018e0 <__divsf3_pse>:
    18e0:	99 23       	and	r25, r25
    18e2:	c9 f3       	breq	.-14     	; 0x18d6 <__divsf3+0x14>
    18e4:	55 23       	and	r21, r21
    18e6:	b1 f3       	breq	.-20     	; 0x18d4 <__divsf3+0x12>
    18e8:	95 1b       	sub	r25, r21
    18ea:	55 0b       	sbc	r21, r21
    18ec:	bb 27       	eor	r27, r27
    18ee:	aa 27       	eor	r26, r26
    18f0:	62 17       	cp	r22, r18
    18f2:	73 07       	cpc	r23, r19
    18f4:	84 07       	cpc	r24, r20
    18f6:	38 f0       	brcs	.+14     	; 0x1906 <__divsf3_pse+0x26>
    18f8:	9f 5f       	subi	r25, 0xFF	; 255
    18fa:	5f 4f       	sbci	r21, 0xFF	; 255
    18fc:	22 0f       	add	r18, r18
    18fe:	33 1f       	adc	r19, r19
    1900:	44 1f       	adc	r20, r20
    1902:	aa 1f       	adc	r26, r26
    1904:	a9 f3       	breq	.-22     	; 0x18f0 <__divsf3_pse+0x10>
    1906:	33 d0       	rcall	.+102    	; 0x196e <__divsf3_pse+0x8e>
    1908:	0e 2e       	mov	r0, r30
    190a:	3a f0       	brmi	.+14     	; 0x191a <__divsf3_pse+0x3a>
    190c:	e0 e8       	ldi	r30, 0x80	; 128
    190e:	30 d0       	rcall	.+96     	; 0x1970 <__divsf3_pse+0x90>
    1910:	91 50       	subi	r25, 0x01	; 1
    1912:	50 40       	sbci	r21, 0x00	; 0
    1914:	e6 95       	lsr	r30
    1916:	00 1c       	adc	r0, r0
    1918:	ca f7       	brpl	.-14     	; 0x190c <__divsf3_pse+0x2c>
    191a:	29 d0       	rcall	.+82     	; 0x196e <__divsf3_pse+0x8e>
    191c:	fe 2f       	mov	r31, r30
    191e:	27 d0       	rcall	.+78     	; 0x196e <__divsf3_pse+0x8e>
    1920:	66 0f       	add	r22, r22
    1922:	77 1f       	adc	r23, r23
    1924:	88 1f       	adc	r24, r24
    1926:	bb 1f       	adc	r27, r27
    1928:	26 17       	cp	r18, r22
    192a:	37 07       	cpc	r19, r23
    192c:	48 07       	cpc	r20, r24
    192e:	ab 07       	cpc	r26, r27
    1930:	b0 e8       	ldi	r27, 0x80	; 128
    1932:	09 f0       	breq	.+2      	; 0x1936 <__divsf3_pse+0x56>
    1934:	bb 0b       	sbc	r27, r27
    1936:	80 2d       	mov	r24, r0
    1938:	bf 01       	movw	r22, r30
    193a:	ff 27       	eor	r31, r31
    193c:	93 58       	subi	r25, 0x83	; 131
    193e:	5f 4f       	sbci	r21, 0xFF	; 255
    1940:	2a f0       	brmi	.+10     	; 0x194c <__divsf3_pse+0x6c>
    1942:	9e 3f       	cpi	r25, 0xFE	; 254
    1944:	51 05       	cpc	r21, r1
    1946:	68 f0       	brcs	.+26     	; 0x1962 <__divsf3_pse+0x82>
    1948:	92 c0       	rjmp	.+292    	; 0x1a6e <__fp_inf>
    194a:	dc c0       	rjmp	.+440    	; 0x1b04 <__fp_szero>
    194c:	5f 3f       	cpi	r21, 0xFF	; 255
    194e:	ec f3       	brlt	.-6      	; 0x194a <__divsf3_pse+0x6a>
    1950:	98 3e       	cpi	r25, 0xE8	; 232
    1952:	dc f3       	brlt	.-10     	; 0x194a <__divsf3_pse+0x6a>
    1954:	86 95       	lsr	r24
    1956:	77 95       	ror	r23
    1958:	67 95       	ror	r22
    195a:	b7 95       	ror	r27
    195c:	f7 95       	ror	r31
    195e:	9f 5f       	subi	r25, 0xFF	; 255
    1960:	c9 f7       	brne	.-14     	; 0x1954 <__divsf3_pse+0x74>
    1962:	88 0f       	add	r24, r24
    1964:	91 1d       	adc	r25, r1
    1966:	96 95       	lsr	r25
    1968:	87 95       	ror	r24
    196a:	97 f9       	bld	r25, 7
    196c:	08 95       	ret
    196e:	e1 e0       	ldi	r30, 0x01	; 1
    1970:	66 0f       	add	r22, r22
    1972:	77 1f       	adc	r23, r23
    1974:	88 1f       	adc	r24, r24
    1976:	bb 1f       	adc	r27, r27
    1978:	62 17       	cp	r22, r18
    197a:	73 07       	cpc	r23, r19
    197c:	84 07       	cpc	r24, r20
    197e:	ba 07       	cpc	r27, r26
    1980:	20 f0       	brcs	.+8      	; 0x198a <__divsf3_pse+0xaa>
    1982:	62 1b       	sub	r22, r18
    1984:	73 0b       	sbc	r23, r19
    1986:	84 0b       	sbc	r24, r20
    1988:	ba 0b       	sbc	r27, r26
    198a:	ee 1f       	adc	r30, r30
    198c:	88 f7       	brcc	.-30     	; 0x1970 <__divsf3_pse+0x90>
    198e:	e0 95       	com	r30
    1990:	08 95       	ret

00001992 <__fixsfsi>:
    1992:	04 d0       	rcall	.+8      	; 0x199c <__fixunssfsi>
    1994:	68 94       	set
    1996:	b1 11       	cpse	r27, r1
    1998:	b5 c0       	rjmp	.+362    	; 0x1b04 <__fp_szero>
    199a:	08 95       	ret

0000199c <__fixunssfsi>:
    199c:	98 d0       	rcall	.+304    	; 0x1ace <__fp_splitA>
    199e:	88 f0       	brcs	.+34     	; 0x19c2 <__fixunssfsi+0x26>
    19a0:	9f 57       	subi	r25, 0x7F	; 127
    19a2:	90 f0       	brcs	.+36     	; 0x19c8 <__fixunssfsi+0x2c>
    19a4:	b9 2f       	mov	r27, r25
    19a6:	99 27       	eor	r25, r25
    19a8:	b7 51       	subi	r27, 0x17	; 23
    19aa:	a0 f0       	brcs	.+40     	; 0x19d4 <__fixunssfsi+0x38>
    19ac:	d1 f0       	breq	.+52     	; 0x19e2 <__fixunssfsi+0x46>
    19ae:	66 0f       	add	r22, r22
    19b0:	77 1f       	adc	r23, r23
    19b2:	88 1f       	adc	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	1a f0       	brmi	.+6      	; 0x19be <__fixunssfsi+0x22>
    19b8:	ba 95       	dec	r27
    19ba:	c9 f7       	brne	.-14     	; 0x19ae <__fixunssfsi+0x12>
    19bc:	12 c0       	rjmp	.+36     	; 0x19e2 <__fixunssfsi+0x46>
    19be:	b1 30       	cpi	r27, 0x01	; 1
    19c0:	81 f0       	breq	.+32     	; 0x19e2 <__fixunssfsi+0x46>
    19c2:	9f d0       	rcall	.+318    	; 0x1b02 <__fp_zero>
    19c4:	b1 e0       	ldi	r27, 0x01	; 1
    19c6:	08 95       	ret
    19c8:	9c c0       	rjmp	.+312    	; 0x1b02 <__fp_zero>
    19ca:	67 2f       	mov	r22, r23
    19cc:	78 2f       	mov	r23, r24
    19ce:	88 27       	eor	r24, r24
    19d0:	b8 5f       	subi	r27, 0xF8	; 248
    19d2:	39 f0       	breq	.+14     	; 0x19e2 <__fixunssfsi+0x46>
    19d4:	b9 3f       	cpi	r27, 0xF9	; 249
    19d6:	cc f3       	brlt	.-14     	; 0x19ca <__fixunssfsi+0x2e>
    19d8:	86 95       	lsr	r24
    19da:	77 95       	ror	r23
    19dc:	67 95       	ror	r22
    19de:	b3 95       	inc	r27
    19e0:	d9 f7       	brne	.-10     	; 0x19d8 <__fixunssfsi+0x3c>
    19e2:	3e f4       	brtc	.+14     	; 0x19f2 <__fixunssfsi+0x56>
    19e4:	90 95       	com	r25
    19e6:	80 95       	com	r24
    19e8:	70 95       	com	r23
    19ea:	61 95       	neg	r22
    19ec:	7f 4f       	sbci	r23, 0xFF	; 255
    19ee:	8f 4f       	sbci	r24, 0xFF	; 255
    19f0:	9f 4f       	sbci	r25, 0xFF	; 255
    19f2:	08 95       	ret

000019f4 <__floatunsisf>:
    19f4:	e8 94       	clt
    19f6:	09 c0       	rjmp	.+18     	; 0x1a0a <__floatsisf+0x12>

000019f8 <__floatsisf>:
    19f8:	97 fb       	bst	r25, 7
    19fa:	3e f4       	brtc	.+14     	; 0x1a0a <__floatsisf+0x12>
    19fc:	90 95       	com	r25
    19fe:	80 95       	com	r24
    1a00:	70 95       	com	r23
    1a02:	61 95       	neg	r22
    1a04:	7f 4f       	sbci	r23, 0xFF	; 255
    1a06:	8f 4f       	sbci	r24, 0xFF	; 255
    1a08:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0a:	99 23       	and	r25, r25
    1a0c:	a9 f0       	breq	.+42     	; 0x1a38 <__floatsisf+0x40>
    1a0e:	f9 2f       	mov	r31, r25
    1a10:	96 e9       	ldi	r25, 0x96	; 150
    1a12:	bb 27       	eor	r27, r27
    1a14:	93 95       	inc	r25
    1a16:	f6 95       	lsr	r31
    1a18:	87 95       	ror	r24
    1a1a:	77 95       	ror	r23
    1a1c:	67 95       	ror	r22
    1a1e:	b7 95       	ror	r27
    1a20:	f1 11       	cpse	r31, r1
    1a22:	f8 cf       	rjmp	.-16     	; 0x1a14 <__floatsisf+0x1c>
    1a24:	fa f4       	brpl	.+62     	; 0x1a64 <__floatsisf+0x6c>
    1a26:	bb 0f       	add	r27, r27
    1a28:	11 f4       	brne	.+4      	; 0x1a2e <__floatsisf+0x36>
    1a2a:	60 ff       	sbrs	r22, 0
    1a2c:	1b c0       	rjmp	.+54     	; 0x1a64 <__floatsisf+0x6c>
    1a2e:	6f 5f       	subi	r22, 0xFF	; 255
    1a30:	7f 4f       	sbci	r23, 0xFF	; 255
    1a32:	8f 4f       	sbci	r24, 0xFF	; 255
    1a34:	9f 4f       	sbci	r25, 0xFF	; 255
    1a36:	16 c0       	rjmp	.+44     	; 0x1a64 <__floatsisf+0x6c>
    1a38:	88 23       	and	r24, r24
    1a3a:	11 f0       	breq	.+4      	; 0x1a40 <__floatsisf+0x48>
    1a3c:	96 e9       	ldi	r25, 0x96	; 150
    1a3e:	11 c0       	rjmp	.+34     	; 0x1a62 <__floatsisf+0x6a>
    1a40:	77 23       	and	r23, r23
    1a42:	21 f0       	breq	.+8      	; 0x1a4c <__floatsisf+0x54>
    1a44:	9e e8       	ldi	r25, 0x8E	; 142
    1a46:	87 2f       	mov	r24, r23
    1a48:	76 2f       	mov	r23, r22
    1a4a:	05 c0       	rjmp	.+10     	; 0x1a56 <__floatsisf+0x5e>
    1a4c:	66 23       	and	r22, r22
    1a4e:	71 f0       	breq	.+28     	; 0x1a6c <__floatsisf+0x74>
    1a50:	96 e8       	ldi	r25, 0x86	; 134
    1a52:	86 2f       	mov	r24, r22
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	2a f0       	brmi	.+10     	; 0x1a64 <__floatsisf+0x6c>
    1a5a:	9a 95       	dec	r25
    1a5c:	66 0f       	add	r22, r22
    1a5e:	77 1f       	adc	r23, r23
    1a60:	88 1f       	adc	r24, r24
    1a62:	da f7       	brpl	.-10     	; 0x1a5a <__floatsisf+0x62>
    1a64:	88 0f       	add	r24, r24
    1a66:	96 95       	lsr	r25
    1a68:	87 95       	ror	r24
    1a6a:	97 f9       	bld	r25, 7
    1a6c:	08 95       	ret

00001a6e <__fp_inf>:
    1a6e:	97 f9       	bld	r25, 7
    1a70:	9f 67       	ori	r25, 0x7F	; 127
    1a72:	80 e8       	ldi	r24, 0x80	; 128
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	60 e0       	ldi	r22, 0x00	; 0
    1a78:	08 95       	ret

00001a7a <__fp_nan>:
    1a7a:	9f ef       	ldi	r25, 0xFF	; 255
    1a7c:	80 ec       	ldi	r24, 0xC0	; 192
    1a7e:	08 95       	ret

00001a80 <__fp_pscA>:
    1a80:	00 24       	eor	r0, r0
    1a82:	0a 94       	dec	r0
    1a84:	16 16       	cp	r1, r22
    1a86:	17 06       	cpc	r1, r23
    1a88:	18 06       	cpc	r1, r24
    1a8a:	09 06       	cpc	r0, r25
    1a8c:	08 95       	ret

00001a8e <__fp_pscB>:
    1a8e:	00 24       	eor	r0, r0
    1a90:	0a 94       	dec	r0
    1a92:	12 16       	cp	r1, r18
    1a94:	13 06       	cpc	r1, r19
    1a96:	14 06       	cpc	r1, r20
    1a98:	05 06       	cpc	r0, r21
    1a9a:	08 95       	ret

00001a9c <__fp_round>:
    1a9c:	09 2e       	mov	r0, r25
    1a9e:	03 94       	inc	r0
    1aa0:	00 0c       	add	r0, r0
    1aa2:	11 f4       	brne	.+4      	; 0x1aa8 <__fp_round+0xc>
    1aa4:	88 23       	and	r24, r24
    1aa6:	52 f0       	brmi	.+20     	; 0x1abc <__fp_round+0x20>
    1aa8:	bb 0f       	add	r27, r27
    1aaa:	40 f4       	brcc	.+16     	; 0x1abc <__fp_round+0x20>
    1aac:	bf 2b       	or	r27, r31
    1aae:	11 f4       	brne	.+4      	; 0x1ab4 <__fp_round+0x18>
    1ab0:	60 ff       	sbrs	r22, 0
    1ab2:	04 c0       	rjmp	.+8      	; 0x1abc <__fp_round+0x20>
    1ab4:	6f 5f       	subi	r22, 0xFF	; 255
    1ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aba:	9f 4f       	sbci	r25, 0xFF	; 255
    1abc:	08 95       	ret

00001abe <__fp_split3>:
    1abe:	57 fd       	sbrc	r21, 7
    1ac0:	90 58       	subi	r25, 0x80	; 128
    1ac2:	44 0f       	add	r20, r20
    1ac4:	55 1f       	adc	r21, r21
    1ac6:	59 f0       	breq	.+22     	; 0x1ade <__fp_splitA+0x10>
    1ac8:	5f 3f       	cpi	r21, 0xFF	; 255
    1aca:	71 f0       	breq	.+28     	; 0x1ae8 <__fp_splitA+0x1a>
    1acc:	47 95       	ror	r20

00001ace <__fp_splitA>:
    1ace:	88 0f       	add	r24, r24
    1ad0:	97 fb       	bst	r25, 7
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	61 f0       	breq	.+24     	; 0x1aee <__fp_splitA+0x20>
    1ad6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ad8:	79 f0       	breq	.+30     	; 0x1af8 <__fp_splitA+0x2a>
    1ada:	87 95       	ror	r24
    1adc:	08 95       	ret
    1ade:	12 16       	cp	r1, r18
    1ae0:	13 06       	cpc	r1, r19
    1ae2:	14 06       	cpc	r1, r20
    1ae4:	55 1f       	adc	r21, r21
    1ae6:	f2 cf       	rjmp	.-28     	; 0x1acc <__fp_split3+0xe>
    1ae8:	46 95       	lsr	r20
    1aea:	f1 df       	rcall	.-30     	; 0x1ace <__fp_splitA>
    1aec:	08 c0       	rjmp	.+16     	; 0x1afe <__fp_splitA+0x30>
    1aee:	16 16       	cp	r1, r22
    1af0:	17 06       	cpc	r1, r23
    1af2:	18 06       	cpc	r1, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	f1 cf       	rjmp	.-30     	; 0x1ada <__fp_splitA+0xc>
    1af8:	86 95       	lsr	r24
    1afa:	71 05       	cpc	r23, r1
    1afc:	61 05       	cpc	r22, r1
    1afe:	08 94       	sec
    1b00:	08 95       	ret

00001b02 <__fp_zero>:
    1b02:	e8 94       	clt

00001b04 <__fp_szero>:
    1b04:	bb 27       	eor	r27, r27
    1b06:	66 27       	eor	r22, r22
    1b08:	77 27       	eor	r23, r23
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	97 f9       	bld	r25, 7
    1b0e:	08 95       	ret

00001b10 <__mulsf3>:
    1b10:	0b d0       	rcall	.+22     	; 0x1b28 <__mulsf3x>
    1b12:	c4 cf       	rjmp	.-120    	; 0x1a9c <__fp_round>
    1b14:	b5 df       	rcall	.-150    	; 0x1a80 <__fp_pscA>
    1b16:	28 f0       	brcs	.+10     	; 0x1b22 <__mulsf3+0x12>
    1b18:	ba df       	rcall	.-140    	; 0x1a8e <__fp_pscB>
    1b1a:	18 f0       	brcs	.+6      	; 0x1b22 <__mulsf3+0x12>
    1b1c:	95 23       	and	r25, r21
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <__mulsf3+0x12>
    1b20:	a6 cf       	rjmp	.-180    	; 0x1a6e <__fp_inf>
    1b22:	ab cf       	rjmp	.-170    	; 0x1a7a <__fp_nan>
    1b24:	11 24       	eor	r1, r1
    1b26:	ee cf       	rjmp	.-36     	; 0x1b04 <__fp_szero>

00001b28 <__mulsf3x>:
    1b28:	ca df       	rcall	.-108    	; 0x1abe <__fp_split3>
    1b2a:	a0 f3       	brcs	.-24     	; 0x1b14 <__mulsf3+0x4>

00001b2c <__mulsf3_pse>:
    1b2c:	95 9f       	mul	r25, r21
    1b2e:	d1 f3       	breq	.-12     	; 0x1b24 <__mulsf3+0x14>
    1b30:	95 0f       	add	r25, r21
    1b32:	50 e0       	ldi	r21, 0x00	; 0
    1b34:	55 1f       	adc	r21, r21
    1b36:	62 9f       	mul	r22, r18
    1b38:	f0 01       	movw	r30, r0
    1b3a:	72 9f       	mul	r23, r18
    1b3c:	bb 27       	eor	r27, r27
    1b3e:	f0 0d       	add	r31, r0
    1b40:	b1 1d       	adc	r27, r1
    1b42:	63 9f       	mul	r22, r19
    1b44:	aa 27       	eor	r26, r26
    1b46:	f0 0d       	add	r31, r0
    1b48:	b1 1d       	adc	r27, r1
    1b4a:	aa 1f       	adc	r26, r26
    1b4c:	64 9f       	mul	r22, r20
    1b4e:	66 27       	eor	r22, r22
    1b50:	b0 0d       	add	r27, r0
    1b52:	a1 1d       	adc	r26, r1
    1b54:	66 1f       	adc	r22, r22
    1b56:	82 9f       	mul	r24, r18
    1b58:	22 27       	eor	r18, r18
    1b5a:	b0 0d       	add	r27, r0
    1b5c:	a1 1d       	adc	r26, r1
    1b5e:	62 1f       	adc	r22, r18
    1b60:	73 9f       	mul	r23, r19
    1b62:	b0 0d       	add	r27, r0
    1b64:	a1 1d       	adc	r26, r1
    1b66:	62 1f       	adc	r22, r18
    1b68:	83 9f       	mul	r24, r19
    1b6a:	a0 0d       	add	r26, r0
    1b6c:	61 1d       	adc	r22, r1
    1b6e:	22 1f       	adc	r18, r18
    1b70:	74 9f       	mul	r23, r20
    1b72:	33 27       	eor	r19, r19
    1b74:	a0 0d       	add	r26, r0
    1b76:	61 1d       	adc	r22, r1
    1b78:	23 1f       	adc	r18, r19
    1b7a:	84 9f       	mul	r24, r20
    1b7c:	60 0d       	add	r22, r0
    1b7e:	21 1d       	adc	r18, r1
    1b80:	82 2f       	mov	r24, r18
    1b82:	76 2f       	mov	r23, r22
    1b84:	6a 2f       	mov	r22, r26
    1b86:	11 24       	eor	r1, r1
    1b88:	9f 57       	subi	r25, 0x7F	; 127
    1b8a:	50 40       	sbci	r21, 0x00	; 0
    1b8c:	8a f0       	brmi	.+34     	; 0x1bb0 <__mulsf3_pse+0x84>
    1b8e:	e1 f0       	breq	.+56     	; 0x1bc8 <__mulsf3_pse+0x9c>
    1b90:	88 23       	and	r24, r24
    1b92:	4a f0       	brmi	.+18     	; 0x1ba6 <__mulsf3_pse+0x7a>
    1b94:	ee 0f       	add	r30, r30
    1b96:	ff 1f       	adc	r31, r31
    1b98:	bb 1f       	adc	r27, r27
    1b9a:	66 1f       	adc	r22, r22
    1b9c:	77 1f       	adc	r23, r23
    1b9e:	88 1f       	adc	r24, r24
    1ba0:	91 50       	subi	r25, 0x01	; 1
    1ba2:	50 40       	sbci	r21, 0x00	; 0
    1ba4:	a9 f7       	brne	.-22     	; 0x1b90 <__mulsf3_pse+0x64>
    1ba6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ba8:	51 05       	cpc	r21, r1
    1baa:	70 f0       	brcs	.+28     	; 0x1bc8 <__mulsf3_pse+0x9c>
    1bac:	60 cf       	rjmp	.-320    	; 0x1a6e <__fp_inf>
    1bae:	aa cf       	rjmp	.-172    	; 0x1b04 <__fp_szero>
    1bb0:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb2:	ec f3       	brlt	.-6      	; 0x1bae <__mulsf3_pse+0x82>
    1bb4:	98 3e       	cpi	r25, 0xE8	; 232
    1bb6:	dc f3       	brlt	.-10     	; 0x1bae <__mulsf3_pse+0x82>
    1bb8:	86 95       	lsr	r24
    1bba:	77 95       	ror	r23
    1bbc:	67 95       	ror	r22
    1bbe:	b7 95       	ror	r27
    1bc0:	f7 95       	ror	r31
    1bc2:	e7 95       	ror	r30
    1bc4:	9f 5f       	subi	r25, 0xFF	; 255
    1bc6:	c1 f7       	brne	.-16     	; 0x1bb8 <__mulsf3_pse+0x8c>
    1bc8:	fe 2b       	or	r31, r30
    1bca:	88 0f       	add	r24, r24
    1bcc:	91 1d       	adc	r25, r1
    1bce:	96 95       	lsr	r25
    1bd0:	87 95       	ror	r24
    1bd2:	97 f9       	bld	r25, 7
    1bd4:	08 95       	ret

00001bd6 <malloc>:
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	82 30       	cpi	r24, 0x02	; 2
    1bdc:	91 05       	cpc	r25, r1
    1bde:	10 f4       	brcc	.+4      	; 0x1be4 <malloc+0xe>
    1be0:	82 e0       	ldi	r24, 0x02	; 2
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	e0 91 ea 04 	lds	r30, 0x04EA	; 0x8004ea <__flp>
    1be8:	f0 91 eb 04 	lds	r31, 0x04EB	; 0x8004eb <__flp+0x1>
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	c0 e0       	ldi	r28, 0x00	; 0
    1bf2:	d0 e0       	ldi	r29, 0x00	; 0
    1bf4:	30 97       	sbiw	r30, 0x00	; 0
    1bf6:	11 f1       	breq	.+68     	; 0x1c3c <malloc+0x66>
    1bf8:	40 81       	ld	r20, Z
    1bfa:	51 81       	ldd	r21, Z+1	; 0x01
    1bfc:	48 17       	cp	r20, r24
    1bfe:	59 07       	cpc	r21, r25
    1c00:	c0 f0       	brcs	.+48     	; 0x1c32 <malloc+0x5c>
    1c02:	48 17       	cp	r20, r24
    1c04:	59 07       	cpc	r21, r25
    1c06:	61 f4       	brne	.+24     	; 0x1c20 <malloc+0x4a>
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	93 81       	ldd	r25, Z+3	; 0x03
    1c0c:	20 97       	sbiw	r28, 0x00	; 0
    1c0e:	19 f0       	breq	.+6      	; 0x1c16 <malloc+0x40>
    1c10:	9b 83       	std	Y+3, r25	; 0x03
    1c12:	8a 83       	std	Y+2, r24	; 0x02
    1c14:	2b c0       	rjmp	.+86     	; 0x1c6c <malloc+0x96>
    1c16:	90 93 eb 04 	sts	0x04EB, r25	; 0x8004eb <__flp+0x1>
    1c1a:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <__flp>
    1c1e:	26 c0       	rjmp	.+76     	; 0x1c6c <malloc+0x96>
    1c20:	21 15       	cp	r18, r1
    1c22:	31 05       	cpc	r19, r1
    1c24:	19 f0       	breq	.+6      	; 0x1c2c <malloc+0x56>
    1c26:	42 17       	cp	r20, r18
    1c28:	53 07       	cpc	r21, r19
    1c2a:	18 f4       	brcc	.+6      	; 0x1c32 <malloc+0x5c>
    1c2c:	9a 01       	movw	r18, r20
    1c2e:	be 01       	movw	r22, r28
    1c30:	df 01       	movw	r26, r30
    1c32:	ef 01       	movw	r28, r30
    1c34:	02 80       	ldd	r0, Z+2	; 0x02
    1c36:	f3 81       	ldd	r31, Z+3	; 0x03
    1c38:	e0 2d       	mov	r30, r0
    1c3a:	dc cf       	rjmp	.-72     	; 0x1bf4 <malloc+0x1e>
    1c3c:	21 15       	cp	r18, r1
    1c3e:	31 05       	cpc	r19, r1
    1c40:	09 f1       	breq	.+66     	; 0x1c84 <malloc+0xae>
    1c42:	28 1b       	sub	r18, r24
    1c44:	39 0b       	sbc	r19, r25
    1c46:	24 30       	cpi	r18, 0x04	; 4
    1c48:	31 05       	cpc	r19, r1
    1c4a:	90 f4       	brcc	.+36     	; 0x1c70 <malloc+0x9a>
    1c4c:	12 96       	adiw	r26, 0x02	; 2
    1c4e:	8d 91       	ld	r24, X+
    1c50:	9c 91       	ld	r25, X
    1c52:	13 97       	sbiw	r26, 0x03	; 3
    1c54:	61 15       	cp	r22, r1
    1c56:	71 05       	cpc	r23, r1
    1c58:	21 f0       	breq	.+8      	; 0x1c62 <malloc+0x8c>
    1c5a:	fb 01       	movw	r30, r22
    1c5c:	93 83       	std	Z+3, r25	; 0x03
    1c5e:	82 83       	std	Z+2, r24	; 0x02
    1c60:	04 c0       	rjmp	.+8      	; 0x1c6a <malloc+0x94>
    1c62:	90 93 eb 04 	sts	0x04EB, r25	; 0x8004eb <__flp+0x1>
    1c66:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <__flp>
    1c6a:	fd 01       	movw	r30, r26
    1c6c:	32 96       	adiw	r30, 0x02	; 2
    1c6e:	44 c0       	rjmp	.+136    	; 0x1cf8 <malloc+0x122>
    1c70:	fd 01       	movw	r30, r26
    1c72:	e2 0f       	add	r30, r18
    1c74:	f3 1f       	adc	r31, r19
    1c76:	81 93       	st	Z+, r24
    1c78:	91 93       	st	Z+, r25
    1c7a:	22 50       	subi	r18, 0x02	; 2
    1c7c:	31 09       	sbc	r19, r1
    1c7e:	2d 93       	st	X+, r18
    1c80:	3c 93       	st	X, r19
    1c82:	3a c0       	rjmp	.+116    	; 0x1cf8 <malloc+0x122>
    1c84:	20 91 e8 04 	lds	r18, 0x04E8	; 0x8004e8 <__brkval>
    1c88:	30 91 e9 04 	lds	r19, 0x04E9	; 0x8004e9 <__brkval+0x1>
    1c8c:	23 2b       	or	r18, r19
    1c8e:	41 f4       	brne	.+16     	; 0x1ca0 <malloc+0xca>
    1c90:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1c94:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1c98:	30 93 e9 04 	sts	0x04E9, r19	; 0x8004e9 <__brkval+0x1>
    1c9c:	20 93 e8 04 	sts	0x04E8, r18	; 0x8004e8 <__brkval>
    1ca0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1ca4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1ca8:	21 15       	cp	r18, r1
    1caa:	31 05       	cpc	r19, r1
    1cac:	41 f4       	brne	.+16     	; 0x1cbe <malloc+0xe8>
    1cae:	2d b7       	in	r18, 0x3d	; 61
    1cb0:	3e b7       	in	r19, 0x3e	; 62
    1cb2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1cb6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1cba:	24 1b       	sub	r18, r20
    1cbc:	35 0b       	sbc	r19, r21
    1cbe:	e0 91 e8 04 	lds	r30, 0x04E8	; 0x8004e8 <__brkval>
    1cc2:	f0 91 e9 04 	lds	r31, 0x04E9	; 0x8004e9 <__brkval+0x1>
    1cc6:	e2 17       	cp	r30, r18
    1cc8:	f3 07       	cpc	r31, r19
    1cca:	a0 f4       	brcc	.+40     	; 0x1cf4 <malloc+0x11e>
    1ccc:	2e 1b       	sub	r18, r30
    1cce:	3f 0b       	sbc	r19, r31
    1cd0:	28 17       	cp	r18, r24
    1cd2:	39 07       	cpc	r19, r25
    1cd4:	78 f0       	brcs	.+30     	; 0x1cf4 <malloc+0x11e>
    1cd6:	ac 01       	movw	r20, r24
    1cd8:	4e 5f       	subi	r20, 0xFE	; 254
    1cda:	5f 4f       	sbci	r21, 0xFF	; 255
    1cdc:	24 17       	cp	r18, r20
    1cde:	35 07       	cpc	r19, r21
    1ce0:	48 f0       	brcs	.+18     	; 0x1cf4 <malloc+0x11e>
    1ce2:	4e 0f       	add	r20, r30
    1ce4:	5f 1f       	adc	r21, r31
    1ce6:	50 93 e9 04 	sts	0x04E9, r21	; 0x8004e9 <__brkval+0x1>
    1cea:	40 93 e8 04 	sts	0x04E8, r20	; 0x8004e8 <__brkval>
    1cee:	81 93       	st	Z+, r24
    1cf0:	91 93       	st	Z+, r25
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <malloc+0x122>
    1cf4:	e0 e0       	ldi	r30, 0x00	; 0
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	cf 01       	movw	r24, r30
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	08 95       	ret

00001d00 <free>:
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <free+0xe>
    1d0c:	8c c0       	rjmp	.+280    	; 0x1e26 <free+0x126>
    1d0e:	fc 01       	movw	r30, r24
    1d10:	32 97       	sbiw	r30, 0x02	; 2
    1d12:	13 82       	std	Z+3, r1	; 0x03
    1d14:	12 82       	std	Z+2, r1	; 0x02
    1d16:	00 91 ea 04 	lds	r16, 0x04EA	; 0x8004ea <__flp>
    1d1a:	10 91 eb 04 	lds	r17, 0x04EB	; 0x8004eb <__flp+0x1>
    1d1e:	01 15       	cp	r16, r1
    1d20:	11 05       	cpc	r17, r1
    1d22:	81 f4       	brne	.+32     	; 0x1d44 <free+0x44>
    1d24:	20 81       	ld	r18, Z
    1d26:	31 81       	ldd	r19, Z+1	; 0x01
    1d28:	82 0f       	add	r24, r18
    1d2a:	93 1f       	adc	r25, r19
    1d2c:	20 91 e8 04 	lds	r18, 0x04E8	; 0x8004e8 <__brkval>
    1d30:	30 91 e9 04 	lds	r19, 0x04E9	; 0x8004e9 <__brkval+0x1>
    1d34:	28 17       	cp	r18, r24
    1d36:	39 07       	cpc	r19, r25
    1d38:	79 f5       	brne	.+94     	; 0x1d98 <free+0x98>
    1d3a:	f0 93 e9 04 	sts	0x04E9, r31	; 0x8004e9 <__brkval+0x1>
    1d3e:	e0 93 e8 04 	sts	0x04E8, r30	; 0x8004e8 <__brkval>
    1d42:	71 c0       	rjmp	.+226    	; 0x1e26 <free+0x126>
    1d44:	d8 01       	movw	r26, r16
    1d46:	40 e0       	ldi	r20, 0x00	; 0
    1d48:	50 e0       	ldi	r21, 0x00	; 0
    1d4a:	ae 17       	cp	r26, r30
    1d4c:	bf 07       	cpc	r27, r31
    1d4e:	50 f4       	brcc	.+20     	; 0x1d64 <free+0x64>
    1d50:	12 96       	adiw	r26, 0x02	; 2
    1d52:	2d 91       	ld	r18, X+
    1d54:	3c 91       	ld	r19, X
    1d56:	13 97       	sbiw	r26, 0x03	; 3
    1d58:	ad 01       	movw	r20, r26
    1d5a:	21 15       	cp	r18, r1
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	09 f1       	breq	.+66     	; 0x1da2 <free+0xa2>
    1d60:	d9 01       	movw	r26, r18
    1d62:	f3 cf       	rjmp	.-26     	; 0x1d4a <free+0x4a>
    1d64:	9d 01       	movw	r18, r26
    1d66:	da 01       	movw	r26, r20
    1d68:	33 83       	std	Z+3, r19	; 0x03
    1d6a:	22 83       	std	Z+2, r18	; 0x02
    1d6c:	60 81       	ld	r22, Z
    1d6e:	71 81       	ldd	r23, Z+1	; 0x01
    1d70:	86 0f       	add	r24, r22
    1d72:	97 1f       	adc	r25, r23
    1d74:	82 17       	cp	r24, r18
    1d76:	93 07       	cpc	r25, r19
    1d78:	69 f4       	brne	.+26     	; 0x1d94 <free+0x94>
    1d7a:	ec 01       	movw	r28, r24
    1d7c:	28 81       	ld	r18, Y
    1d7e:	39 81       	ldd	r19, Y+1	; 0x01
    1d80:	26 0f       	add	r18, r22
    1d82:	37 1f       	adc	r19, r23
    1d84:	2e 5f       	subi	r18, 0xFE	; 254
    1d86:	3f 4f       	sbci	r19, 0xFF	; 255
    1d88:	31 83       	std	Z+1, r19	; 0x01
    1d8a:	20 83       	st	Z, r18
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d90:	93 83       	std	Z+3, r25	; 0x03
    1d92:	82 83       	std	Z+2, r24	; 0x02
    1d94:	45 2b       	or	r20, r21
    1d96:	29 f4       	brne	.+10     	; 0x1da2 <free+0xa2>
    1d98:	f0 93 eb 04 	sts	0x04EB, r31	; 0x8004eb <__flp+0x1>
    1d9c:	e0 93 ea 04 	sts	0x04EA, r30	; 0x8004ea <__flp>
    1da0:	42 c0       	rjmp	.+132    	; 0x1e26 <free+0x126>
    1da2:	13 96       	adiw	r26, 0x03	; 3
    1da4:	fc 93       	st	X, r31
    1da6:	ee 93       	st	-X, r30
    1da8:	12 97       	sbiw	r26, 0x02	; 2
    1daa:	ed 01       	movw	r28, r26
    1dac:	49 91       	ld	r20, Y+
    1dae:	59 91       	ld	r21, Y+
    1db0:	9e 01       	movw	r18, r28
    1db2:	24 0f       	add	r18, r20
    1db4:	35 1f       	adc	r19, r21
    1db6:	e2 17       	cp	r30, r18
    1db8:	f3 07       	cpc	r31, r19
    1dba:	71 f4       	brne	.+28     	; 0x1dd8 <free+0xd8>
    1dbc:	80 81       	ld	r24, Z
    1dbe:	91 81       	ldd	r25, Z+1	; 0x01
    1dc0:	84 0f       	add	r24, r20
    1dc2:	95 1f       	adc	r25, r21
    1dc4:	02 96       	adiw	r24, 0x02	; 2
    1dc6:	11 96       	adiw	r26, 0x01	; 1
    1dc8:	9c 93       	st	X, r25
    1dca:	8e 93       	st	-X, r24
    1dcc:	82 81       	ldd	r24, Z+2	; 0x02
    1dce:	93 81       	ldd	r25, Z+3	; 0x03
    1dd0:	13 96       	adiw	r26, 0x03	; 3
    1dd2:	9c 93       	st	X, r25
    1dd4:	8e 93       	st	-X, r24
    1dd6:	12 97       	sbiw	r26, 0x02	; 2
    1dd8:	e0 e0       	ldi	r30, 0x00	; 0
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	d8 01       	movw	r26, r16
    1dde:	12 96       	adiw	r26, 0x02	; 2
    1de0:	8d 91       	ld	r24, X+
    1de2:	9c 91       	ld	r25, X
    1de4:	13 97       	sbiw	r26, 0x03	; 3
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	19 f0       	breq	.+6      	; 0x1df0 <free+0xf0>
    1dea:	f8 01       	movw	r30, r16
    1dec:	8c 01       	movw	r16, r24
    1dee:	f6 cf       	rjmp	.-20     	; 0x1ddc <free+0xdc>
    1df0:	8d 91       	ld	r24, X+
    1df2:	9c 91       	ld	r25, X
    1df4:	98 01       	movw	r18, r16
    1df6:	2e 5f       	subi	r18, 0xFE	; 254
    1df8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfa:	82 0f       	add	r24, r18
    1dfc:	93 1f       	adc	r25, r19
    1dfe:	20 91 e8 04 	lds	r18, 0x04E8	; 0x8004e8 <__brkval>
    1e02:	30 91 e9 04 	lds	r19, 0x04E9	; 0x8004e9 <__brkval+0x1>
    1e06:	28 17       	cp	r18, r24
    1e08:	39 07       	cpc	r19, r25
    1e0a:	69 f4       	brne	.+26     	; 0x1e26 <free+0x126>
    1e0c:	30 97       	sbiw	r30, 0x00	; 0
    1e0e:	29 f4       	brne	.+10     	; 0x1e1a <free+0x11a>
    1e10:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <__flp+0x1>
    1e14:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <__flp>
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <free+0x11e>
    1e1a:	13 82       	std	Z+3, r1	; 0x03
    1e1c:	12 82       	std	Z+2, r1	; 0x02
    1e1e:	10 93 e9 04 	sts	0x04E9, r17	; 0x8004e9 <__brkval+0x1>
    1e22:	00 93 e8 04 	sts	0x04E8, r16	; 0x8004e8 <__brkval>
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	08 95       	ret

00001e30 <__do_global_dtors>:
    1e30:	11 e0       	ldi	r17, 0x01	; 1
    1e32:	c7 e2       	ldi	r28, 0x27	; 39
    1e34:	d1 e0       	ldi	r29, 0x01	; 1
    1e36:	00 e0       	ldi	r16, 0x00	; 0
    1e38:	05 c0       	rjmp	.+10     	; 0x1e44 <__do_global_dtors+0x14>
    1e3a:	80 2f       	mov	r24, r16
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	d4 dc       	rcall	.-1624   	; 0x17e8 <__tablejump2__>
    1e40:	21 96       	adiw	r28, 0x01	; 1
    1e42:	01 1d       	adc	r16, r1
    1e44:	c8 32       	cpi	r28, 0x28	; 40
    1e46:	d1 07       	cpc	r29, r17
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	08 07       	cpc	r16, r24
    1e4c:	b1 f7       	brne	.-20     	; 0x1e3a <__do_global_dtors+0xa>
    1e4e:	f8 94       	cli

00001e50 <__stop_program>:
    1e50:	ff cf       	rjmp	.-2      	; 0x1e50 <__stop_program>
